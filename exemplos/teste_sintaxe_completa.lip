// üéØ TESTE COMPLETO DA SINTAXE MINIDART v2.0
// =============================================
// Este arquivo testa TODAS as funcionalidades implementadas

imprima "üöÄ === TESTE COMPLETO MINIDART v2.0 ===";
imprima "==========================================";

// ===== 1. VARI√ÅVEIS E TIPOS =====
imprima "üìä VARI√ÅVEIS E TIPOS:";

var numeroAuto = 42;
inteiro idade = 25;
real altura = 1.75;
texto nome = "MiniDart";
logico ativo = verdadeiro;

imprima "N√∫mero autom√°tico: " + paraTexto(numeroAuto);
imprima "Idade: " + paraTexto(idade);
imprima "Altura: " + paraTexto(altura);
imprima "Nome: " + nome;
imprima "Ativo: " + paraTexto(ativo);

// ===== 2. OPERADOR TYPEOF =====
imprima "\nüîç OPERADOR TYPEOF:";
imprima "Tipo de numeroAuto: " + tipode numeroAuto;
imprima "Tipo de altura: " + tipode altura;
imprima "Tipo de nome: " + tipode nome;
imprima "Tipo de ativo: " + tipode ativo;

// ===== 3. CONSTANTES =====
imprima "\nüìã CONSTANTES:";
constante inteiro MAX_IDADE = 120;
constante texto LINGUAGEM = "MiniDart";
constante var PI_APROX = 3.14159;

imprima "MAX_IDADE: " + paraTexto(MAX_IDADE);
imprima "LINGUAGEM: " + LINGUAGEM;
imprima "PI_APROX: " + paraTexto(PI_APROX);

// ===== 4. LISTAS HOMOG√äNEAS =====
imprima "\nüìã LISTAS:";

lista<inteiro> numeros = [1, 2, 3, 4, 5];
lista<texto> nomes = ["Ana", "Bruno", "Carlos"];
lista<real> precos;

imprima "Lista n√∫meros: " + paraTexto(numeros.tamanho()) + " elementos";
imprima "Primeiro n√∫mero: " + paraTexto(numeros[0]);
imprima "√öltimo n√∫mero: " + paraTexto(numeros[numeros.tamanho() - 1]);

// Acessando lista de textos
imprima "Segundo nome: " + nomes[1];

// Modificando elementos
numeros[0] = 10;
nomes[2] = "Carolina";
imprima "Primeiro ap√≥s modifica√ß√£o: " + paraTexto(numeros[0]);
imprima "Terceiro nome ap√≥s modifica√ß√£o: " + nomes[2];

// Opera√ß√µes de lista
numeros.adicionar(6);
numeros.adicionar(7);
imprima "Tamanho ap√≥s adi√ß√µes: " + paraTexto(numeros.tamanho());

// Lista inicialmente vazia
precos.adicionar(29.99);
precos.adicionar(15.50);
precos.adicionar(99.90);
imprima "Pre√ßos: " + paraTexto(precos.tamanho()) + " itens";
imprima "Lista pre√ßos vazia? " + paraTexto(precos.vazio());

// M√©todo vazio em lista com elementos
imprima "Lista n√∫meros vazia? " + paraTexto(numeros.vazio());

// ===== 5. OPERADORES ARITM√âTICOS =====
imprima "\nüßÆ OPERADORES ARITM√âTICOS:";

inteiro a = 15;
inteiro b = 4;

imprima "a = " + paraTexto(a) + ", b = " + paraTexto(b);
imprima "a + b = " + paraTexto(a + b);
imprima "a - b = " + paraTexto(a - b);
imprima "a * b = " + paraTexto(a * b);
imprima "a / b = " + paraTexto(a / b);
imprima "a % b = " + paraTexto(a % b);

// ===== 6. OPERADORES DE COMPARA√á√ÉO =====
imprima "\nüîç OPERADORES DE COMPARA√á√ÉO:";

imprima "a > b: " + paraTexto(a > b);
imprima "a < b: " + paraTexto(a < b);
imprima "a >= b: " + paraTexto(a >= b);
imprima "a <= b: " + paraTexto(a <= b);
imprima "a == b: " + paraTexto(a == b);
imprima "a != b: " + paraTexto(a != b);

// ===== 7. OPERADORES L√ìGICOS =====
imprima "\nüîÄ OPERADORES L√ìGICOS:";

logico verdade = verdadeiro;
logico mentira = falso;

// Operadores l√≥gicos agora funcionam corretamente!
logico resultado_e = verdade e mentira;
logico resultado_ou = verdade ou mentira;
logico resultado_nao1 = !verdade;
logico resultado_nao2 = !mentira;

imprima "verdade e mentira: " + paraTexto(resultado_e);
imprima "verdade ou mentira: " + paraTexto(resultado_ou);
imprima "!verdade: " + paraTexto(resultado_nao1);
imprima "!mentira: " + paraTexto(resultado_nao2);

// ===== 8. ESTRUTURAS CONDICIONAIS =====
imprima "\nüîÄ ESTRUTURAS CONDICIONAIS:";

// Condicional simples
se (idade >= 18) {
    imprima "Pessoa maior de idade";
} senao {
    imprima "Pessoa menor de idade";
}

// Condicional composta
se (altura > 1.80) {
    imprima "Pessoa alta";
} senao se (altura > 1.60) {
    imprima "Pessoa de altura m√©dia";
} senao {
    imprima "Pessoa baixa";
}

// ===== 9. LOOPS =====
imprima "\nüîÑ LOOPS:";

// Loop while
inteiro contador = 0;
imprima "Loop while (0 a 2):";
enquanto (contador < 3) {
    imprima "  contador = " + paraTexto(contador);
    contador = contador + 1;
}

// Loop for tradicional
imprima "Loop for tradicional (0 a 2):";
para (inteiro i = 0; i < 3; i = i + 1) {
    imprima "  i = " + paraTexto(i);
}

// Loop for MiniDart
imprima "Loop for MiniDart (1 a 3):";
para j = 1 ate 3 faca {
    imprima "  j = " + paraTexto(j);
}

// Loop for com incremento
imprima "Loop for com incremento 2 (0 a 6):";
para k = 0 ate 6 incremente 2 faca {
    imprima "  k = " + paraTexto(k);
}

// Loop for com decremento
imprima "Loop for com decremento (5 a 1):";
para l = 5 ate 1 decremente 1 faca {
    imprima "  l = " + paraTexto(l);
}

// Do-while
inteiro x = 0;
imprima "Do-while:";
faca {
    imprima "  x = " + paraTexto(x);
    x = x + 1;
} enquanto (x < 2);

// ===== 10. SWITCH/CASE =====
imprima "\nüéØ SWITCH/CASE:";

inteiro opcao = 2;
imprima "Testando switch com opcao = " + paraTexto(opcao);
escolha (opcao) {
    caso 1:
        imprima "  Primeira op√ß√£o selecionada";
        parar;
    caso 2:
        imprima "  Segunda op√ß√£o selecionada";
        parar;
    caso 3:
        imprima "  Terceira op√ß√£o selecionada";
        parar;
    contrario:
        imprima "  Op√ß√£o inv√°lida";
}

// ===== 11. CONTROLE DE FLUXO (BREAK/CONTINUE) =====
imprima "\nüé™ CONTROLE DE FLUXO:";

imprima "Teste de continue (pula 3) e break (para em 7):";
para i = 1 ate 10 faca {
    se (i == 3) {
        continuar;  // Pula quando i = 3
    }
    se (i == 7) {
        parar;      // Para quando i = 7
    }
    imprima "  i = " + paraTexto(i);
}

// ===== 12. ITERA√á√ÉO SOBRE LISTAS =====
imprima "\nüìã ITERA√á√ÉO SOBRE LISTAS:";

imprima "N√∫meros da lista (par/√≠mpar):";
para i = 0 ate numeros.tamanho() - 1 faca {
    inteiro valor = numeros[i];
    se (valor % 2 == 0) {
        imprima "  " + paraTexto(valor) + " √© par";
    } senao {
        imprima "  " + paraTexto(valor) + " √© √≠mpar";
    }
}

imprima "Lista de nomes:";
para i = 0 ate nomes.tamanho() - 1 faca {
    imprima "  Nome " + paraTexto(i + 1) + ": " + nomes[i];
}

// ===== 13. CONVERS√ÉO DE TIPOS =====
imprima "\nüí´ CONVERS√ÉO DE TIPOS (paraTexto):";

imprima "paraTexto(42): '" + paraTexto(42) + "'";
imprima "paraTexto(3.14159): '" + paraTexto(3.14159) + "'";
imprima "paraTexto(verdadeiro): '" + paraTexto(verdadeiro) + "'";
imprima "paraTexto(falso): '" + paraTexto(falso) + "'";

// ===== 14. OPERA√á√ïES COMPLEXAS =====
imprima "\nüß† OPERA√á√ïES COMPLEXAS:";

// Express√µes aninhadas
real resultado = (10 + 5) * 2 - 8 / 4;
imprima "Express√£o complexa: (10 + 5) * 2 - 8 / 4 = " + paraTexto(resultado);

// Condi√ß√£o complexa
imprima "Condi√ß√£o complexa testada separadamente";

// ===== 15. OPERADORES DE ATRIBUI√á√ÉO =====
imprima "\nüìù OPERADORES DE ATRIBUI√á√ÉO:";

real valor = 100.0;
imprima "Valor inicial: " + paraTexto(valor);

valor = valor + 10.0;  // +=
imprima "valor += 10: " + paraTexto(valor);

valor = valor - 5.0;   // -=
imprima "valor -= 5: " + paraTexto(valor);

valor = valor * 2.0;   // *=
imprima "valor *= 2: " + paraTexto(valor);

valor = valor / 4.0;   // /=
imprima "valor /= 4: " + paraTexto(valor);

// ===== 16. TESTE DE PRECED√äNCIA =====
imprima "\n‚öñÔ∏è TESTE DE PRECED√äNCIA:";

inteiro precedencia1 = 2 + 3 * 4;  // Deve ser 14, n√£o 20
imprima "2 + 3 * 4 = " + paraTexto(precedencia1) + " (esperado: 14)";

real precedencia2 = (2 + 3) * 4;  // Deve ser 20
imprima "(2 + 3) * 4 = " + paraTexto(precedencia2) + " (esperado: 20)";

// Teste de preced√™ncia l√≥gica (agora funciona!)
logico precedencia3 = verdadeiro ou (falso e falso);
imprima "verdadeiro ou (falso e falso) = " + paraTexto(precedencia3) + " (esperado: verdadeiro)";

// ===== FINALIZA√á√ÉO =====
imprima "\nüèÅ === TESTE COMPLETO FINALIZADO ===";
imprima "‚úÖ Todas as funcionalidades da sintaxe foram testadas!";
imprima "üìä Recursos testados:";
imprima "   ‚Ä¢ Vari√°veis (var, tipadas)";
imprima "   ‚Ä¢ Constantes";
imprima "   ‚Ä¢ Tipos b√°sicos (inteiro, real, texto, logico)";
imprima "   ‚Ä¢ Listas homog√™neas tipadas";
imprima "   ‚Ä¢ Operador typeof";
imprima "   ‚Ä¢ Operadores aritm√©ticos, l√≥gicos, compara√ß√£o";
imprima "   ‚Ä¢ Estruturas condicionais (se/senao/senao se)";
imprima "   ‚Ä¢ Loops (while, for tradicional, for MiniDart, do-while)";
imprima "   ‚Ä¢ Switch/case com contrario";
imprima "   ‚Ä¢ Break e continue";
imprima "   ‚Ä¢ Preced√™ncia de operadores";
imprima "   ‚Ä¢ Convers√£o de tipos (paraTexto)";
imprima "   ‚Ä¢ Opera√ß√µes de lista (acesso, modifica√ß√£o, m√©todos)";
imprima "";
imprima "üöÄ MiniDart v2.0 - Linguagem educacional em portugu√™s";
imprima "üéì Perfeita para ensinar programa√ß√£o!";
