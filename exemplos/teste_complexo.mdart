// =======================================================
// TESTE COMPLEXO DE TODAS AS FUNCIONALIDADES MINIDART
// Versão: v1.12.1 (sintaxe moderna)
// Sistema de Gerenciamento de Estudantes
// =======================================================

imprima "=== SISTEMA DE GERENCIAMENTO DE ESTUDANTES ===";

// 1. ESTRUTURA DE DADOS COMPLEXA COM TIPOS TIPADOS
inteiro total_estudantes = 0;
real media_geral = 0.0;
texto escola = "Escola MiniDart";
logico sistema_ativo = verdadeiro;

// 2. FUNÇÃO COMPLEXA DE CÁLCULO DE MÉDIA
real calcular_media(real nota1, real nota2, real nota3) {
    real soma = nota1 + nota2 + nota3;
    retorne soma / 3.0;
}

// 3. FUNÇÃO DE CLASSIFICAÇÃO COM MÚLTIPLAS CONDIÇÕES
texto classificar_aluno(real media) {
    se (media >= 9.0) {
        retorne "Excelente";
    } senao {
        se (media >= 7.0) {
            retorne "Bom";
        } senao {
            se (media >= 5.0) {
                retorne "Regular";
            } senao {
                retorne "Insuficiente";
            }
        }
    }
}

// 4. FUNÇÃO DE CÁLCULO DE BÔNUS COM OPERADOR TERNÁRIO
real calcular_bonus(real media, logico participacao_extra) {
    real bonus_base = media >= 8.0 ? 1.0 : 0.5;
    retorne participacao_extra ? bonus_base * 2.0 : bonus_base;
}

// 4.1. FUNÇÃO VOID PARA RELATÓRIOS
vazio exibir_relatorio_estudante(texto nome, real media, texto classificacao) {
    imprima "=== RELATÓRIO INDIVIDUAL ===";
    imprima "Nome:";
    imprima nome;
    imprima "Média:";
    imprima media;
    imprima "Classificação:";
    imprima classificacao;
    imprima "========================";
}

// 5. SIMULAÇÃO DE PROCESSAMENTO DE MÚLTIPLOS ESTUDANTES
imprima "=== PROCESSAMENTO DE ESTUDANTES ===";

// Contador para tracking
var estudantes_processados = 0;
var soma_total = 0.0;

// Simulação com loop do-while para menu interativo
var opcao_menu = 1;
faca {
    imprima "Processando estudante:";
    imprima opcao_menu;
    
    // Simulação de notas (usando incremento complexo)
    real nota1 = 0.0;
    real nota2 = 0.0;
    real nota3 = 0.0;
    
    // Geração "aleatória" de notas usando loops aninhados
    para i = 1 ate 3 faca {
        para j = 0 ate 10 incremente 2 faca {
            se (i == 1) {
                nota1 = nota1 + 0.5;
            } senao {
                se (i == 2) {
                    nota2 = nota2 + 0.7;
                } senao {
                    nota3 = nota3 + 0.6;
                }
            }
        }
    }
    
    // Normalização das notas
    nota1 = nota1 > 10.0 ? 10.0 : nota1;
    nota2 = nota2 > 10.0 ? 10.0 : nota2;
    nota3 = nota3 > 10.0 ? 10.0 : nota3;
    
    imprima "Notas:";
    imprima nota1;
    imprima nota2;
    imprima nota3;
    
    // Cálculo da média
    var media = calcular_media(nota1, nota2, nota3);
    imprima "Média:";
    imprima media;
    
    // Classificação
    var classificacao = classificar_aluno(media);
    imprima "Classificação:";
    imprima classificacao;
    
    // Exibir relatório usando função void
    texto nome_estudante = "Estudante";
    exibir_relatorio_estudante(nome_estudante, media, classificacao);
    
    // Cálculo de bônus
    var tem_participacao = media >= 7.0;
    var bonus = calcular_bonus(media, tem_participacao);
    imprima "Bônus:";
    imprima bonus;
    
    // Atualização de estatísticas usando operadores compostos
    estudantes_processados++;
    soma_total += media;
    
    // Incremento da opção do menu
    opcao_menu = opcao_menu + 1;
    
} enquanto (opcao_menu <= 3);

// 6. CÁLCULO DE ESTATÍSTICAS FINAIS
imprima "=== ESTATÍSTICAS FINAIS ===";
imprima "Total de estudantes:";
imprima estudantes_processados;

// Cálculo da média geral com verificação de divisão por zero
se (estudantes_processados > 0) {
    media_geral = soma_total / estudantes_processados;
    imprima "Média geral da turma:";
    imprima media_geral;
} senao {
    imprima "Nenhum estudante processado";
}

// 7. ANÁLISE AVANÇADA COM LOOPS COMPLEXOS
imprima "=== ANÁLISE DE DISTRIBUIÇÃO ===";

// Contadores para cada classificação
var excelente = 0;
var bom = 0;
var regular = 0;
var insuficiente = 0;

// Simulação de análise retrospectiva
para simulacao = 1 ate estudantes_processados faca {
    // Recria a média simulada
    var media_sim = soma_total / estudantes_processados;
    
    // Variação baseada na posição
    var variacao = 0.0;
    para v = 1 ate simulacao incremente 1 faca {
        variacao += 0.3;
    }
    
    media_sim = media_sim + (variacao - 1.0);
    media_sim = media_sim < 0.0 ? 0.0 : media_sim;
    media_sim = media_sim > 10.0 ? 10.0 : media_sim;
    
    // Classificação e contagem
    var class_sim = classificar_aluno(media_sim);
    
    se (class_sim == "Excelente") {
        excelente++;
    } senao {
        se (class_sim == "Bom") {
            bom++;
        } senao {
            se (class_sim == "Regular") {
                regular++;
            } senao {
                insuficiente++;
            }
        }
    }
}

// Relatório final
imprima "Distribuição de classificações:";
imprima "Excelente:";
imprima excelente;
imprima "Bom:";
imprima bom;
imprima "Regular:";
imprima regular;
imprima "Insuficiente:";
imprima insuficiente;

// 8. FUNÇÃO RECURSIVA SIMULADA COM LOOPS
inteiro calcular_fatorial_iterativo(inteiro n) {
    var resultado = 1;
    var temp = n;
    
    enquanto (temp > 1) {
        resultado *= temp;
        temp--;
    }
    
    retorne resultado;
}

// 9. SISTEMA DE RANKING AVANÇADO
imprima "=== SISTEMA DE RANKING ===";

var melhor_posicao = 1;
var posicao_atual = 1;

// Simulação de ranking usando do-while aninhado
faca {
    imprima "Posição:";
    imprima posicao_atual;
    
    // Simulação de pontuação complexa
    var pontuacao = 0;
    
    // Loop interno para cálculo de pontos
    para criterio = 1 ate 5 faca {
        var pontos_criterio = 0;
        
        // Subcálculo baseado em critérios múltiplos
        para subcrit = 0 ate 20 incremente 4 faca {
            pontos_criterio += criterio * 2;
        }
        
        pontuacao += pontos_criterio;
    }
    
    // Aplicação de modificadores baseados em posição
    se (posicao_atual == 1) {
        pontuacao *= 2; // Bônus do primeiro lugar
    } senao {
        se (posicao_atual <= 3) {
            pontuacao = pontuacao + (pontuacao / 2); // Bônus do pódio
        }
    }
    
    imprima "Pontuação:";
    imprima pontuacao;
    
    // Atualização de posição
    posicao_atual++;
    
} enquanto (posicao_atual <= 3);

// 10. VALIDAÇÃO FINAL DO SISTEMA
imprima "=== VALIDAÇÃO FINAL ===";

var testes_passaram = 0;
var total_testes = 0;

// Teste 1: Verificação de tipos
total_testes++;
se (estudantes_processados > 0 e media_geral >= 0.0) {
    testes_passaram++;
    imprima "✓ Teste de tipos: PASSOU";
} senao {
    imprima "✗ Teste de tipos: FALHOU";
}

// Teste 2: Verificação de operadores
total_testes++;
var teste_op = 10;
teste_op += 5;
teste_op *= 2;
teste_op /= 3;

se (teste_op == 10) {
    testes_passaram++;
    imprima "✓ Teste de operadores: PASSOU";
} senao {
    imprima "✗ Teste de operadores: FALHOU";
}

// Teste 3: Verificação de loops
total_testes++;
var contador_loop = 0;
para test = 1 ate 5 faca {
    contador_loop++;
}

se (contador_loop == 5) {
    testes_passaram++;
    imprima "✓ Teste de loops: PASSOU";
} senao {
    imprima "✗ Teste de loops: FALHOU";
}

// Relatório final de testes
var percentual = (testes_passaram * 100) / total_testes;
imprima "Testes aprovados:";
imprima testes_passaram;
imprima "Total de testes:";
imprima total_testes;
imprima "Percentual de sucesso:";
imprima percentual;

// Status final do sistema
var status_final = percentual >= 80.0 ? "SISTEMA APROVADO" : "SISTEMA REJEITADO";
imprima "Status final:";
imprima status_final;

imprima "=== FIM DO TESTE COMPLEXO ===";
