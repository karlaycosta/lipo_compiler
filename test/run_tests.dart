#!/usr/bin/env dart

import 'dart:io';

/// Script para executar todos os testes da Linguagem LiPo
void main(List<String> args) async {
  print('üß™ === EXECUTANDO TESTES DA LINGUAGEM LIPO ===');
  print('================================================');

  final stopwatch = Stopwatch()..start();

  // 1. Testes unit√°rios com package:test
  print('\nüìã 1. Executando testes unit√°rios...');
  await runUnitTests();

  // 2. Testes de fixtures (arquivos .lip)
  print('\nüìÅ 2. Executando testes de fixtures...');
  await runFixtureTests();

  // 3. Testes de regress√£o (exemplos existentes)
  print('\nüîÑ 3. Executando testes de regress√£o...');
  await runRegressionTests();

  stopwatch.stop();

  print('\n‚úÖ === TESTES CONCLU√çDOS ===');
  print('Tempo total: ${stopwatch.elapsedMilliseconds}ms');
  print('============================');
}

/// Executa testes unit√°rios usando package:test
Future<void> runUnitTests() async {
  try {
    final result = await Process.run('dart', [
      'test',
      'test/lipo_test.dart',
    ], workingDirectory: Directory.current.path);

    if (result.exitCode == 0) {
      print('‚úÖ Testes unit√°rios: SUCESSO');
      print(result.stdout);
    } else {
      print('‚ùå Testes unit√°rios: FALHOU');
      print(result.stderr);
    }
  } catch (e) {
    print('‚ö†Ô∏è Erro ao executar testes unit√°rios: $e');
  }
}

/// Executa testes de fixtures
Future<void> runFixtureTests() async {
  final fixturesDir = Directory('test/fixtures');

  if (!fixturesDir.existsSync()) {
    print('‚ö†Ô∏è Diret√≥rio de fixtures n√£o encontrado');
    return;
  }

  final fixtures = fixturesDir
      .listSync()
      .whereType<File>()
      .where((f) => f.path.endsWith('.lip'))
      .toList();

  int passed = 0;
  int failed = 0;

  for (final fixture in fixtures) {
    final filename = fixture.path.split(Platform.pathSeparator).last;
    stdout.write('  Testando $filename... ');

    try {
      final result = await Process.run('dart', [
        'run',
        'bin/compile.dart',
        fixture.path,
      ], workingDirectory: Directory.current.path);

      if (result.exitCode == 0) {
        print('‚úÖ');
        passed++;
      } else {
        print('‚ùå');
        print('    Erro: ${result.stderr}');
        failed++;
      }
    } catch (e) {
      print('‚ùå');
      print('    Exce√ß√£o: $e');
      failed++;
    }
  }

  print('\nResumo Fixtures: $passed passou, $failed falhou');
}

/// Executa testes de regress√£o nos exemplos existentes
Future<void> runRegressionTests() async {
  final examplesDir = Directory('exemplos');

  if (!examplesDir.existsSync()) {
    print('‚ö†Ô∏è Diret√≥rio de exemplos n√£o encontrado');
    return;
  }

  // Lista de arquivos que devem executar sem erro
  final expectedToPass = [
    'debug_basico.lip',
    'debug_comparacao.lip',
    'debug_comp_explicito.lip',
    'debug_incremento.lip',
    'debug_ternario.lip',
    'filipe.lip',
    'filipe_sem_imports.lip',
    'teste.lip',
    'teste_simples.lip',
    'teste_sintaxe_completa.lip',
  ];

  int passed = 0;
  int failed = 0;

  for (final filename in expectedToPass) {
    final file = File('exemplos/$filename');

    if (!file.existsSync()) {
      print('‚ö†Ô∏è Arquivo $filename n√£o encontrado');
      continue;
    }

    stdout.write('  Testando $filename... ');

    try {
      final result = await Process.run('dart', [
        'run',
        'bin/compile.dart',
        file.path,
      ], workingDirectory: Directory.current.path);

      if (result.exitCode == 0) {
        print('‚úÖ');
        passed++;
      } else {
        print('‚ùå');
        print('    Erro: ${result.stderr}');
        failed++;
      }
    } catch (e) {
      print('‚ùå');
      print('    Exce√ß√£o: $e');
      failed++;
    }
  }

  print('\nResumo Regress√£o: $passed passou, $failed falhou');
}
