{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "MiniDart",
  "scopeName": "source.minidart",
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#variables"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.minidart",
          "match": "\\b(se|senao|enquanto|para|faca|ate|incremente|decremente|retorne|e|ou)\\b"
        },
        {
          "name": "keyword.declaration.minidart",
          "match": "\\b(var|constante|vazio)\\b"
        },
        {
          "name": "storage.type.minidart",
          "match": "\\b(inteiro|real|texto|logico|vazio)\\b"
        },
        {
          "name": "constant.language.minidart",
          "match": "\\b(verdadeiro|falso|nulo)\\b"
        },
        {
          "name": "keyword.other.minidart",
          "match": "\\b(imprima|tipode)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.minidart",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.minidart",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.minidart",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.minidart",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.decimal.minidart",
          "match": "\\b([0-9]+\\.[0-9]+)\\b"
        },
        {
          "name": "constant.numeric.integer.minidart",
          "match": "\\b([0-9]+)\\b"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.minidart",
          "begin": "//",
          "end": "$",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.minidart"
            }
          }
        },
        {
          "name": "comment.block.minidart",
          "begin": "/\\*",
          "end": "\\*/",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.minidart"
            }
          }
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.minidart",
          "match": "\\+\\+|\\-\\-|\\+|\\-|\\*|/|%"
        },
        {
          "name": "keyword.operator.comparison.minidart",
          "match": "==|!=|<|<=|>|>="
        },
        {
          "name": "keyword.operator.logical.minidart",
          "match": "\\b(e|ou)\\b|!"
        },
        {
          "name": "keyword.operator.assignment.minidart",
          "match": "\\+=|\\-=|\\*=|/=|%=|="
        },
        {
          "name": "keyword.operator.ternary.minidart",
          "match": "\\?|:"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.minidart",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.minidart",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b"
        }
      ]
    }
  }
}
