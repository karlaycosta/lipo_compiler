// Generated by dart2js (, csp, intern-composite-values), the Dart to JavaScript compiler version: 3.8.1.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback, loadId, loadPriority):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error. The loadId argument is the deferred import that resulted in
//    this uri being loaded. The loadPriority argument is an arbitrary argument
//    string forwarded from the 'dart2js:load-priority' pragma option.
// dartDeferredLibraryMultiLoader(uris, successCallback, errorCallback, loadId, loadPriority):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of every URI in `uris`,
//    and call successCallback. If it fails to do so, it should call
//    errorCallback with an error. The loadId argument is the deferred import
//    that resulted in this uri being loaded. The loadPriority argument is an
//    arbitrary argument string forwarded from the 'dart2js:load-priority'
//    pragma option.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  function mixinPropertiesHard(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (!to.hasOwnProperty(key)) {
        to[key] = from[key];
      }
    }
  }
  function mixinPropertiesEasy(from, to) {
    Object.assign(to, from);
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(Object.getPrototypeOf(object) && Object.getPrototypeOf(object).p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        Object.setPrototypeOf(cls.prototype, sup.prototype);
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++) {
      inherit(classes[i], sup);
    }
  }
  function mixinEasy(cls, mixin) {
    mixinPropertiesEasy(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function mixinHard(cls, mixin) {
    mixinPropertiesHard(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        holder[name] = initializer();
      }
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function lazyFinal(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        var value = initializer();
        if (holder[name] !== uninitializedSentinel) {
          A.throwLateFieldADI(name);
        }
        holder[name] = value;
      }
      var finalValue = holder[name];
      holder[getterName] = function() {
        return finalValue;
      };
      return finalValue;
    };
  }
  function makeConstList(list) {
    list.$flags = 7;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i) {
      convertToFastObject(arrayOfObjects[i]);
    }
  }
  var functionCounter = 0;
  function instanceTearOffGetter(isIntercepted, parameters) {
    var cache = null;
    return isIntercepted ? function(receiver) {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(receiver, this);
    } : function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters);
      return new cache(this, null);
    };
  }
  function staticTearOffGetter(parameters) {
    var cache = null;
    return function() {
      if (cache === null)
        cache = A.closureFromTearOff(parameters).prototype;
      return cache;
    };
  }
  var typesOffset = 0;
  function tearOffParameters(container, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    if (typeof funType == "number") {
      funType += typesOffset;
    }
    return {co: container, iS: isStatic, iI: isIntercepted, rC: requiredParameterCount, dV: optionalParameterDefaultValues, cs: callNames, fs: funsOrNames, fT: funType, aI: applyIndex || 0, nDA: needsDirectAccess};
  }
  function installStaticTearOff(holder, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var parameters = tearOffParameters(holder, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, false);
    var getterFunction = staticTearOffGetter(parameters);
    holder[getterName] = getterFunction;
  }
  function installInstanceTearOff(prototype, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    isIntercepted = !!isIntercepted;
    var parameters = tearOffParameters(prototype, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, !!needsDirectAccess);
    var getterFunction = instanceTearOffGetter(isIntercepted, parameters);
    prototype[getterName] = getterFunction;
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex, false);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixinEasy, mixinHard: mixinHard, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, lazyFinal: lazyFinal, updateHolder: updateHolder, convertToFastObject: convertToFastObject, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  var J = {
    makeDispatchRecord(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor(object) {
      var proto, objectProto, $constructor, interceptor, t1,
        record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          A.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw A.wrapException(A.UnimplementedError$("Return interceptor for " + A.S(proto(object, record))));
      }
      $constructor = object.constructor;
      if ($constructor == null)
        interceptor = null;
      else {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        interceptor = $constructor[t1];
      }
      if (interceptor != null)
        return interceptor;
      interceptor = A.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return B.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return B.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return B.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        Object.defineProperty($constructor, t1, {value: B.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return B.UnknownJavaScriptObject_methods;
      }
      return B.UnknownJavaScriptObject_methods;
    },
    JSArray_JSArray$fixed($length, $E) {
      if ($length < 0 || $length > 4294967295)
        throw A.wrapException(A.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$growable($length, $E) {
      if ($length < 0)
        throw A.wrapException(A.ArgumentError$("Length must be a non-negative integer: " + $length, null));
      return A._setArrayType(new Array($length), $E._eval$1("JSArray<0>"));
    },
    JSArray_JSArray$markFixed(allocation, $E) {
      var t1 = A._setArrayType(allocation, $E._eval$1("JSArray<0>"));
      t1.$flags = 1;
      return t1;
    },
    JSString__isWhitespace(codeUnit) {
      if (codeUnit < 256)
        switch (codeUnit) {
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 32:
          case 133:
          case 160:
            return true;
          default:
            return false;
        }
      switch (codeUnit) {
        case 5760:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8232:
        case 8233:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
          return true;
        default:
          return false;
      }
    },
    JSString__skipLeadingWhitespace(string, index) {
      var t1, codeUnit;
      for (t1 = string.length; index < t1;) {
        codeUnit = string.charCodeAt(index);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
        ++index;
      }
      return index;
    },
    JSString__skipTrailingWhitespace(string, index) {
      var t1, index0, codeUnit;
      for (t1 = string.length; index > 0; index = index0) {
        index0 = index - 1;
        if (!(index0 < t1))
          return A.ioore(string, index0);
        codeUnit = string.charCodeAt(index0);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
      }
      return index;
    },
    getInterceptor$(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumNotInt.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax(receiver) {
      if (receiver == null)
        return receiver;
      if (Array.isArray(receiver))
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$s(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof A.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$x(receiver) {
      if (receiver == null)
        return receiver;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        if (typeof receiver == "symbol")
          return J.JavaScriptSymbol.prototype;
        if (typeof receiver == "bigint")
          return J.JavaScriptBigInt.prototype;
        return receiver;
      }
      if (receiver instanceof A.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    set$_innerHtml$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$_innerHtml(receiver, value);
    },
    set$text$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$text(receiver, value);
    },
    get$attributes$x(receiver) {
      return J.getInterceptor$x(receiver).get$attributes(receiver);
    },
    get$children$x(receiver) {
      return J.getInterceptor$x(receiver).get$children(receiver);
    },
    get$hashCode$(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$iterator$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$length$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    get$onClick$x(receiver) {
      return J.getInterceptor$x(receiver).get$onClick(receiver);
    },
    get$runtimeType$(receiver) {
      return J.getInterceptor$(receiver).get$runtimeType(receiver);
    },
    $eq$(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $index$asx(receiver, a0) {
      if (typeof a0 === "number")
        if (Array.isArray(receiver) || typeof receiver == "string" || A.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$asx(receiver).$index(receiver, a0);
    },
    _addEventListener$3$x(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver)._addEventListener$3(receiver, a0, a1, a2);
    },
    _clearChildren$0$x(receiver) {
      return J.getInterceptor$x(receiver)._clearChildren$0(receiver);
    },
    elementAt$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    remove$0$x(receiver) {
      return J.getInterceptor$x(receiver).remove$0(receiver);
    },
    toLowerCase$0$s(receiver) {
      return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
    },
    toString$0$(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    trim$0$s(receiver) {
      return J.getInterceptor$s(receiver).trim$0(receiver);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    LegacyJavaScriptObject: function LegacyJavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JavaScriptBigInt: function JavaScriptBigInt() {
    },
    JavaScriptSymbol: function JavaScriptSymbol() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _._length = t1;
      _._index = 0;
      _._current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSNumNotInt: function JSNumNotInt() {
    },
    JSString: function JSString() {
    }
  },
  A = {JS_CONST: function JS_CONST() {
    },
    LateError$fieldNI(fieldName) {
      return new A.LateError("Field '" + fieldName + "' has not been initialized.");
    },
    SystemHash_combine(hash, value) {
      hash = hash + value & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    SystemHash_finish(hash) {
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    checkNotNullable(value, $name, $T) {
      return value;
    },
    isToStringVisiting(object) {
      var t1, i;
      for (t1 = $.toStringVisiting.length, i = 0; i < t1; ++i)
        if (object === $.toStringVisiting[i])
          return true;
      return false;
    },
    IterableElementError_noElement() {
      return new A.StateError("No element");
    },
    IterableElementError_tooMany() {
      return new A.StateError("Too many elements");
    },
    LateError: function LateError(t0) {
      this._message = t0;
    },
    SentinelValue: function SentinelValue() {
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
      _.$ti = t2;
    },
    MappedIterable: function MappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    MappedIterator: function MappedIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_current = null;
      _._iterator = t0;
      _._f = t1;
      _.$ti = t2;
    },
    MappedListIterable: function MappedListIterable(t0, t1, t2) {
      this._source = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterable: function WhereIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterator: function WhereIterator(t0, t1, t2) {
      this._iterator = t0;
      this._f = t1;
      this.$ti = t2;
    },
    ReversedListIterable: function ReversedListIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    isJsIndexable(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return type$.JavaScriptIndexingBehavior_dynamic._is(object);
    },
    S(value) {
      var result;
      if (typeof value == "string")
        return value;
      if (typeof value == "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      result = J.toString$0$(value);
      return result;
    },
    Primitives_objectHashCode(object) {
      var hash,
        property = $.Primitives__identityHashCodeProperty;
      if (property == null)
        property = $.Primitives__identityHashCodeProperty = Symbol("identityHashCode");
      hash = object[property];
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object[property] = hash;
      }
      return hash;
    },
    Primitives_parseInt(source, radix) {
      var decimalMatch,
        match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return null;
      if (3 >= match.length)
        return A.ioore(match, 3);
      decimalMatch = match[3];
      if (decimalMatch != null)
        return parseInt(source, 10);
      if (match[2] != null)
        return parseInt(source, 16);
      return null;
    },
    Primitives_parseDouble(source) {
      var result, trimmed;
      if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
        return null;
      result = parseFloat(source);
      if (isNaN(result)) {
        trimmed = B.JSString_methods.trim$0(source);
        if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN")
          return result;
        return null;
      }
      return result;
    },
    Primitives_objectTypeName(object) {
      var interceptor, dispatchName, $constructor, constructorName;
      if (object instanceof A.Object)
        return A._rtiToString(A.instanceType(object), null);
      interceptor = J.getInterceptor$(object);
      if (interceptor === B.Interceptor_methods || interceptor === B.JavaScriptObject_methods || type$.UnknownJavaScriptObject._is(object)) {
        dispatchName = B.C_JS_CONST(object);
        if (dispatchName !== "Object" && dispatchName !== "")
          return dispatchName;
        $constructor = object.constructor;
        if (typeof $constructor == "function") {
          constructorName = $constructor.name;
          if (typeof constructorName == "string" && constructorName !== "Object" && constructorName !== "")
            return constructorName;
        }
      }
      return A._rtiToString(A.instanceType(object), null);
    },
    Primitives_safeToString(object) {
      if (typeof object == "number" || A._isBool(object))
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      if (object instanceof A.Closure)
        return object.toString$0(0);
      return "Instance of '" + A.Primitives_objectTypeName(object) + "'";
    },
    Primitives_valueFromDecomposedDate(years, month, day, hours, minutes, seconds, milliseconds, microseconds, isUtc) {
      var remainder, value, t1,
        jsMonth = month - 1;
      if (0 <= years && years < 100) {
        years += 400;
        jsMonth -= 4800;
      }
      remainder = B.JSInt_methods.$mod(microseconds, 1000);
      milliseconds += B.JSInt_methods._tdivFast$1(microseconds - remainder, 1000);
      value = isUtc ? Date.UTC(years, jsMonth, day, hours, minutes, seconds, milliseconds) : new Date(years, jsMonth, day, hours, minutes, seconds, milliseconds).valueOf();
      t1 = true;
      if (!isNaN(value))
        if (!(value < -864e13))
          if (!(value > 864e13))
            t1 = value === 864e13 && remainder !== 0;
      if (t1)
        return null;
      return value;
    },
    Primitives_lazyAsJsDate(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver._value);
      return receiver.date;
    },
    Primitives_getYear(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : A.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
    },
    Primitives_getMonth(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : A.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
    },
    Primitives_getDay(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : A.Primitives_lazyAsJsDate(receiver).getDate() + 0;
    },
    Primitives_getHours(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : A.Primitives_lazyAsJsDate(receiver).getHours() + 0;
    },
    Primitives_getMinutes(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : A.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
    },
    Primitives_getSeconds(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : A.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
    },
    Primitives_getMilliseconds(receiver) {
      return receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : A.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
    },
    Primitives_getWeekday(receiver) {
      return B.JSInt_methods.$mod((receiver.isUtc ? A.Primitives_lazyAsJsDate(receiver).getUTCDay() + 0 : A.Primitives_lazyAsJsDate(receiver).getDay() + 0) + 6, 7) + 1;
    },
    Primitives_extractStackTrace(error) {
      var jsError = error.$thrownJsError;
      if (jsError == null)
        return null;
      return A.getTraceFromException(jsError);
    },
    ioore(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw A.wrapException(A.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError(indexable, index) {
      var $length, _s5_ = "index";
      if (!A._isInt(index))
        return new A.ArgumentError(true, index, _s5_, null);
      $length = A._asInt(J.get$length$asx(indexable));
      if (index < 0 || index >= $length)
        return A.IndexError$withLength(index, $length, indexable, _s5_);
      return A.RangeError$value(index, _s5_);
    },
    wrapException(ex) {
      return A.initializeExceptionWrapper(ex, new Error());
    },
    initializeExceptionWrapper(ex, wrapper) {
      var t1;
      if (ex == null)
        ex = new A.TypeError();
      wrapper.dartException = ex;
      t1 = A.toStringWrapper;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: t1});
        wrapper.name = "";
      } else
        wrapper.toString = t1;
      return wrapper;
    },
    toStringWrapper() {
      return J.toString$0$(this.dartException);
    },
    throwExpression(ex, wrapper) {
      throw A.initializeExceptionWrapper(ex, wrapper == null ? new Error() : wrapper);
    },
    throwUnsupportedOperation(o, operation, verb) {
      var wrapper;
      if (operation == null)
        operation = 0;
      if (verb == null)
        verb = 0;
      wrapper = Error();
      A.throwExpression(A._diagnoseUnsupportedOperation(o, operation, verb), wrapper);
    },
    _diagnoseUnsupportedOperation(o, encodedOperation, encodedVerb) {
      var operation, table, tableLength, index, verb, object, flags, article, adjective;
      if (typeof encodedOperation == "string")
        operation = encodedOperation;
      else {
        table = "[]=;add;removeWhere;retainWhere;removeRange;setRange;setInt8;setInt16;setInt32;setUint8;setUint16;setUint32;setFloat32;setFloat64".split(";");
        tableLength = table.length;
        index = encodedOperation;
        if (index > tableLength) {
          encodedVerb = index / tableLength | 0;
          index %= tableLength;
        }
        operation = table[index];
      }
      verb = typeof encodedVerb == "string" ? encodedVerb : "modify;remove from;add to".split(";")[encodedVerb];
      object = type$.List_dynamic._is(o) ? "list" : "ByteData";
      flags = o.$flags | 0;
      article = "a ";
      if ((flags & 4) !== 0)
        adjective = "constant ";
      else if ((flags & 2) !== 0) {
        adjective = "unmodifiable ";
        article = "an ";
      } else
        adjective = (flags & 1) !== 0 ? "fixed-length " : "";
      return new A.UnsupportedError("'" + operation + "': Cannot " + verb + " " + article + adjective + object);
    },
    throwConcurrentModificationError(collection) {
      throw A.wrapException(A.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder_extractPattern(message) {
      var match, $arguments, argumentsExpr, expr, method, receiver;
      message = A.quoteStringForRegExp(message.replace(String({}), "$receiver$"));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = A._setArrayType([], type$.JSArray_String);
      $arguments = match.indexOf("\\$arguments\\$");
      argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
      expr = match.indexOf("\\$expr\\$");
      method = match.indexOf("\\$method\\$");
      receiver = match.indexOf("\\$receiver\\$");
      return new A.TypeErrorDecoder(message.replace(new RegExp("\\\\\\$arguments\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$argumentsExpr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$expr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$method\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$receiver\\\\\\$", "g"), "((?:x|[^x])*)"), $arguments, argumentsExpr, expr, method, receiver);
    },
    TypeErrorDecoder_provokeCallErrorOn(expression) {
      return function($expr$) {
        var $argumentsExpr$ = "$arguments$";
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOn(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    JsNoSuchMethodError$(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new A.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    unwrapException(ex) {
      var t1;
      if (ex == null)
        return new A.NullThrownFromJavaScriptException(ex);
      if (ex instanceof A.ExceptionAndStackTrace) {
        t1 = ex.dartException;
        return A.saveStackTrace(ex, t1 == null ? type$.Object._as(t1) : t1);
      }
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return A.saveStackTrace(ex, ex.dartException);
      return A._unwrapNonDartException(ex);
    },
    saveStackTrace(ex, error) {
      if (type$.Error._is(error))
        if (error.$thrownJsError == null)
          error.$thrownJsError = ex;
      return error;
    },
    _unwrapNonDartException(ex) {
      var message, number, ieErrorCode, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match;
      if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((B.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A.S(message) + " (Error " + ieErrorCode + ")", null));
            case 445:
            case 5007:
              A.S(message);
              return A.saveStackTrace(ex, new A.NullError());
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A._asString(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return A.saveStackTrace(ex, A.JsNoSuchMethodError$(A._asString(message), match));
          } else if (nullCall.matchTypeError$1(message) != null || nullLiteralCall.matchTypeError$1(message) != null || undefCall.matchTypeError$1(message) != null || undefLiteralCall.matchTypeError$1(message) != null || nullProperty.matchTypeError$1(message) != null || nullLiteralCall.matchTypeError$1(message) != null || undefProperty.matchTypeError$1(message) != null || undefLiteralProperty.matchTypeError$1(message) != null) {
            A._asString(message);
            return A.saveStackTrace(ex, new A.NullError());
          }
        }
        return A.saveStackTrace(ex, new A.UnknownJsTypeError(typeof message == "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message == "string" && message.indexOf("call stack") !== -1)
          return new A.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return A.saveStackTrace(ex, new A.ArgumentError(false, null, null, typeof message == "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message == "string" && message === "too much recursion")
          return new A.StackOverflowError();
      return ex;
    },
    getTraceFromException(exception) {
      var trace;
      if (exception instanceof A.ExceptionAndStackTrace)
        return exception.stackTrace;
      if (exception == null)
        return new A._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      trace = new A._StackTrace(exception);
      if (typeof exception === "object")
        exception.$cachedTrace = trace;
      return trace;
    },
    objectHashCode(object) {
      if (object == null)
        return J.get$hashCode$(object);
      if (typeof object == "object")
        return A.Primitives_objectHashCode(object);
      return J.get$hashCode$(object);
    },
    fillLiteralMap(keyValuePairs, result) {
      var index, index0, index1,
        $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    _invokeClosure(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      type$.Function._as(closure);
      switch (A._asInt(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw A.wrapException(A.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS(closure, arity) {
      var $function;
      if (closure == null)
        return null;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = A.convertDartClosureToJSUncached(closure, arity);
      closure.$identity = $function;
      return $function;
    },
    convertDartClosureToJSUncached(closure, arity) {
      var entry;
      switch (arity) {
        case 0:
          entry = closure.call$0;
          break;
        case 1:
          entry = closure.call$1;
          break;
        case 2:
          entry = closure.call$2;
          break;
        case 3:
          entry = closure.call$3;
          break;
        case 4:
          entry = closure.call$4;
          break;
        default:
          entry = null;
      }
      if (entry != null)
        return entry.bind(closure);
      return function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, A._invokeClosure);
    },
    Closure_fromTearOff(parameters) {
      var $prototype, $constructor, t2, trampoline, applyTrampoline, i, stub, stub0, stubName, stubCallName,
        container = parameters.co,
        isStatic = parameters.iS,
        isIntercepted = parameters.iI,
        needsDirectAccess = parameters.nDA,
        applyTrampolineIndex = parameters.aI,
        funsOrNames = parameters.fs,
        callNames = parameters.cs,
        $name = funsOrNames[0],
        callName = callNames[0],
        $function = container[$name],
        t1 = parameters.fT;
      t1.toString;
      $prototype = isStatic ? Object.create(new A.StaticClosure().constructor.prototype) : Object.create(new A.BoundClosure(null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      $constructor = isStatic ? function static_tear_off() {
        this.$initialize();
      } : function tear_off(a, b) {
        this.$initialize(a, b);
      };
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      $prototype.$_name = $name;
      $prototype.$_target = $function;
      t2 = !isStatic;
      if (t2)
        trampoline = A.Closure_forwardCallTo($name, $function, isIntercepted, needsDirectAccess);
      else {
        $prototype.$static_name = $name;
        trampoline = $function;
      }
      $prototype.$signature = A.Closure__computeSignatureFunction(t1, isStatic, isIntercepted);
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < funsOrNames.length; ++i) {
        stub = funsOrNames[i];
        if (typeof stub == "string") {
          stub0 = container[stub];
          stubName = stub;
          stub = stub0;
        } else
          stubName = "";
        stubCallName = callNames[i];
        if (stubCallName != null) {
          if (t2)
            stub = A.Closure_forwardCallTo(stubName, stub, isIntercepted, needsDirectAccess);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex)
          applyTrampoline = stub;
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = parameters.rC;
      $prototype.$defaultValues = parameters.dV;
      return $constructor;
    },
    Closure__computeSignatureFunction(functionType, isStatic, isIntercepted) {
      if (typeof functionType == "number")
        return functionType;
      if (typeof functionType == "string") {
        if (isStatic)
          throw A.wrapException("Cannot compute signature for static tearoff.");
        return function(recipe, evalOnReceiver) {
          return function() {
            return evalOnReceiver(this, recipe);
          };
        }(functionType, A.BoundClosure_evalRecipe);
      }
      throw A.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          return function(entry, receiverOf) {
            return function() {
              return receiverOf(this)[entry]();
            };
          }(stubName, getReceiver);
        case 1:
          return function(entry, receiverOf) {
            return function(a) {
              return receiverOf(this)[entry](a);
            };
          }(stubName, getReceiver);
        case 2:
          return function(entry, receiverOf) {
            return function(a, b) {
              return receiverOf(this)[entry](a, b);
            };
          }(stubName, getReceiver);
        case 3:
          return function(entry, receiverOf) {
            return function(a, b, c) {
              return receiverOf(this)[entry](a, b, c);
            };
          }(stubName, getReceiver);
        case 4:
          return function(entry, receiverOf) {
            return function(a, b, c, d) {
              return receiverOf(this)[entry](a, b, c, d);
            };
          }(stubName, getReceiver);
        case 5:
          return function(entry, receiverOf) {
            return function(a, b, c, d, e) {
              return receiverOf(this)[entry](a, b, c, d, e);
            };
          }(stubName, getReceiver);
        default:
          return function(f, receiverOf) {
            return function() {
              return f.apply(receiverOf(this), arguments);
            };
          }($function, getReceiver);
      }
    },
    Closure_forwardCallTo(stubName, $function, isIntercepted, needsDirectAccess) {
      if (isIntercepted)
        return A.Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess);
      return A.Closure_cspForwardCall($function.length, needsDirectAccess, stubName, $function);
    },
    Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = A.BoundClosure_receiverOf,
        getInterceptor = A.BoundClosure_interceptorOf;
      switch (needsDirectAccess ? -1 : arity) {
        case 0:
          throw A.wrapException(new A.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(entry, interceptorOf, receiverOf) {
            return function() {
              return interceptorOf(this)[entry](receiverOf(this));
            };
          }(stubName, getInterceptor, getReceiver);
        case 2:
          return function(entry, interceptorOf, receiverOf) {
            return function(a) {
              return interceptorOf(this)[entry](receiverOf(this), a);
            };
          }(stubName, getInterceptor, getReceiver);
        case 3:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b) {
              return interceptorOf(this)[entry](receiverOf(this), a, b);
            };
          }(stubName, getInterceptor, getReceiver);
        case 4:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c);
            };
          }(stubName, getInterceptor, getReceiver);
        case 5:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d);
            };
          }(stubName, getInterceptor, getReceiver);
        case 6:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d, e) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d, e);
            };
          }(stubName, getInterceptor, getReceiver);
        default:
          return function(f, interceptorOf, receiverOf) {
            return function() {
              var a = [receiverOf(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(interceptorOf(this), a);
            };
          }($function, getInterceptor, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess) {
      var arity, t1;
      if ($.BoundClosure__interceptorFieldNameCache == null)
        $.BoundClosure__interceptorFieldNameCache = A.BoundClosure__computeFieldNamed("interceptor");
      if ($.BoundClosure__receiverFieldNameCache == null)
        $.BoundClosure__receiverFieldNameCache = A.BoundClosure__computeFieldNamed("receiver");
      arity = $function.length;
      t1 = A.Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function);
      return t1;
    },
    closureFromTearOff(parameters) {
      return A.Closure_fromTearOff(parameters);
    },
    BoundClosure_evalRecipe(closure, recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, A.instanceType(closure._receiver), recipe);
    },
    BoundClosure_receiverOf(closure) {
      return closure._receiver;
    },
    BoundClosure_interceptorOf(closure) {
      return closure._interceptor;
    },
    BoundClosure__computeFieldNamed(fieldName) {
      var names, i, $name,
        template = new A.BoundClosure("receiver", "interceptor"),
        t1 = Object.getOwnPropertyNames(template);
      t1.$flags = 1;
      names = t1;
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
      throw A.wrapException(A.ArgumentError$("Field name " + fieldName + " not found.", null));
    },
    getIsolateAffinityTag($name) {
      return init.getIsolateTag($name);
    },
    defineProperty(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor(obj) {
      var interceptor, interceptorClass, altTag, mark, t1,
        tag = A._asString($.getTagFunction.call$1(obj)),
        record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        altTag = A._asStringQ($.alternateTagFunction.call$2(obj, tag));
        if (altTag != null) {
          record = $.dispatchRecordsForInstanceTags[altTag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[altTag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[altTag];
          tag = altTag;
        }
      }
      if (interceptorClass == null)
        return null;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = A.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return A.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw A.wrapException(A.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = A.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return A.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return A.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      A.initNativeDispatchContinue();
    },
    initNativeDispatchContinue() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      A.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = A.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = B.C_JS_CONST0();
      hooks = A.applyHooksTransformer(B.C_JS_CONST1, A.applyHooksTransformer(B.C_JS_CONST2, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST3, A.applyHooksTransformer(B.C_JS_CONST4, A.applyHooksTransformer(B.C_JS_CONST5, A.applyHooksTransformer(B.C_JS_CONST6(B.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (Array.isArray(transformers))
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new A.initHooks_closure(getTag);
      $.alternateTagFunction = new A.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new A.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    createRecordTypePredicate(shape, fieldRtis) {
      var $length = fieldRtis.length,
        $function = init.rttc["" + $length + ";" + shape];
      if ($function == null)
        return null;
      if ($length === 0)
        return $function;
      if ($length === $function.length)
        return $function.apply(null, fieldRtis);
      return $function(fieldRtis);
    },
    JSSyntaxRegExp_makeNative(source, multiLine, caseSensitive, unicode, dotAll, extraFlags) {
      var m = multiLine ? "m" : "",
        i = caseSensitive ? "" : "i",
        u = unicode ? "u" : "",
        s = dotAll ? "s" : "",
        regexp = function(source, modifiers) {
          try {
            return new RegExp(source, modifiers);
          } catch (e) {
            return e;
          }
        }(source, m + i + u + s + extraFlags);
      if (regexp instanceof RegExp)
        return regexp;
      throw A.wrapException(A.FormatException$("Illegal RegExp pattern (" + String(regexp) + ")", source));
    },
    stringContainsUnchecked(receiver, other, startIndex) {
      var t1 = receiver.indexOf(other, startIndex);
      return t1 >= 0;
    },
    escapeReplacement(replacement) {
      if (replacement.indexOf("$", 0) >= 0)
        return replacement.replace(/\$/g, "$$$$");
      return replacement;
    },
    quoteStringForRegExp(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    stringReplaceAllUnchecked(receiver, pattern, replacement) {
      var t1 = A.stringReplaceAllUncheckedString(receiver, pattern, replacement);
      return t1;
    },
    stringReplaceAllUncheckedString(receiver, pattern, replacement) {
      var $length, t1, i;
      if (pattern === "") {
        if (receiver === "")
          return replacement;
        $length = receiver.length;
        t1 = "" + replacement;
        for (i = 0; i < $length; ++i)
          t1 = t1 + receiver[i] + replacement;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      if (receiver.indexOf(pattern, 0) < 0)
        return receiver;
      if (receiver.length < 500 || replacement.indexOf("$", 0) >= 0)
        return receiver.split(pattern).join(replacement);
      return receiver.replace(new RegExp(A.quoteStringForRegExp(pattern), "g"), A.escapeReplacement(replacement));
    },
    stringReplaceFirstUnchecked(receiver, pattern, replacement, startIndex) {
      var index = receiver.indexOf(pattern, startIndex);
      if (index < 0)
        return receiver;
      return A.stringReplaceRangeUnchecked(receiver, index, index + pattern.length, replacement);
    },
    stringReplaceRangeUnchecked(receiver, start, end, replacement) {
      return receiver.substring(0, start) + replacement + receiver.substring(end);
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError() {
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this.__js_helper$_message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this.__js_helper$_message = t0;
    },
    NullThrownFromJavaScriptException: function NullThrownFromJavaScriptException(t0) {
      this._irritant = t0;
    },
    ExceptionAndStackTrace: function ExceptionAndStackTrace(t0, t1) {
      this.dartException = t0;
      this.stackTrace = t1;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    Closure0Args: function Closure0Args() {
    },
    Closure2Args: function Closure2Args() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1) {
      this._receiver = t0;
      this._interceptor = t1;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _.__js_helper$_last = _.__js_helper$_first = _.__js_helper$_rest = _.__js_helper$_nums = _.__js_helper$_strings = null;
      _.__js_helper$_modifications = 0;
      _.$ti = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      var _ = this;
      _.hashMapCellKey = t0;
      _.hashMapCellValue = t1;
      _._previous = _.__js_helper$_next = null;
    },
    LinkedHashMapKeysIterable: function LinkedHashMapKeysIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2, t3) {
      var _ = this;
      _._map = t0;
      _.__js_helper$_modifications = t1;
      _.__js_helper$_cell = t2;
      _.__js_helper$_current = null;
      _.$ti = t3;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    JSSyntaxRegExp: function JSSyntaxRegExp(t0, t1) {
      var _ = this;
      _.pattern = t0;
      _._nativeRegExp = t1;
      _._hasCapturesCache = _._nativeAnchoredRegExp = _._nativeGlobalRegExp = null;
    },
    _MatchImplementation: function _MatchImplementation(t0) {
      this.__js_helper$_match = t0;
    },
    _AllMatchesIterator: function _AllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._regExp = t0;
      _.__js_helper$_string = t1;
      _._nextIndex = t2;
      _.__js_helper$_current = null;
    },
    StringMatch: function StringMatch(t0, t1) {
      this.start = t0;
      this.pattern = t1;
    },
    _StringAllMatchesIterator: function _StringAllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._input = t0;
      _._pattern = t1;
      _.__js_helper$_index = t2;
      _.__js_helper$_current = null;
    },
    Rti__getFutureFromFutureOr(universe, rti) {
      var future = rti._precomputed1;
      return future == null ? rti._precomputed1 = A._Universe__lookupInterfaceRti(universe, "Future", [rti._primary]) : future;
    },
    Rti__isUnionOfFunctionType(rti) {
      var kind = rti._kind;
      if (kind === 6 || kind === 7)
        return A.Rti__isUnionOfFunctionType(rti._primary);
      return kind === 11 || kind === 12;
    },
    Rti__getCanonicalRecipe(rti) {
      return rti._canonicalRecipe;
    },
    findType(recipe) {
      return A._Universe_eval(init.typeUniverse, recipe, false);
    },
    _substitute(universe, rti, typeArguments, depth) {
      var baseType, substitutedBaseType, interfaceTypeArguments, substitutedInterfaceTypeArguments, base, substitutedBase, $arguments, substitutedArguments, t1, fields, substitutedFields, returnType, substitutedReturnType, functionParameters, substitutedFunctionParameters, bounds, substitutedBounds, index, argument,
        kind = rti._kind;
      switch (kind) {
        case 5:
        case 1:
        case 2:
        case 3:
        case 4:
          return rti;
        case 6:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupQuestionRti(universe, substitutedBaseType, true);
        case 7:
          baseType = rti._primary;
          substitutedBaseType = A._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return A._Universe__lookupFutureOrRti(universe, substitutedBaseType, true);
        case 8:
          interfaceTypeArguments = rti._rest;
          substitutedInterfaceTypeArguments = A._substituteArray(universe, interfaceTypeArguments, typeArguments, depth);
          if (substitutedInterfaceTypeArguments === interfaceTypeArguments)
            return rti;
          return A._Universe__lookupInterfaceRti(universe, rti._primary, substitutedInterfaceTypeArguments);
        case 9:
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          $arguments = rti._rest;
          substitutedArguments = A._substituteArray(universe, $arguments, typeArguments, depth);
          if (substitutedBase === base && substitutedArguments === $arguments)
            return rti;
          return A._Universe__lookupBindingRti(universe, substitutedBase, substitutedArguments);
        case 10:
          t1 = rti._primary;
          fields = rti._rest;
          substitutedFields = A._substituteArray(universe, fields, typeArguments, depth);
          if (substitutedFields === fields)
            return rti;
          return A._Universe__lookupRecordRti(universe, t1, substitutedFields);
        case 11:
          returnType = rti._primary;
          substitutedReturnType = A._substitute(universe, returnType, typeArguments, depth);
          functionParameters = rti._rest;
          substitutedFunctionParameters = A._substituteFunctionParameters(universe, functionParameters, typeArguments, depth);
          if (substitutedReturnType === returnType && substitutedFunctionParameters === functionParameters)
            return rti;
          return A._Universe__lookupFunctionRti(universe, substitutedReturnType, substitutedFunctionParameters);
        case 12:
          bounds = rti._rest;
          depth += bounds.length;
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, depth);
          base = rti._primary;
          substitutedBase = A._substitute(universe, base, typeArguments, depth);
          if (substitutedBounds === bounds && substitutedBase === base)
            return rti;
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, true);
        case 13:
          index = rti._primary;
          if (index < depth)
            return rti;
          argument = typeArguments[index - depth];
          if (argument == null)
            return rti;
          return argument;
        default:
          throw A.wrapException(A.AssertionError$("Attempted to substitute unexpected RTI kind " + kind));
      }
    },
    _substituteArray(universe, rtiArray, typeArguments, depth) {
      var changed, i, rti, substitutedRti,
        $length = rtiArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; ++i) {
        rti = rtiArray[i];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result[i] = substitutedRti;
      }
      return changed ? result : rtiArray;
    },
    _substituteNamed(universe, namedArray, typeArguments, depth) {
      var changed, i, t1, t2, rti, substitutedRti,
        $length = namedArray.length,
        result = A._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; i += 3) {
        t1 = namedArray[i];
        t2 = namedArray[i + 1];
        rti = namedArray[i + 2];
        substitutedRti = A._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result.splice(i, 3, t1, t2, substitutedRti);
      }
      return changed ? result : namedArray;
    },
    _substituteFunctionParameters(universe, functionParameters, typeArguments, depth) {
      var result,
        requiredPositional = functionParameters._requiredPositional,
        substitutedRequiredPositional = A._substituteArray(universe, requiredPositional, typeArguments, depth),
        optionalPositional = functionParameters._optionalPositional,
        substitutedOptionalPositional = A._substituteArray(universe, optionalPositional, typeArguments, depth),
        named = functionParameters._named,
        substitutedNamed = A._substituteNamed(universe, named, typeArguments, depth);
      if (substitutedRequiredPositional === requiredPositional && substitutedOptionalPositional === optionalPositional && substitutedNamed === named)
        return functionParameters;
      result = new A._FunctionParameters();
      result._requiredPositional = substitutedRequiredPositional;
      result._optionalPositional = substitutedOptionalPositional;
      result._named = substitutedNamed;
      return result;
    },
    _setArrayType(target, rti) {
      target[init.arrayRti] = rti;
      return target;
    },
    closureFunctionType(closure) {
      var signature = closure.$signature;
      if (signature != null) {
        if (typeof signature == "number")
          return A.getTypeFromTypesTable(signature);
        return closure.$signature();
      }
      return null;
    },
    instanceOrFunctionType(object, testRti) {
      var rti;
      if (A.Rti__isUnionOfFunctionType(testRti))
        if (object instanceof A.Closure) {
          rti = A.closureFunctionType(object);
          if (rti != null)
            return rti;
        }
      return A.instanceType(object);
    },
    instanceType(object) {
      if (object instanceof A.Object)
        return A._instanceType(object);
      if (Array.isArray(object))
        return A._arrayInstanceType(object);
      return A._instanceTypeFromConstructor(J.getInterceptor$(object));
    },
    _arrayInstanceType(object) {
      var rti = object[init.arrayRti],
        defaultRti = type$.JSArray_dynamic;
      if (rti == null)
        return defaultRti;
      if (rti.constructor !== defaultRti.constructor)
        return defaultRti;
      return rti;
    },
    _instanceType(object) {
      var rti = object.$ti;
      return rti != null ? rti : A._instanceTypeFromConstructor(object);
    },
    _instanceTypeFromConstructor(instance) {
      var $constructor = instance.constructor,
        probe = $constructor.$ccache;
      if (probe != null)
        return probe;
      return A._instanceTypeFromConstructorMiss(instance, $constructor);
    },
    _instanceTypeFromConstructorMiss(instance, $constructor) {
      var effectiveConstructor = instance instanceof A.Closure ? Object.getPrototypeOf(Object.getPrototypeOf(instance)).constructor : $constructor,
        rti = A._Universe_findErasedType(init.typeUniverse, effectiveConstructor.name);
      $constructor.$ccache = rti;
      return rti;
    },
    getTypeFromTypesTable(index) {
      var rti,
        table = init.types,
        type = table[index];
      if (typeof type == "string") {
        rti = A._Universe_eval(init.typeUniverse, type, false);
        table[index] = rti;
        return rti;
      }
      return type;
    },
    getRuntimeTypeOfDartObject(object) {
      return A.createRuntimeType(A._instanceType(object));
    },
    _structuralTypeOf(object) {
      var functionRti = object instanceof A.Closure ? A.closureFunctionType(object) : null;
      if (functionRti != null)
        return functionRti;
      if (type$.TrustedGetRuntimeType._is(object))
        return J.get$runtimeType$(object)._rti;
      if (Array.isArray(object))
        return A._arrayInstanceType(object);
      return A.instanceType(object);
    },
    createRuntimeType(rti) {
      var t1 = rti._cachedRuntimeType;
      return t1 == null ? rti._cachedRuntimeType = new A._Type(rti) : t1;
    },
    typeLiteral(recipe) {
      return A.createRuntimeType(A._Universe_eval(init.typeUniverse, recipe, false));
    },
    _installSpecializedIsTest(object) {
      var kind, isFn, $name, predicate, testRti = this;
      if (testRti === type$.Object)
        return A._finishIsFn(testRti, object, A._isObject);
      if (A.isTopType(testRti))
        return A._finishIsFn(testRti, object, A._isTop);
      kind = testRti._kind;
      if (kind === 6)
        return A._finishIsFn(testRti, object, A._generalNullableIsTestImplementation);
      if (kind === 1)
        return A._finishIsFn(testRti, object, A._isNever);
      if (kind === 7)
        return A._finishIsFn(testRti, object, A._isFutureOr);
      if (testRti === type$.int)
        isFn = A._isInt;
      else if (testRti === type$.double || testRti === type$.num)
        isFn = A._isNum;
      else if (testRti === type$.String)
        isFn = A._isString;
      else
        isFn = testRti === type$.bool ? A._isBool : null;
      if (isFn != null)
        return A._finishIsFn(testRti, object, isFn);
      if (kind === 8) {
        $name = testRti._primary;
        if (testRti._rest.every(A.isTopType)) {
          testRti._specializedTestResource = "$is" + $name;
          if ($name === "List")
            return A._finishIsFn(testRti, object, A._isListTestViaProperty);
          return A._finishIsFn(testRti, object, A._isTestViaProperty);
        }
      } else if (kind === 10) {
        predicate = A.createRecordTypePredicate(testRti._primary, testRti._rest);
        return A._finishIsFn(testRti, object, predicate == null ? A._isNever : predicate);
      }
      return A._finishIsFn(testRti, object, A._generalIsTestImplementation);
    },
    _finishIsFn(testRti, object, isFn) {
      testRti._is = isFn;
      return testRti._is(object);
    },
    _installSpecializedAsCheck(object) {
      var testRti = this,
        asFn = A._generalAsCheckImplementation;
      if (A.isTopType(testRti))
        asFn = A._asTop;
      else if (testRti === type$.Object)
        asFn = A._asObject;
      else if (A.isNullable(testRti))
        asFn = A._generalNullableAsCheckImplementation;
      if (testRti === type$.int)
        asFn = A._asInt;
      else if (testRti === type$.nullable_int)
        asFn = A._asIntQ;
      else if (testRti === type$.String)
        asFn = A._asString;
      else if (testRti === type$.nullable_String)
        asFn = A._asStringQ;
      else if (testRti === type$.bool)
        asFn = A._asBool;
      else if (testRti === type$.nullable_bool)
        asFn = A._asBoolQ;
      else if (testRti === type$.num)
        asFn = A._asNum;
      else if (testRti === type$.nullable_num)
        asFn = A._asNumQ;
      else if (testRti === type$.double)
        asFn = A._asDouble;
      else if (testRti === type$.nullable_double)
        asFn = A._asDoubleQ;
      testRti._as = asFn;
      return testRti._as(object);
    },
    _generalIsTestImplementation(object) {
      var testRti = this;
      if (object == null)
        return A.isNullable(testRti);
      return A.isSubtype(init.typeUniverse, A.instanceOrFunctionType(object, testRti), testRti);
    },
    _generalNullableIsTestImplementation(object) {
      if (object == null)
        return true;
      return this._primary._is(object);
    },
    _isTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A.isNullable(testRti);
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _isListTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return A.isNullable(testRti);
      if (typeof object != "object")
        return false;
      if (Array.isArray(object))
        return true;
      tag = testRti._specializedTestResource;
      if (object instanceof A.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _generalAsCheckImplementation(object) {
      var testRti = this;
      if (object == null) {
        if (A.isNullable(testRti))
          return object;
      } else if (testRti._is(object))
        return object;
      throw A.initializeExceptionWrapper(A._errorForAsCheck(object, testRti), new Error());
    },
    _generalNullableAsCheckImplementation(object) {
      var testRti = this;
      if (object == null || testRti._is(object))
        return object;
      throw A.initializeExceptionWrapper(A._errorForAsCheck(object, testRti), new Error());
    },
    _errorForAsCheck(object, testRti) {
      return new A._TypeError("TypeError: " + A._Error_compose(object, A._rtiToString(testRti, null)));
    },
    _Error_compose(object, checkedTypeDescription) {
      return A.Error_safeToString(object) + ": type '" + A._rtiToString(A._structuralTypeOf(object), null) + "' is not a subtype of type '" + checkedTypeDescription + "'";
    },
    _TypeError__TypeError$forType(object, type) {
      return new A._TypeError("TypeError: " + A._Error_compose(object, type));
    },
    _isFutureOr(object) {
      var testRti = this;
      return testRti._primary._is(object) || A.Rti__getFutureFromFutureOr(init.typeUniverse, testRti)._is(object);
    },
    _isObject(object) {
      return object != null;
    },
    _asObject(object) {
      if (object != null)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "Object"), new Error());
    },
    _isTop(object) {
      return true;
    },
    _asTop(object) {
      return object;
    },
    _isNever(object) {
      return false;
    },
    _isBool(object) {
      return true === object || false === object;
    },
    _asBool(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "bool"), new Error());
    },
    _asBoolQ(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "bool?"), new Error());
    },
    _asDouble(object) {
      if (typeof object == "number")
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "double"), new Error());
    },
    _asDoubleQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "double?"), new Error());
    },
    _isInt(object) {
      return typeof object == "number" && Math.floor(object) === object;
    },
    _asInt(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "int"), new Error());
    },
    _asIntQ(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "int?"), new Error());
    },
    _isNum(object) {
      return typeof object == "number";
    },
    _asNum(object) {
      if (typeof object == "number")
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "num"), new Error());
    },
    _asNumQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "num?"), new Error());
    },
    _isString(object) {
      return typeof object == "string";
    },
    _asString(object) {
      if (typeof object == "string")
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "String"), new Error());
    },
    _asStringQ(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw A.initializeExceptionWrapper(A._TypeError__TypeError$forType(object, "String?"), new Error());
    },
    _rtiArrayToString(array, genericContext) {
      var s, sep, i;
      for (s = "", sep = "", i = 0; i < array.length; ++i, sep = ", ")
        s += sep + A._rtiToString(array[i], genericContext);
      return s;
    },
    _recordRtiToString(recordType, genericContext) {
      var fieldCount, names, namesIndex, s, comma, i,
        partialShape = recordType._primary,
        fields = recordType._rest;
      if ("" === partialShape)
        return "(" + A._rtiArrayToString(fields, genericContext) + ")";
      fieldCount = fields.length;
      names = partialShape.split(",");
      namesIndex = names.length - fieldCount;
      for (s = "(", comma = "", i = 0; i < fieldCount; ++i, comma = ", ") {
        s += comma;
        if (namesIndex === 0)
          s += "{";
        s += A._rtiToString(fields[i], genericContext);
        if (namesIndex >= 0)
          s += " " + names[namesIndex];
        ++namesIndex;
      }
      return s + "})";
    },
    _functionRtiToString(functionType, genericContext, bounds) {
      var boundsLength, offset, i, t1, typeParametersText, typeSep, t2, t3, boundRti, kind, parameters, requiredPositional, requiredPositionalLength, optionalPositional, optionalPositionalLength, named, namedLength, returnTypeText, argumentsText, sep, _s2_ = ", ", outerContextLength = null;
      if (bounds != null) {
        boundsLength = bounds.length;
        if (genericContext == null)
          genericContext = A._setArrayType([], type$.JSArray_String);
        else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsLength; i > 0; --i)
          B.JSArray_methods.add$1(genericContext, "T" + (offset + i));
        for (t1 = type$.nullable_Object, typeParametersText = "<", typeSep = "", i = 0; i < boundsLength; ++i, typeSep = _s2_) {
          t2 = genericContext.length;
          t3 = t2 - 1 - i;
          if (!(t3 >= 0))
            return A.ioore(genericContext, t3);
          typeParametersText = typeParametersText + typeSep + genericContext[t3];
          boundRti = bounds[i];
          kind = boundRti._kind;
          if (!(kind === 2 || kind === 3 || kind === 4 || kind === 5 || boundRti === t1))
            typeParametersText += " extends " + A._rtiToString(boundRti, genericContext);
        }
        typeParametersText += ">";
      } else
        typeParametersText = "";
      t1 = functionType._primary;
      parameters = functionType._rest;
      requiredPositional = parameters._requiredPositional;
      requiredPositionalLength = requiredPositional.length;
      optionalPositional = parameters._optionalPositional;
      optionalPositionalLength = optionalPositional.length;
      named = parameters._named;
      namedLength = named.length;
      returnTypeText = A._rtiToString(t1, genericContext);
      for (argumentsText = "", sep = "", i = 0; i < requiredPositionalLength; ++i, sep = _s2_)
        argumentsText += sep + A._rtiToString(requiredPositional[i], genericContext);
      if (optionalPositionalLength > 0) {
        argumentsText += sep + "[";
        for (sep = "", i = 0; i < optionalPositionalLength; ++i, sep = _s2_)
          argumentsText += sep + A._rtiToString(optionalPositional[i], genericContext);
        argumentsText += "]";
      }
      if (namedLength > 0) {
        argumentsText += sep + "{";
        for (sep = "", i = 0; i < namedLength; i += 3, sep = _s2_) {
          argumentsText += sep;
          if (named[i + 1])
            argumentsText += "required ";
          argumentsText += A._rtiToString(named[i + 2], genericContext) + " " + named[i];
        }
        argumentsText += "}";
      }
      if (outerContextLength != null) {
        genericContext.toString;
        genericContext.length = outerContextLength;
      }
      return typeParametersText + "(" + argumentsText + ") => " + returnTypeText;
    },
    _rtiToString(rti, genericContext) {
      var questionArgument, s, argumentKind, $name, $arguments, t1, t2,
        kind = rti._kind;
      if (kind === 5)
        return "erased";
      if (kind === 2)
        return "dynamic";
      if (kind === 3)
        return "void";
      if (kind === 1)
        return "Never";
      if (kind === 4)
        return "any";
      if (kind === 6) {
        questionArgument = rti._primary;
        s = A._rtiToString(questionArgument, genericContext);
        argumentKind = questionArgument._kind;
        return (argumentKind === 11 || argumentKind === 12 ? "(" + s + ")" : s) + "?";
      }
      if (kind === 7)
        return "FutureOr<" + A._rtiToString(rti._primary, genericContext) + ">";
      if (kind === 8) {
        $name = A._unminifyOrTag(rti._primary);
        $arguments = rti._rest;
        return $arguments.length > 0 ? $name + ("<" + A._rtiArrayToString($arguments, genericContext) + ">") : $name;
      }
      if (kind === 10)
        return A._recordRtiToString(rti, genericContext);
      if (kind === 11)
        return A._functionRtiToString(rti, genericContext, null);
      if (kind === 12)
        return A._functionRtiToString(rti._primary, genericContext, rti._rest);
      if (kind === 13) {
        t1 = rti._primary;
        t2 = genericContext.length;
        t1 = t2 - 1 - t1;
        if (!(t1 >= 0 && t1 < t2))
          return A.ioore(genericContext, t1);
        return genericContext[t1];
      }
      return "?";
    },
    _unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    _Universe_findRule(universe, targetType) {
      var rule = universe.tR[targetType];
      for (; typeof rule == "string";)
        rule = universe.tR[rule];
      return rule;
    },
    _Universe_findErasedType(universe, cls) {
      var $length, erased, $arguments, i, $interface,
        t1 = universe.eT,
        probe = t1[cls];
      if (probe == null)
        return A._Universe_eval(universe, cls, false);
      else if (typeof probe == "number") {
        $length = probe;
        erased = A._Universe__lookupTerminalRti(universe, 5, "#");
        $arguments = A._Utils_newArrayOrEmpty($length);
        for (i = 0; i < $length; ++i)
          $arguments[i] = erased;
        $interface = A._Universe__lookupInterfaceRti(universe, cls, $arguments);
        t1[cls] = $interface;
        return $interface;
      } else
        return probe;
    },
    _Universe_addRules(universe, rules) {
      return A._Utils_objectAssign(universe.tR, rules);
    },
    _Universe_addErasedTypes(universe, types) {
      return A._Utils_objectAssign(universe.eT, types);
    },
    _Universe_eval(universe, recipe, normalize) {
      var rti,
        t1 = universe.eC,
        probe = t1.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, null, recipe, false));
      t1.set(recipe, rti);
      return rti;
    },
    _Universe_evalInEnvironment(universe, environment, recipe) {
      var probe, rti,
        cache = environment._evalCache;
      if (cache == null)
        cache = environment._evalCache = new Map();
      probe = cache.get(recipe);
      if (probe != null)
        return probe;
      rti = A._Parser_parse(A._Parser_create(universe, environment, recipe, true));
      cache.set(recipe, rti);
      return rti;
    },
    _Universe_bind(universe, environment, argumentsRti) {
      var argumentsRecipe, probe, rti,
        cache = environment._bindCache;
      if (cache == null)
        cache = environment._bindCache = new Map();
      argumentsRecipe = argumentsRti._canonicalRecipe;
      probe = cache.get(argumentsRecipe);
      if (probe != null)
        return probe;
      rti = A._Universe__lookupBindingRti(universe, environment, argumentsRti._kind === 9 ? argumentsRti._rest : [argumentsRti]);
      cache.set(argumentsRecipe, rti);
      return rti;
    },
    _Universe__installTypeTests(universe, rti) {
      rti._as = A._installSpecializedAsCheck;
      rti._is = A._installSpecializedIsTest;
      return rti;
    },
    _Universe__lookupTerminalRti(universe, kind, key) {
      var rti, t1,
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = kind;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupQuestionRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "?",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createQuestionRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createQuestionRti(universe, baseType, key, normalize) {
      var baseKind, t1, rti;
      if (normalize) {
        baseKind = baseType._kind;
        t1 = true;
        if (!A.isTopType(baseType))
          if (!(baseType === type$.Null || baseType === type$.JSNull))
            if (baseKind !== 6)
              t1 = baseKind === 7 && A.isNullable(baseType._primary);
        if (t1)
          return baseType;
        else if (baseKind === 1)
          return type$.Null;
      }
      rti = new A.Rti(null, null);
      rti._kind = 6;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupFutureOrRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "/",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createFutureOrRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createFutureOrRti(universe, baseType, key, normalize) {
      var t1, rti;
      if (normalize) {
        t1 = baseType._kind;
        if (A.isTopType(baseType) || baseType === type$.Object)
          return baseType;
        else if (t1 === 1)
          return A._Universe__lookupInterfaceRti(universe, "Future", [baseType]);
        else if (baseType === type$.Null || baseType === type$.JSNull)
          return type$.nullable_Future_Null;
      }
      rti = new A.Rti(null, null);
      rti._kind = 7;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupGenericFunctionParameterRti(universe, index) {
      var rti, t1,
        key = "" + index + "^",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 13;
      rti._primary = index;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__canonicalRecipeJoin($arguments) {
      var s, sep, i,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; ++i, sep = ",")
        s += sep + $arguments[i]._canonicalRecipe;
      return s;
    },
    _Universe__canonicalRecipeJoinNamed($arguments) {
      var s, sep, i, t1, nameSep,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; i += 3, sep = ",") {
        t1 = $arguments[i];
        nameSep = $arguments[i + 1] ? "!" : ":";
        s += sep + t1 + nameSep + $arguments[i + 2]._canonicalRecipe;
      }
      return s;
    },
    _Universe__lookupInterfaceRti(universe, $name, $arguments) {
      var probe, rti, t1,
        s = $name;
      if ($arguments.length > 0)
        s += "<" + A._Universe__canonicalRecipeJoin($arguments) + ">";
      probe = universe.eC.get(s);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 8;
      rti._primary = $name;
      rti._rest = $arguments;
      if ($arguments.length > 0)
        rti._precomputed1 = $arguments[0];
      rti._canonicalRecipe = s;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(s, t1);
      return t1;
    },
    _Universe__lookupBindingRti(universe, base, $arguments) {
      var newBase, newArguments, key, probe, rti, t1;
      if (base._kind === 9) {
        newBase = base._primary;
        newArguments = base._rest.concat($arguments);
      } else {
        newArguments = $arguments;
        newBase = base;
      }
      key = newBase._canonicalRecipe + (";<" + A._Universe__canonicalRecipeJoin(newArguments) + ">");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 9;
      rti._primary = newBase;
      rti._rest = newArguments;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupRecordRti(universe, partialShapeTag, fields) {
      var rti, t1,
        key = "+" + (partialShapeTag + "(" + A._Universe__canonicalRecipeJoin(fields) + ")"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 10;
      rti._primary = partialShapeTag;
      rti._rest = fields;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupFunctionRti(universe, returnType, parameters) {
      var sep, key, probe, rti, t1,
        s = returnType._canonicalRecipe,
        requiredPositional = parameters._requiredPositional,
        requiredPositionalLength = requiredPositional.length,
        optionalPositional = parameters._optionalPositional,
        optionalPositionalLength = optionalPositional.length,
        named = parameters._named,
        namedLength = named.length,
        recipe = "(" + A._Universe__canonicalRecipeJoin(requiredPositional);
      if (optionalPositionalLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "[" + A._Universe__canonicalRecipeJoin(optionalPositional) + "]";
      }
      if (namedLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        recipe += sep + "{" + A._Universe__canonicalRecipeJoinNamed(named) + "}";
      }
      key = s + (recipe + ")");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new A.Rti(null, null);
      rti._kind = 11;
      rti._primary = returnType;
      rti._rest = parameters;
      rti._canonicalRecipe = key;
      t1 = A._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupGenericFunctionRti(universe, baseFunctionType, bounds, normalize) {
      var t1,
        key = baseFunctionType._canonicalRecipe + ("<" + A._Universe__canonicalRecipeJoin(bounds) + ">"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = A._Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize) {
      var $length, typeArguments, count, i, bound, substitutedBase, substitutedBounds, rti;
      if (normalize) {
        $length = bounds.length;
        typeArguments = A._Utils_newArrayOrEmpty($length);
        for (count = 0, i = 0; i < $length; ++i) {
          bound = bounds[i];
          if (bound._kind === 1) {
            typeArguments[i] = bound;
            ++count;
          }
        }
        if (count > 0) {
          substitutedBase = A._substitute(universe, baseFunctionType, typeArguments, 0);
          substitutedBounds = A._substituteArray(universe, bounds, typeArguments, 0);
          return A._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, bounds !== substitutedBounds);
        }
      }
      rti = new A.Rti(null, null);
      rti._kind = 12;
      rti._primary = baseFunctionType;
      rti._rest = bounds;
      rti._canonicalRecipe = key;
      return A._Universe__installTypeTests(universe, rti);
    },
    _Parser_create(universe, environment, recipe, normalize) {
      return {u: universe, e: environment, r: recipe, s: [], p: 0, n: normalize};
    },
    _Parser_parse(parser) {
      var t2, i, ch, t3, array, end, item,
        source = parser.r,
        t1 = parser.s;
      for (t2 = source.length, i = 0; i < t2;) {
        ch = source.charCodeAt(i);
        if (ch >= 48 && ch <= 57)
          i = A._Parser_handleDigit(i + 1, ch, source, t1);
        else if ((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36 || ch === 124)
          i = A._Parser_handleIdentifier(parser, i, source, t1, false);
        else if (ch === 46)
          i = A._Parser_handleIdentifier(parser, i, source, t1, true);
        else {
          ++i;
          switch (ch) {
            case 44:
              break;
            case 58:
              t1.push(false);
              break;
            case 33:
              t1.push(true);
              break;
            case 59:
              t1.push(A._Parser_toType(parser.u, parser.e, t1.pop()));
              break;
            case 94:
              t1.push(A._Universe__lookupGenericFunctionParameterRti(parser.u, t1.pop()));
              break;
            case 35:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 5, "#"));
              break;
            case 64:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 2, "@"));
              break;
            case 126:
              t1.push(A._Universe__lookupTerminalRti(parser.u, 3, "~"));
              break;
            case 60:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 62:
              A._Parser_handleTypeArguments(parser, t1);
              break;
            case 38:
              A._Parser_handleExtendedOperations(parser, t1);
              break;
            case 63:
              t3 = parser.u;
              t1.push(A._Universe__lookupQuestionRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 47:
              t3 = parser.u;
              t1.push(A._Universe__lookupFutureOrRti(t3, A._Parser_toType(t3, parser.e, t1.pop()), parser.n));
              break;
            case 40:
              t1.push(-3);
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 41:
              A._Parser_handleArguments(parser, t1);
              break;
            case 91:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 93:
              array = t1.splice(parser.p);
              A._Parser_toTypes(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-1);
              break;
            case 123:
              t1.push(parser.p);
              parser.p = t1.length;
              break;
            case 125:
              array = t1.splice(parser.p);
              A._Parser_toTypesNamed(parser.u, parser.e, array);
              parser.p = t1.pop();
              t1.push(array);
              t1.push(-2);
              break;
            case 43:
              end = source.indexOf("(", i);
              t1.push(source.substring(i, end));
              t1.push(-4);
              t1.push(parser.p);
              parser.p = t1.length;
              i = end + 1;
              break;
            default:
              throw "Bad character " + ch;
          }
        }
      }
      item = t1.pop();
      return A._Parser_toType(parser.u, parser.e, item);
    },
    _Parser_handleDigit(i, digit, source, stack) {
      var t1, ch,
        value = digit - 48;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (!(ch >= 48 && ch <= 57))
          break;
        value = value * 10 + (ch - 48);
      }
      stack.push(value);
      return i;
    },
    _Parser_handleIdentifier(parser, start, source, stack, hasPeriod) {
      var t1, ch, t2, string, environment, recipe,
        i = start + 1;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (ch === 46) {
          if (hasPeriod)
            break;
          hasPeriod = true;
        } else {
          if (!((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36 || ch === 124))
            t2 = ch >= 48 && ch <= 57;
          else
            t2 = true;
          if (!t2)
            break;
        }
      }
      string = source.substring(start, i);
      if (hasPeriod) {
        t1 = parser.u;
        environment = parser.e;
        if (environment._kind === 9)
          environment = environment._primary;
        recipe = A._Universe_findRule(t1, environment._primary)[string];
        if (recipe == null)
          A.throwExpression('No "' + string + '" in "' + A.Rti__getCanonicalRecipe(environment) + '"');
        stack.push(A._Universe_evalInEnvironment(t1, environment, recipe));
      } else
        stack.push(string);
      return i;
    },
    _Parser_handleTypeArguments(parser, stack) {
      var base,
        t1 = parser.u,
        $arguments = A._Parser_collectArray(parser, stack),
        head = stack.pop();
      if (typeof head == "string")
        stack.push(A._Universe__lookupInterfaceRti(t1, head, $arguments));
      else {
        base = A._Parser_toType(t1, parser.e, head);
        switch (base._kind) {
          case 11:
            stack.push(A._Universe__lookupGenericFunctionRti(t1, base, $arguments, parser.n));
            break;
          default:
            stack.push(A._Universe__lookupBindingRti(t1, base, $arguments));
            break;
        }
      }
    },
    _Parser_handleArguments(parser, stack) {
      var requiredPositional, returnType, parameters,
        t1 = parser.u,
        head = stack.pop(),
        optionalPositional = null, named = null;
      if (typeof head == "number")
        switch (head) {
          case -1:
            optionalPositional = stack.pop();
            break;
          case -2:
            named = stack.pop();
            break;
          default:
            stack.push(head);
            break;
        }
      else
        stack.push(head);
      requiredPositional = A._Parser_collectArray(parser, stack);
      head = stack.pop();
      switch (head) {
        case -3:
          head = stack.pop();
          if (optionalPositional == null)
            optionalPositional = t1.sEA;
          if (named == null)
            named = t1.sEA;
          returnType = A._Parser_toType(t1, parser.e, head);
          parameters = new A._FunctionParameters();
          parameters._requiredPositional = requiredPositional;
          parameters._optionalPositional = optionalPositional;
          parameters._named = named;
          stack.push(A._Universe__lookupFunctionRti(t1, returnType, parameters));
          return;
        case -4:
          stack.push(A._Universe__lookupRecordRti(t1, stack.pop(), requiredPositional));
          return;
        default:
          throw A.wrapException(A.AssertionError$("Unexpected state under `()`: " + A.S(head)));
      }
    },
    _Parser_handleExtendedOperations(parser, stack) {
      var $top = stack.pop();
      if (0 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 1, "0&"));
        return;
      }
      if (1 === $top) {
        stack.push(A._Universe__lookupTerminalRti(parser.u, 4, "1&"));
        return;
      }
      throw A.wrapException(A.AssertionError$("Unexpected extended operation " + A.S($top)));
    },
    _Parser_collectArray(parser, stack) {
      var array = stack.splice(parser.p);
      A._Parser_toTypes(parser.u, parser.e, array);
      parser.p = stack.pop();
      return array;
    },
    _Parser_toType(universe, environment, item) {
      if (typeof item == "string")
        return A._Universe__lookupInterfaceRti(universe, item, universe.sEA);
      else if (typeof item == "number") {
        environment.toString;
        return A._Parser_indexToType(universe, environment, item);
      } else
        return item;
    },
    _Parser_toTypes(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 0; i < $length; ++i)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_toTypesNamed(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 2; i < $length; i += 3)
        items[i] = A._Parser_toType(universe, environment, items[i]);
    },
    _Parser_indexToType(universe, environment, index) {
      var typeArguments, len,
        kind = environment._kind;
      if (kind === 9) {
        if (index === 0)
          return environment._primary;
        typeArguments = environment._rest;
        len = typeArguments.length;
        if (index <= len)
          return typeArguments[index - 1];
        index -= len;
        environment = environment._primary;
        kind = environment._kind;
      } else if (index === 0)
        return environment;
      if (kind !== 8)
        throw A.wrapException(A.AssertionError$("Indexed base must be an interface type"));
      typeArguments = environment._rest;
      if (index <= typeArguments.length)
        return typeArguments[index - 1];
      throw A.wrapException(A.AssertionError$("Bad index " + index + " for " + environment.toString$0(0)));
    },
    isSubtype(universe, s, t) {
      var result,
        sCache = s._isSubtypeCache;
      if (sCache == null)
        sCache = s._isSubtypeCache = new Map();
      result = sCache.get(t);
      if (result == null) {
        result = A._isSubtype(universe, s, null, t, null);
        sCache.set(t, result);
      }
      return result;
    },
    _isSubtype(universe, s, sEnv, t, tEnv) {
      var sKind, leftTypeVariable, tKind, t1, t2, sBounds, tBounds, sLength, i, sBound, tBound;
      if (s === t)
        return true;
      if (A.isTopType(t))
        return true;
      sKind = s._kind;
      if (sKind === 4)
        return true;
      if (A.isTopType(s))
        return false;
      if (s._kind === 1)
        return true;
      leftTypeVariable = sKind === 13;
      if (leftTypeVariable)
        if (A._isSubtype(universe, sEnv[s._primary], sEnv, t, tEnv))
          return true;
      tKind = t._kind;
      t1 = type$.Null;
      if (s === t1 || s === type$.JSNull) {
        if (tKind === 7)
          return A._isSubtype(universe, s, sEnv, t._primary, tEnv);
        return t === t1 || t === type$.JSNull || tKind === 6;
      }
      if (t === type$.Object) {
        if (sKind === 7)
          return A._isSubtype(universe, s._primary, sEnv, t, tEnv);
        return sKind !== 6;
      }
      if (sKind === 7) {
        if (!A._isSubtype(universe, s._primary, sEnv, t, tEnv))
          return false;
        return A._isSubtype(universe, A.Rti__getFutureFromFutureOr(universe, s), sEnv, t, tEnv);
      }
      if (sKind === 6)
        return A._isSubtype(universe, t1, sEnv, t, tEnv) && A._isSubtype(universe, s._primary, sEnv, t, tEnv);
      if (tKind === 7) {
        if (A._isSubtype(universe, s, sEnv, t._primary, tEnv))
          return true;
        return A._isSubtype(universe, s, sEnv, A.Rti__getFutureFromFutureOr(universe, t), tEnv);
      }
      if (tKind === 6)
        return A._isSubtype(universe, s, sEnv, t1, tEnv) || A._isSubtype(universe, s, sEnv, t._primary, tEnv);
      if (leftTypeVariable)
        return false;
      t1 = sKind !== 11;
      if ((!t1 || sKind === 12) && t === type$.Function)
        return true;
      t2 = sKind === 10;
      if (t2 && t === type$.Record)
        return true;
      if (tKind === 12) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (sKind !== 12)
          return false;
        sBounds = s._rest;
        tBounds = t._rest;
        sLength = sBounds.length;
        if (sLength !== tBounds.length)
          return false;
        sEnv = sEnv == null ? sBounds : sBounds.concat(sEnv);
        tEnv = tEnv == null ? tBounds : tBounds.concat(tEnv);
        for (i = 0; i < sLength; ++i) {
          sBound = sBounds[i];
          tBound = tBounds[i];
          if (!A._isSubtype(universe, sBound, sEnv, tBound, tEnv) || !A._isSubtype(universe, tBound, tEnv, sBound, sEnv))
            return false;
        }
        return A._isFunctionSubtype(universe, s._primary, sEnv, t._primary, tEnv);
      }
      if (tKind === 11) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (t1)
          return false;
        return A._isFunctionSubtype(universe, s, sEnv, t, tEnv);
      }
      if (sKind === 8) {
        if (tKind !== 8)
          return false;
        return A._isInterfaceSubtype(universe, s, sEnv, t, tEnv);
      }
      if (t2 && tKind === 10)
        return A._isRecordSubtype(universe, s, sEnv, t, tEnv);
      return false;
    },
    _isFunctionSubtype(universe, s, sEnv, t, tEnv) {
      var sParameters, tParameters, sRequiredPositional, tRequiredPositional, sRequiredPositionalLength, tRequiredPositionalLength, requiredPositionalDelta, sOptionalPositional, tOptionalPositional, sOptionalPositionalLength, tOptionalPositionalLength, i, t1, sNamed, tNamed, sNamedLength, tNamedLength, sIndex, tIndex, tName, sName, sIsRequired;
      if (!A._isSubtype(universe, s._primary, sEnv, t._primary, tEnv))
        return false;
      sParameters = s._rest;
      tParameters = t._rest;
      sRequiredPositional = sParameters._requiredPositional;
      tRequiredPositional = tParameters._requiredPositional;
      sRequiredPositionalLength = sRequiredPositional.length;
      tRequiredPositionalLength = tRequiredPositional.length;
      if (sRequiredPositionalLength > tRequiredPositionalLength)
        return false;
      requiredPositionalDelta = tRequiredPositionalLength - sRequiredPositionalLength;
      sOptionalPositional = sParameters._optionalPositional;
      tOptionalPositional = tParameters._optionalPositional;
      sOptionalPositionalLength = sOptionalPositional.length;
      tOptionalPositionalLength = tOptionalPositional.length;
      if (sRequiredPositionalLength + sOptionalPositionalLength < tRequiredPositionalLength + tOptionalPositionalLength)
        return false;
      for (i = 0; i < sRequiredPositionalLength; ++i) {
        t1 = sRequiredPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < requiredPositionalDelta; ++i) {
        t1 = sOptionalPositional[i];
        if (!A._isSubtype(universe, tRequiredPositional[sRequiredPositionalLength + i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < tOptionalPositionalLength; ++i) {
        t1 = sOptionalPositional[requiredPositionalDelta + i];
        if (!A._isSubtype(universe, tOptionalPositional[i], tEnv, t1, sEnv))
          return false;
      }
      sNamed = sParameters._named;
      tNamed = tParameters._named;
      sNamedLength = sNamed.length;
      tNamedLength = tNamed.length;
      for (sIndex = 0, tIndex = 0; tIndex < tNamedLength; tIndex += 3) {
        tName = tNamed[tIndex];
        for (; true;) {
          if (sIndex >= sNamedLength)
            return false;
          sName = sNamed[sIndex];
          sIndex += 3;
          if (tName < sName)
            return false;
          sIsRequired = sNamed[sIndex - 2];
          if (sName < tName) {
            if (sIsRequired)
              return false;
            continue;
          }
          t1 = tNamed[tIndex + 1];
          if (sIsRequired && !t1)
            return false;
          t1 = sNamed[sIndex - 1];
          if (!A._isSubtype(universe, tNamed[tIndex + 2], tEnv, t1, sEnv))
            return false;
          break;
        }
      }
      for (; sIndex < sNamedLength;) {
        if (sNamed[sIndex + 1])
          return false;
        sIndex += 3;
      }
      return true;
    },
    _isInterfaceSubtype(universe, s, sEnv, t, tEnv) {
      var rule, recipes, $length, supertypeArgs, i,
        sName = s._primary,
        tName = t._primary;
      for (; sName !== tName;) {
        rule = universe.tR[sName];
        if (rule == null)
          return false;
        if (typeof rule == "string") {
          sName = rule;
          continue;
        }
        recipes = rule[tName];
        if (recipes == null)
          return false;
        $length = recipes.length;
        supertypeArgs = $length > 0 ? new Array($length) : init.typeUniverse.sEA;
        for (i = 0; i < $length; ++i)
          supertypeArgs[i] = A._Universe_evalInEnvironment(universe, s, recipes[i]);
        return A._areArgumentsSubtypes(universe, supertypeArgs, null, sEnv, t._rest, tEnv);
      }
      return A._areArgumentsSubtypes(universe, s._rest, null, sEnv, t._rest, tEnv);
    },
    _areArgumentsSubtypes(universe, sArgs, sVariances, sEnv, tArgs, tEnv) {
      var i,
        $length = sArgs.length;
      for (i = 0; i < $length; ++i)
        if (!A._isSubtype(universe, sArgs[i], sEnv, tArgs[i], tEnv))
          return false;
      return true;
    },
    _isRecordSubtype(universe, s, sEnv, t, tEnv) {
      var i,
        sFields = s._rest,
        tFields = t._rest,
        sCount = sFields.length;
      if (sCount !== tFields.length)
        return false;
      if (s._primary !== t._primary)
        return false;
      for (i = 0; i < sCount; ++i)
        if (!A._isSubtype(universe, sFields[i], sEnv, tFields[i], tEnv))
          return false;
      return true;
    },
    isNullable(t) {
      var kind = t._kind,
        t1 = true;
      if (!(t === type$.Null || t === type$.JSNull))
        if (!A.isTopType(t))
          if (kind !== 6)
            t1 = kind === 7 && A.isNullable(t._primary);
      return t1;
    },
    isTopType(t) {
      var kind = t._kind;
      return kind === 2 || kind === 3 || kind === 4 || kind === 5 || t === type$.nullable_Object;
    },
    _Utils_objectAssign(o, other) {
      var i, key,
        keys = Object.keys(other),
        $length = keys.length;
      for (i = 0; i < $length; ++i) {
        key = keys[i];
        o[key] = other[key];
      }
    },
    _Utils_newArrayOrEmpty($length) {
      return $length > 0 ? new Array($length) : init.typeUniverse.sEA;
    },
    Rti: function Rti(t0, t1) {
      var _ = this;
      _._as = t0;
      _._is = t1;
      _._cachedRuntimeType = _._specializedTestResource = _._isSubtypeCache = _._precomputed1 = null;
      _._kind = 0;
      _._canonicalRecipe = _._bindCache = _._evalCache = _._rest = _._primary = null;
    },
    _FunctionParameters: function _FunctionParameters() {
      this._named = this._optionalPositional = this._requiredPositional = null;
    },
    _Type: function _Type(t0) {
      this._rti = t0;
    },
    _Error: function _Error() {
    },
    _TypeError: function _TypeError(t0) {
      this.__rti$_message = t0;
    },
    _AsyncRun__initializeScheduleImmediate() {
      var t1, div, span;
      if (self.scheduleImmediate != null)
        return A.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        t1 = {};
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(A.convertDartClosureToJS(new A._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new A._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return A.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return A.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride(callback) {
      self.scheduleImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateJsOverride_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate(callback) {
      self.setImmediate(A.convertDartClosureToJS(new A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer(callback) {
      A.Timer__createTimer(B.Duration_0, type$.void_Function._as(callback));
    },
    Timer__createTimer(duration, callback) {
      var milliseconds = B.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return A._TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    _TimerImpl$(milliseconds, callback) {
      var t1 = new A._TimerImpl();
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _makeAsyncAwaitCompleter($T) {
      return new A._AsyncAwaitCompleter(new A._Future($.Zone__current, $T._eval$1("_Future<0>")), $T._eval$1("_AsyncAwaitCompleter<0>"));
    },
    _asyncStartSync(bodyFunction, completer) {
      bodyFunction.call$2(0, null);
      completer.isSync = true;
      return completer._future;
    },
    _asyncAwait(object, bodyFunction) {
      bodyFunction.toString;
      A._awaitOnObject(object, bodyFunction);
    },
    _asyncReturn(object, completer) {
      var value, t2,
        t1 = completer.$ti;
      t1._eval$1("1/?")._as(object);
      value = object == null ? t1._precomputed1._as(object) : object;
      if (!completer.isSync)
        completer._future._asyncComplete$1(value);
      else {
        t2 = completer._future;
        if (t1._eval$1("Future<1>")._is(value))
          t2._chainFuture$1(value);
        else
          t2._completeWithValue$1(value);
      }
    },
    _asyncRethrow(object, completer) {
      var t1 = A.unwrapException(object),
        st = A.getTraceFromException(object),
        t2 = completer.isSync,
        t3 = completer._future;
      if (t2)
        t3._completeErrorObject$1(new A.AsyncError(t1, st));
      else
        t3._asyncCompleteErrorObject$1(new A.AsyncError(t1, st));
    },
    _awaitOnObject(object, bodyFunction) {
      var t1, future,
        thenCallback = new A._awaitOnObject_closure(bodyFunction),
        errorCallback = new A._awaitOnObject_closure0(bodyFunction);
      if (object instanceof A._Future)
        object._thenAwait$1$2(thenCallback, errorCallback, type$.dynamic);
      else {
        t1 = type$.dynamic;
        if (object instanceof A._Future)
          object.then$1$2$onError(thenCallback, errorCallback, t1);
        else {
          future = new A._Future($.Zone__current, type$._Future_dynamic);
          future._state = 8;
          future._resultOrListeners = object;
          future._thenAwait$1$2(thenCallback, errorCallback, t1);
        }
      }
    },
    _wrapJsFunctionForAsync($function) {
      var $protected = function(fn, ERROR) {
        return function(errorCode, result) {
          while (true) {
            try {
              fn(errorCode, result);
              break;
            } catch (error) {
              result = error;
              errorCode = ERROR;
            }
          }
        };
      }($function, 1);
      return $.Zone__current.registerBinaryCallback$3$1(new A._wrapJsFunctionForAsync_closure($protected), type$.void, type$.int, type$.dynamic);
    },
    AsyncError_defaultStackTrace(error) {
      var stackTrace;
      if (type$.Error._is(error)) {
        stackTrace = error.get$stackTrace();
        if (stackTrace != null)
          return stackTrace;
      }
      return B.C__StringStackTrace;
    },
    Future_Future$delayed(duration, $T) {
      var result;
      if (!$T._is(null))
        throw A.wrapException(A.ArgumentError$value(null, "computation", "The type parameter is not nullable"));
      result = new A._Future($.Zone__current, $T._eval$1("_Future<0>"));
      A.Timer_Timer(duration, new A.Future_Future$delayed_closure(null, result, $T));
      return result;
    },
    _Future__chainCoreFuture(source, target, sync) {
      var t2, t3, ignoreError, listeners, _box_0 = {},
        t1 = _box_0.source = source;
      for (t2 = type$._Future_dynamic; t3 = t1._state, (t3 & 4) !== 0; t1 = source) {
        source = t2._as(t1._resultOrListeners);
        _box_0.source = source;
      }
      if (t1 === target) {
        t2 = A.StackTrace_current();
        target._asyncCompleteErrorObject$1(new A.AsyncError(new A.ArgumentError(true, t1, null, "Cannot complete a future with itself"), t2));
        return;
      }
      ignoreError = target._state & 1;
      t2 = t1._state = t3 | ignoreError;
      if ((t2 & 24) === 0) {
        listeners = type$.nullable__FutureListener_dynamic_dynamic._as(target._resultOrListeners);
        target._state = target._state & 1 | 4;
        target._resultOrListeners = t1;
        t1._prependListeners$1(listeners);
        return;
      }
      if (!sync)
        if (target._resultOrListeners == null)
          t1 = (t2 & 16) === 0 || ignoreError !== 0;
        else
          t1 = false;
      else
        t1 = true;
      if (t1) {
        listeners = target._removeListeners$0();
        target._cloneResult$1(_box_0.source);
        A._Future__propagateToListeners(target, listeners);
        return;
      }
      target._state ^= 2;
      A._rootScheduleMicrotask(null, null, target._zone, type$.void_Function._as(new A._Future__chainCoreFuture_closure(_box_0, target)));
    },
    _Future__propagateToListeners(source, listeners) {
      var t2, t3, _box_0, t4, t5, hasError, asyncError, nextListener, nextListener0, sourceResult, t6, zone, oldZone, result, current, _box_1 = {},
        t1 = _box_1.source = source;
      for (t2 = type$.AsyncError, t3 = type$.nullable__FutureListener_dynamic_dynamic; true;) {
        _box_0 = {};
        t4 = t1._state;
        t5 = (t4 & 16) === 0;
        hasError = !t5;
        if (listeners == null) {
          if (hasError && (t4 & 1) === 0) {
            asyncError = t2._as(t1._resultOrListeners);
            A._rootHandleError(asyncError.error, asyncError.stackTrace);
          }
          return;
        }
        _box_0.listener = listeners;
        nextListener = listeners._nextListener;
        for (t1 = listeners; nextListener != null; t1 = nextListener, nextListener = nextListener0) {
          t1._nextListener = null;
          A._Future__propagateToListeners(_box_1.source, t1);
          _box_0.listener = nextListener;
          nextListener0 = nextListener._nextListener;
        }
        t4 = _box_1.source;
        sourceResult = t4._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        if (t5) {
          t6 = t1.state;
          t6 = (t6 & 1) !== 0 || (t6 & 15) === 8;
        } else
          t6 = true;
        if (t6) {
          zone = t1.result._zone;
          if (hasError) {
            t4 = t4._zone === zone;
            t4 = !(t4 || t4);
          } else
            t4 = false;
          if (t4) {
            t2._as(sourceResult);
            A._rootHandleError(sourceResult.error, sourceResult.stackTrace);
            return;
          }
          oldZone = $.Zone__current;
          if (oldZone !== zone)
            $.Zone__current = zone;
          else
            oldZone = null;
          t1 = t1.state;
          if ((t1 & 15) === 8)
            new A._Future__propagateToListeners_handleWhenCompleteCallback(_box_0, _box_1, hasError).call$0();
          else if (t5) {
            if ((t1 & 1) !== 0)
              new A._Future__propagateToListeners_handleValueCallback(_box_0, sourceResult).call$0();
          } else if ((t1 & 2) !== 0)
            new A._Future__propagateToListeners_handleError(_box_1, _box_0).call$0();
          if (oldZone != null)
            $.Zone__current = oldZone;
          t1 = _box_0.listenerValueOrError;
          if (t1 instanceof A._Future) {
            t4 = _box_0.listener.$ti;
            t4 = t4._eval$1("Future<2>")._is(t1) || !t4._rest[1]._is(t1);
          } else
            t4 = false;
          if (t4) {
            result = _box_0.listener.result;
            if ((t1._state & 24) !== 0) {
              current = t3._as(result._resultOrListeners);
              result._resultOrListeners = null;
              listeners = result._reverseListeners$1(current);
              result._state = t1._state & 30 | result._state & 1;
              result._resultOrListeners = t1._resultOrListeners;
              _box_1.source = t1;
              continue;
            } else
              A._Future__chainCoreFuture(t1, result, true);
            return;
          }
        }
        result = _box_0.listener.result;
        current = t3._as(result._resultOrListeners);
        result._resultOrListeners = null;
        listeners = result._reverseListeners$1(current);
        t1 = _box_0.listenerHasError;
        t4 = _box_0.listenerValueOrError;
        if (!t1) {
          result.$ti._precomputed1._as(t4);
          result._state = 8;
          result._resultOrListeners = t4;
        } else {
          t2._as(t4);
          result._state = result._state & 1 | 16;
          result._resultOrListeners = t4;
        }
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler(errorHandler, zone) {
      var t1;
      if (type$.dynamic_Function_Object_StackTrace._is(errorHandler))
        return zone.registerBinaryCallback$3$1(errorHandler, type$.dynamic, type$.Object, type$.StackTrace);
      t1 = type$.dynamic_Function_Object;
      if (t1._is(errorHandler))
        return t1._as(errorHandler);
      throw A.wrapException(A.ArgumentError$value(errorHandler, "onError", string$.Error_));
    },
    _microtaskLoop() {
      var entry, next;
      for (entry = $._nextCallback; entry != null; entry = $._nextCallback) {
        $._lastPriorityCallback = null;
        next = entry.next;
        $._nextCallback = next;
        if (next == null)
          $._lastCallback = null;
        entry.callback.call$0();
      }
    },
    _startMicrotaskLoop() {
      $._isInCallbackLoop = true;
      try {
        A._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback(callback) {
      var newEntry = new A._AsyncCallbackEntry(callback),
        lastCallback = $._lastCallback;
      if (lastCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(A.async___startMicrotaskLoop$closure());
      } else
        $._lastCallback = lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback(callback) {
      var entry, lastPriorityCallback, next,
        t1 = $._nextCallback;
      if (t1 == null) {
        A._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new A._AsyncCallbackEntry(callback);
      lastPriorityCallback = $._lastPriorityCallback;
      if (lastPriorityCallback == null) {
        entry.next = t1;
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        next = lastPriorityCallback.next;
        entry.next = next;
        $._lastPriorityCallback = lastPriorityCallback.next = entry;
        if (next == null)
          $._lastCallback = entry;
      }
    },
    StreamIterator_StreamIterator(stream, $T) {
      A.checkNotNullable(stream, "stream", type$.Object);
      return new A._StreamIterator($T._eval$1("_StreamIterator<0>"));
    },
    Timer_Timer(duration, callback) {
      var t1 = $.Zone__current;
      if (t1 === B.C__RootZone)
        return A.Timer__createTimer(duration, type$.void_Function._as(callback));
      return A.Timer__createTimer(duration, type$.void_Function._as(t1.bindCallbackGuarded$1(callback)));
    },
    _rootHandleError(error, stackTrace) {
      A._schedulePriorityAsyncCallback(new A._rootHandleError_closure(error, stackTrace));
    },
    _rootRun($self, $parent, zone, f, $R) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary($self, $parent, zone, f, arg, $R, $T) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootScheduleMicrotask($self, $parent, zone, f) {
      type$.void_Function._as(f);
      if (B.C__RootZone !== zone)
        f = zone.bindCallbackGuarded$1(f);
      A._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl() {
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _AsyncAwaitCompleter: function _AsyncAwaitCompleter(t0, t1) {
      this._future = t0;
      this.isSync = false;
      this.$ti = t1;
    },
    _awaitOnObject_closure: function _awaitOnObject_closure(t0) {
      this.bodyFunction = t0;
    },
    _awaitOnObject_closure0: function _awaitOnObject_closure0(t0) {
      this.bodyFunction = t0;
    },
    _wrapJsFunctionForAsync_closure: function _wrapJsFunctionForAsync_closure(t0) {
      this.$protected = t0;
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    Future_Future$delayed_closure: function Future_Future$delayed_closure(t0, t1, t2) {
      this.computation = t0;
      this.result = t1;
      this.T = t2;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
      var _ = this;
      _._state = 0;
      _._zone = t0;
      _._resultOrListeners = null;
      _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__chainCoreFuture_closure: function _Future__chainCoreFuture_closure(t0, t1) {
      this._box_0 = t0;
      this.target = t1;
    },
    _Future__asyncCompleteWithValue_closure: function _Future__asyncCompleteWithValue_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__asyncCompleteErrorObject_closure: function _Future__asyncCompleteErrorObject_closure(t0, t1) {
      this.$this = t0;
      this.error = t1;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2) {
      this._box_0 = t0;
      this._box_1 = t1;
      this.hasError = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0, t1) {
      this.joinedResult = t0;
      this.originalSource = t1;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure0: function _Future__propagateToListeners_handleWhenCompleteCallback_closure0(t0) {
      this.joinedResult = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1) {
      this._box_0 = t0;
      this.sourceResult = t1;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1) {
      this._box_1 = t0;
      this._box_0 = t1;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    Stream: function Stream() {
    },
    Stream_length_closure: function Stream_length_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Stream_length_closure0: function Stream_length_closure0(t0, t1) {
      this._box_0 = t0;
      this.future = t1;
    },
    _StreamIterator: function _StreamIterator(t0) {
      this.$ti = t0;
    },
    _Zone: function _Zone() {
    },
    _rootHandleError_closure: function _rootHandleError_closure(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    _RootZone_bindUnaryCallbackGuarded_closure: function _RootZone_bindUnaryCallbackGuarded_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.T = t2;
    },
    LinkedHashMap_LinkedHashMap$_literal(keyValuePairs, $K, $V) {
      return $K._eval$1("@<0>")._bind$1($V)._eval$1("LinkedHashMap<1,2>")._as(A.fillLiteralMap(keyValuePairs, new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"))));
    },
    LinkedHashMap_LinkedHashMap$_empty($K, $V) {
      return new A.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    LinkedHashSet_LinkedHashSet($E) {
      return new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"));
    },
    LinkedHashSet_LinkedHashSet$_empty($E) {
      return new A._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"));
    },
    _LinkedHashSet__newHashTable() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    _LinkedHashSetIterator$(_set, _modifications, $E) {
      var t1 = new A._LinkedHashSetIterator(_set, _modifications, $E._eval$1("_LinkedHashSetIterator<0>"));
      t1._cell = _set._first;
      return t1;
    },
    LinkedHashSet_LinkedHashSet$from(elements, $E) {
      var t1, _i,
        result = A.LinkedHashSet_LinkedHashSet($E);
      for (t1 = elements.length, _i = 0; _i < elements.length; elements.length === t1 || (0, A.throwConcurrentModificationError)(elements), ++_i)
        result.add$1(0, $E._as(elements[_i]));
      return result;
    },
    MapBase_mapToString(m) {
      var result, t1;
      if (A.isToStringVisiting(m))
        return "{...}";
      result = new A.StringBuffer("");
      try {
        t1 = {};
        B.JSArray_methods.add$1($.toStringVisiting, m);
        result._contents += "{";
        t1.first = true;
        m.forEach$1(0, new A.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        if (0 >= $.toStringVisiting.length)
          return A.ioore($.toStringVisiting, -1);
        $.toStringVisiting.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _LinkedHashSet: function _LinkedHashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._last = _._first = _._collection$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    _LinkedHashSetCell: function _LinkedHashSetCell(t0) {
      this._collection$_element = t0;
      this._next = null;
    },
    _LinkedHashSetIterator: function _LinkedHashSetIterator(t0, t1, t2) {
      var _ = this;
      _._set = t0;
      _._modifications = t1;
      _._collection$_current = _._cell = null;
      _.$ti = t2;
    },
    ListBase: function ListBase() {
    },
    MapBase: function MapBase() {
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    SetBase: function SetBase() {
    },
    _SetBase: function _SetBase() {
    },
    int_parse(source) {
      var value = A.Primitives_parseInt(source, null);
      if (value != null)
        return value;
      throw A.wrapException(A.FormatException$(source, null));
    },
    double_parse(source) {
      var value = A.Primitives_parseDouble(source);
      if (value != null)
        return value;
      throw A.wrapException(A.FormatException$("Invalid double", source));
    },
    Error__throw(error, stackTrace) {
      error = A.initializeExceptionWrapper(error, new Error());
      if (error == null)
        error = type$.Object._as(error);
      error.stack = stackTrace.toString$0(0);
      throw error;
    },
    List_List$filled($length, fill, growable, $E) {
      var i,
        result = growable ? J.JSArray_JSArray$growable($length, $E) : J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && fill != null)
        for (i = 0; i < result.length; ++i)
          result[i] = fill;
      return result;
    },
    List_List$from(elements, growable, $E) {
      var t1,
        list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = elements.get$iterator(elements); t1.moveNext$0();)
        B.JSArray_methods.add$1(list, $E._as(t1.get$current()));
      if (growable)
        return list;
      list.$flags = 1;
      return list;
    },
    List_List$_of(elements, $E) {
      var list, t1;
      if (Array.isArray(elements))
        return A._setArrayType(elements.slice(0), $E._eval$1("JSArray<0>"));
      list = A._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        B.JSArray_methods.add$1(list, t1.get$current());
      return list;
    },
    RegExp_RegExp(source) {
      return new A.JSSyntaxRegExp(source, A.JSSyntaxRegExp_makeNative(source, false, true, false, false, ""));
    },
    StringBuffer__writeAll(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        do
          string += A.S(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        string += A.S(iterator.get$current());
        for (; iterator.moveNext$0();)
          string = string + separator + A.S(iterator.get$current());
      }
      return string;
    },
    StackTrace_current() {
      return A.getTraceFromException(new Error());
    },
    DateTime__finishParse(year, month, day, hour, minute, second, millisecond, microsecond, isUtc) {
      var value = A.Primitives_valueFromDecomposedDate(year, month, day, hour, minute, second, millisecond, microsecond, isUtc);
      if (value == null)
        return null;
      return new A.DateTime(A.DateTime__validate(value, microsecond, isUtc), microsecond, isUtc);
    },
    DateTime_parse(formattedString) {
      var t1, t2, t3, years, month, day, hour, minute, second, milliAndMicroseconds, millisecond, isUtc, tzSign, sign, hourDifference, result,
        match = $.$get$DateTime__parseFormat().firstMatch$1(formattedString);
      if (match != null) {
        t1 = new A.DateTime_parse_parseIntOrZero();
        t2 = match.__js_helper$_match;
        if (1 >= t2.length)
          return A.ioore(t2, 1);
        t3 = t2[1];
        t3.toString;
        years = A.int_parse(t3);
        if (2 >= t2.length)
          return A.ioore(t2, 2);
        t3 = t2[2];
        t3.toString;
        month = A.int_parse(t3);
        if (3 >= t2.length)
          return A.ioore(t2, 3);
        t3 = t2[3];
        t3.toString;
        day = A.int_parse(t3);
        if (4 >= t2.length)
          return A.ioore(t2, 4);
        hour = t1.call$1(t2[4]);
        if (5 >= t2.length)
          return A.ioore(t2, 5);
        minute = t1.call$1(t2[5]);
        if (6 >= t2.length)
          return A.ioore(t2, 6);
        second = t1.call$1(t2[6]);
        if (7 >= t2.length)
          return A.ioore(t2, 7);
        milliAndMicroseconds = new A.DateTime_parse_parseMilliAndMicroseconds().call$1(t2[7]);
        millisecond = B.JSInt_methods._tdivFast$1(milliAndMicroseconds, 1000);
        t3 = t2.length;
        if (8 >= t3)
          return A.ioore(t2, 8);
        isUtc = t2[8] != null;
        if (isUtc) {
          if (9 >= t3)
            return A.ioore(t2, 9);
          tzSign = t2[9];
          if (tzSign != null) {
            sign = tzSign === "-" ? -1 : 1;
            if (10 >= t3)
              return A.ioore(t2, 10);
            t3 = t2[10];
            t3.toString;
            hourDifference = A.int_parse(t3);
            if (11 >= t2.length)
              return A.ioore(t2, 11);
            minute -= sign * (t1.call$1(t2[11]) + 60 * hourDifference);
          }
        }
        result = A.DateTime__finishParse(years, month, day, hour, minute, second, millisecond, milliAndMicroseconds % 1000, isUtc);
        if (result == null)
          throw A.wrapException(A.FormatException$("Time out of range", formattedString));
        return result;
      } else
        throw A.wrapException(A.FormatException$("Invalid date format", formattedString));
    },
    DateTime__validate(millisecondsSinceEpoch, microsecond, isUtc) {
      var _s11_ = "microsecond";
      if (microsecond < 0 || microsecond > 999)
        throw A.wrapException(A.RangeError$range(microsecond, 0, 999, _s11_, null));
      if (millisecondsSinceEpoch < -864e13 || millisecondsSinceEpoch > 864e13)
        throw A.wrapException(A.RangeError$range(millisecondsSinceEpoch, -864e13, 864e13, "millisecondsSinceEpoch", null));
      if (millisecondsSinceEpoch === 864e13 && microsecond !== 0)
        throw A.wrapException(A.ArgumentError$value(microsecond, _s11_, "Time including microseconds is outside valid range"));
      A.checkNotNullable(isUtc, "isUtc", type$.bool);
      return millisecondsSinceEpoch;
    },
    DateTime__fourDigits(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "";
      if (absN >= 1000)
        return "" + n;
      if (absN >= 100)
        return sign + "0" + absN;
      if (absN >= 10)
        return sign + "00" + absN;
      return sign + "000" + absN;
    },
    DateTime__threeDigits(n) {
      if (n >= 100)
        return "" + n;
      if (n >= 10)
        return "0" + n;
      return "00" + n;
    },
    DateTime__twoDigits(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    Duration$(days, microseconds, milliseconds) {
      return new A.Duration(microseconds + 1000 * milliseconds + 864e8 * days);
    },
    Error_safeToString(object) {
      if (typeof object == "number" || A._isBool(object) || object == null)
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      return A.Primitives_safeToString(object);
    },
    Error_throwWithStackTrace(error, stackTrace) {
      A.checkNotNullable(error, "error", type$.Object);
      A.checkNotNullable(stackTrace, "stackTrace", type$.StackTrace);
      A.Error__throw(error, stackTrace);
    },
    AssertionError$(message) {
      return new A.AssertionError(message);
    },
    ArgumentError$(message, $name) {
      return new A.ArgumentError(false, null, $name, message);
    },
    ArgumentError$value(value, $name, message) {
      return new A.ArgumentError(true, value, $name, message);
    },
    RangeError$value(value, $name) {
      return new A.RangeError(null, null, true, value, $name, "Value not in range");
    },
    RangeError$range(invalidValue, minValue, maxValue, $name, message) {
      return new A.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
    },
    RangeError_checkValidRange(start, end, $length) {
      if (0 > start || start > $length)
        throw A.wrapException(A.RangeError$range(start, 0, $length, "start", null));
      if (end != null) {
        if (start > end || end > $length)
          throw A.wrapException(A.RangeError$range(end, start, $length, "end", null));
        return end;
      }
      return $length;
    },
    RangeError_checkNotNegative(value, $name) {
      if (value < 0)
        throw A.wrapException(A.RangeError$range(value, 0, null, $name, null));
      return value;
    },
    IndexError$withLength(invalidValue, $length, indexable, $name) {
      return new A.IndexError($length, true, invalidValue, $name, "Index out of range");
    },
    UnsupportedError$(message) {
      return new A.UnsupportedError(message);
    },
    UnimplementedError$(message) {
      return new A.UnimplementedError(message);
    },
    StateError$(message) {
      return new A.StateError(message);
    },
    ConcurrentModificationError$(modifiedObject) {
      return new A.ConcurrentModificationError(modifiedObject);
    },
    Exception_Exception(message) {
      return new A._Exception(message);
    },
    FormatException$(message, source) {
      return new A.FormatException(message, source);
    },
    Iterable_iterableToShortString(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (A.isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = A._setArrayType([], type$.JSArray_String);
      B.JSArray_methods.add$1($.toStringVisiting, iterable);
      try {
        A._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= $.toStringVisiting.length)
          return A.ioore($.toStringVisiting, -1);
        $.toStringVisiting.pop();
      }
      t1 = A.StringBuffer__writeAll(leftDelimiter, type$.Iterable_dynamic._as(parts), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    Iterable_iterableToFullString(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (A.isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new A.StringBuffer(leftDelimiter);
      B.JSArray_methods.add$1($.toStringVisiting, iterable);
      try {
        t1 = buffer;
        t1._contents = A.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        if (0 >= $.toStringVisiting.length)
          return A.ioore($.toStringVisiting, -1);
        $.toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _iterablePartsToStrings(iterable, parts) {
      var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision,
        it = iterable.get$iterator(iterable),
        $length = 0, count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = A.S(it.get$current());
        B.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            B.JSArray_methods.add$1(parts, A.S(penultimate));
            return;
          }
          ultimateString = A.S(penultimate);
          if (0 >= parts.length)
            return A.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return A.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              B.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = A.S(penultimate);
          ultimateString = A.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return A.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        B.JSArray_methods.add$1(parts, elision);
      B.JSArray_methods.add$1(parts, penultimateString);
      B.JSArray_methods.add$1(parts, ultimateString);
    },
    Object_hash(object1, object2) {
      var t1 = B.JSInt_methods.get$hashCode(object1);
      object2 = B.JSInt_methods.get$hashCode(object2);
      object2 = A.SystemHash_finish(A.SystemHash_combine(A.SystemHash_combine($.$get$_hashSeed(), t1), object2));
      return object2;
    },
    print(object) {
      A.printString(A.S(object));
    },
    DateTime: function DateTime(t0, t1, t2) {
      this._value = t0;
      this._microsecond = t1;
      this.isUtc = t2;
    },
    DateTime_parse_parseIntOrZero: function DateTime_parse_parseIntOrZero() {
    },
    DateTime_parse_parseMilliAndMicroseconds: function DateTime_parse_parseMilliAndMicroseconds() {
    },
    Duration: function Duration(t0) {
      this._duration = t0;
    },
    _Enum: function _Enum() {
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError(t0) {
      this.message = t0;
    },
    TypeError: function TypeError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    OutOfMemoryError: function OutOfMemoryError() {
    },
    StackOverflowError: function StackOverflowError() {
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    FormatException: function FormatException(t0, t1) {
      this.message = t0;
      this.source = t1;
    },
    Iterable: function Iterable() {
    },
    Null: function Null() {
    },
    Object: function Object() {
    },
    _StringStackTrace: function _StringStackTrace() {
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    Element_Element$html(html, treeSanitizer, validator) {
      var t2,
        t1 = document.body;
      t1.toString;
      t2 = type$._ChildNodeListLazy;
      return type$.Element._as(new A.WhereIterable(new A._ChildNodeListLazy(B.BodyElement_methods.createFragment$3$treeSanitizer$validator(t1, html, treeSanitizer, validator)), t2._eval$1("bool(ListBase.E)")._as(new A.Element_Element$html_closure()), t2._eval$1("WhereIterable<ListBase.E>")).get$single(0));
    },
    Element__safeTagName(element) {
      var t1, exception,
        result = "element tag unavailable";
      try {
        t1 = element.tagName;
        t1.toString;
        result = t1;
      } catch (exception) {
      }
      return result;
    },
    _EventStreamSubscription$(_target, _eventType, onData, _useCapture, $T) {
      var t1 = A._wrapZone(new A._EventStreamSubscription_closure(onData), type$.Event);
      if (t1 != null)
        J._addEventListener$3$x(_target, _eventType, type$.nullable_dynamic_Function_Event._as(t1), false);
      return new A._EventStreamSubscription(_target, _eventType, t1, false, $T._eval$1("_EventStreamSubscription<0>"));
    },
    _Html5NodeValidator$(uriPolicy) {
      var t1 = document.createElement("a");
      t1.toString;
      t1 = new A._SameOriginUriPolicy(t1, type$.Location._as(window.location));
      t1 = new A._Html5NodeValidator(t1);
      t1._Html5NodeValidator$1$uriPolicy(uriPolicy);
      return t1;
    },
    _Html5NodeValidator__standardAttributeValidator(element, attributeName, value, context) {
      type$.Element._as(element);
      A._asString(attributeName);
      A._asString(value);
      type$._Html5NodeValidator._as(context);
      return true;
    },
    _Html5NodeValidator__uriAttributeValidator(element, attributeName, value, context) {
      var t1, t2, t3, t4, t5, t6;
      type$.Element._as(element);
      A._asString(attributeName);
      A._asString(value);
      t1 = type$._Html5NodeValidator._as(context).uriPolicy;
      t2 = t1._hiddenAnchor;
      B.AnchorElement_methods.set$href(t2, value);
      t3 = t2.hostname;
      t1 = t1._loc;
      t4 = false;
      if (t3 == t1.hostname) {
        t5 = t2.port;
        t6 = t1.port;
        t6.toString;
        if (t5 === t6) {
          t4 = t2.protocol;
          t1 = t1.protocol;
          t1.toString;
          t1 = t4 === t1;
        } else
          t1 = t4;
      } else
        t1 = t4;
      if (!t1) {
        t1 = false;
        if (t3 === "")
          if (t2.port === "") {
            t1 = t2.protocol;
            t1 = t1 === ":" || t1 === "";
          }
      } else
        t1 = true;
      return t1;
    },
    _TemplatingNodeValidator$() {
      var t1 = type$.String,
        t2 = A.LinkedHashSet_LinkedHashSet$from(B.List_pgZ, t1),
        t3 = A._setArrayType(["TEMPLATE"], type$.JSArray_String),
        t4 = type$.String_Function_String._as(new A._TemplatingNodeValidator_closure());
      t1 = new A._TemplatingNodeValidator(t2, A.LinkedHashSet_LinkedHashSet(t1), A.LinkedHashSet_LinkedHashSet(t1), A.LinkedHashSet_LinkedHashSet(t1), null);
      t1._SimpleNodeValidator$4$allowedAttributes$allowedElements$allowedUriAttributes(null, new A.MappedListIterable(B.List_pgZ, t4, type$.MappedListIterable_String_String), t3, null);
      return t1;
    },
    _wrapZone(callback, $T) {
      var t1 = $.Zone__current;
      if (t1 === B.C__RootZone)
        return callback;
      return t1.bindUnaryCallbackGuarded$1$1(callback, $T);
    },
    HtmlElement: function HtmlElement() {
    },
    AnchorElement: function AnchorElement() {
    },
    AreaElement: function AreaElement() {
    },
    BaseElement: function BaseElement() {
    },
    BodyElement: function BodyElement() {
    },
    ButtonElement: function ButtonElement() {
    },
    CharacterData: function CharacterData() {
    },
    CssStyleDeclaration: function CssStyleDeclaration() {
    },
    CssStyleDeclarationBase: function CssStyleDeclarationBase() {
    },
    DivElement: function DivElement() {
    },
    Document: function Document() {
    },
    DomException: function DomException() {
    },
    DomImplementation: function DomImplementation() {
    },
    _ChildrenElementList: function _ChildrenElementList(t0, t1) {
      this._element = t0;
      this._childElements = t1;
    },
    Element: function Element() {
    },
    Element_Element$html_closure: function Element_Element$html_closure() {
    },
    Event: function Event() {
    },
    EventTarget: function EventTarget() {
    },
    FormElement: function FormElement() {
    },
    HtmlCollection: function HtmlCollection() {
    },
    HtmlDocument: function HtmlDocument() {
    },
    KeyboardEvent: function KeyboardEvent() {
    },
    Location: function Location() {
    },
    MouseEvent: function MouseEvent() {
    },
    _ChildNodeListLazy: function _ChildNodeListLazy(t0) {
      this._this = t0;
    },
    Node: function Node() {
    },
    NodeList: function NodeList() {
    },
    SelectElement: function SelectElement() {
    },
    SpanElement: function SpanElement() {
    },
    TableElement: function TableElement() {
    },
    TableRowElement: function TableRowElement() {
    },
    TableSectionElement: function TableSectionElement() {
    },
    TemplateElement: function TemplateElement() {
    },
    TextAreaElement: function TextAreaElement() {
    },
    UIEvent: function UIEvent() {
    },
    _Attr: function _Attr() {
    },
    _NamedNodeMap: function _NamedNodeMap() {
    },
    _AttributeMap: function _AttributeMap() {
    },
    _ElementAttributeMap: function _ElementAttributeMap(t0) {
      this._element = t0;
    },
    EventStreamProvider: function EventStreamProvider(t0, t1) {
      this._eventType = t0;
      this.$ti = t1;
    },
    _EventStream: function _EventStream() {
    },
    _ElementEventStreamImpl: function _ElementEventStreamImpl(t0, t1, t2, t3) {
      var _ = this;
      _._target = t0;
      _._eventType = t1;
      _._useCapture = t2;
      _.$ti = t3;
    },
    _EventStreamSubscription: function _EventStreamSubscription(t0, t1, t2, t3, t4) {
      var _ = this;
      _._target = t0;
      _._eventType = t1;
      _._onData = t2;
      _._useCapture = t3;
      _.$ti = t4;
    },
    _EventStreamSubscription_closure: function _EventStreamSubscription_closure(t0) {
      this.onData = t0;
    },
    _Html5NodeValidator: function _Html5NodeValidator(t0) {
      this.uriPolicy = t0;
    },
    ImmutableListMixin: function ImmutableListMixin() {
    },
    NodeValidatorBuilder: function NodeValidatorBuilder(t0) {
      this._validators = t0;
    },
    NodeValidatorBuilder_allowsElement_closure: function NodeValidatorBuilder_allowsElement_closure(t0) {
      this.element = t0;
    },
    NodeValidatorBuilder_allowsAttribute_closure: function NodeValidatorBuilder_allowsAttribute_closure(t0, t1, t2) {
      this.element = t0;
      this.attributeName = t1;
      this.value = t2;
    },
    _SimpleNodeValidator: function _SimpleNodeValidator() {
    },
    _SimpleNodeValidator_closure: function _SimpleNodeValidator_closure() {
    },
    _SimpleNodeValidator_closure0: function _SimpleNodeValidator_closure0() {
    },
    _TemplatingNodeValidator: function _TemplatingNodeValidator(t0, t1, t2, t3, t4) {
      var _ = this;
      _._templateAttrs = t0;
      _.allowedElements = t1;
      _.allowedAttributes = t2;
      _.allowedUriAttributes = t3;
      _.uriPolicy = t4;
    },
    _TemplatingNodeValidator_closure: function _TemplatingNodeValidator_closure() {
    },
    _SvgNodeValidator: function _SvgNodeValidator() {
    },
    FixedSizeListIterator: function FixedSizeListIterator(t0, t1, t2) {
      var _ = this;
      _._array = t0;
      _._html$_length = t1;
      _._position = -1;
      _._html$_current = null;
      _.$ti = t2;
    },
    _SameOriginUriPolicy: function _SameOriginUriPolicy(t0, t1) {
      this._hiddenAnchor = t0;
      this._loc = t1;
    },
    _ValidatingTreeSanitizer: function _ValidatingTreeSanitizer(t0) {
      this.validator = t0;
      this.numTreeModifications = 0;
    },
    _ValidatingTreeSanitizer_sanitizeTree_walk: function _ValidatingTreeSanitizer_sanitizeTree_walk(t0) {
      this.$this = t0;
    },
    _CssStyleDeclaration_JavaScriptObject_CssStyleDeclarationBase: function _CssStyleDeclaration_JavaScriptObject_CssStyleDeclarationBase() {
    },
    _HtmlCollection_JavaScriptObject_ListMixin: function _HtmlCollection_JavaScriptObject_ListMixin() {
    },
    _HtmlCollection_JavaScriptObject_ListMixin_ImmutableListMixin: function _HtmlCollection_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    _NodeList_JavaScriptObject_ListMixin: function _NodeList_JavaScriptObject_ListMixin() {
    },
    _NodeList_JavaScriptObject_ListMixin_ImmutableListMixin: function _NodeList_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    __NamedNodeMap_JavaScriptObject_ListMixin: function __NamedNodeMap_JavaScriptObject_ListMixin() {
    },
    __NamedNodeMap_JavaScriptObject_ListMixin_ImmutableListMixin: function __NamedNodeMap_JavaScriptObject_ListMixin_ImmutableListMixin() {
    },
    Device_userAgent() {
      var t1 = window.navigator.userAgent;
      t1.toString;
      return t1;
    },
    FilteredElementList: function FilteredElementList(t0, t1) {
      this._node = t0;
      this._childNodes = t1;
    },
    FilteredElementList__iterable_closure: function FilteredElementList__iterable_closure() {
    },
    FilteredElementList__iterable_closure0: function FilteredElementList__iterable_closure0() {
    },
    _JSRandom: function _JSRandom() {
    },
    ScriptElement0: function ScriptElement0() {
    },
    SvgElement: function SvgElement() {
    },
    Stmt: function Stmt() {
    },
    BlockStmt: function BlockStmt(t0) {
      this.statements = t0;
    },
    ExpressionStmt: function ExpressionStmt(t0) {
      this.expression = t0;
    },
    IfStmt: function IfStmt(t0, t1, t2) {
      this.condition = t0;
      this.thenBranch = t1;
      this.elseBranch = t2;
    },
    PrintStmt: function PrintStmt(t0) {
      this.expression = t0;
    },
    VarDeclStmt: function VarDeclStmt(t0, t1) {
      this.name = t0;
      this.initializer = t1;
    },
    TypedVarDeclStmt: function TypedVarDeclStmt(t0, t1, t2) {
      this.type = t0;
      this.name = t1;
      this.initializer = t2;
    },
    ConstDeclStmt: function ConstDeclStmt(t0, t1, t2) {
      this.type = t0;
      this.name = t1;
      this.initializer = t2;
    },
    WhileStmt: function WhileStmt(t0, t1) {
      this.condition = t0;
      this.body = t1;
    },
    DoWhileStmt: function DoWhileStmt(t0, t1) {
      this.body = t0;
      this.condition = t1;
    },
    ForStmt: function ForStmt(t0, t1, t2, t3) {
      var _ = this;
      _.variable = t0;
      _.initializer = t1;
      _.condition = t2;
      _.body = t3;
    },
    ForStepStmt: function ForStepStmt(t0, t1, t2, t3, t4) {
      var _ = this;
      _.variable = t0;
      _.initializer = t1;
      _.condition = t2;
      _.step = t3;
      _.body = t4;
    },
    ForCStmt: function ForCStmt(t0, t1, t2, t3) {
      var _ = this;
      _.initializer = t0;
      _.condition = t1;
      _.increment = t2;
      _.body = t3;
    },
    TypeInfo: function TypeInfo(t0) {
      this.type = t0;
    },
    Parameter: function Parameter(t0, t1) {
      this.type = t0;
      this.name = t1;
    },
    FunctionStmt: function FunctionStmt(t0, t1, t2, t3) {
      var _ = this;
      _.returnType = t0;
      _.name = t1;
      _.params = t2;
      _.body = t3;
    },
    ReturnStmt: function ReturnStmt(t0, t1) {
      this.keyword = t0;
      this.value = t1;
    },
    BreakStmt: function BreakStmt(t0) {
      this.keyword = t0;
    },
    ContinueStmt: function ContinueStmt(t0) {
      this.keyword = t0;
    },
    ImportStmt: function ImportStmt(t0, t1) {
      this.library = t0;
      this.alias = t1;
    },
    SwitchStmt: function SwitchStmt(t0, t1) {
      this.expression = t0;
      this.cases = t1;
    },
    CaseStmt: function CaseStmt(t0, t1, t2) {
      this.keyword = t0;
      this.value = t1;
      this.statements = t2;
    },
    Expr: function Expr() {
    },
    AssignExpr: function AssignExpr(t0, t1) {
      this.name = t0;
      this.value = t1;
    },
    CompoundAssignExpr: function CompoundAssignExpr(t0, t1, t2) {
      this.name = t0;
      this.operator = t1;
      this.value = t2;
    },
    IncrementExpr: function IncrementExpr(t0) {
      this.name = t0;
    },
    DecrementExpr: function DecrementExpr(t0) {
      this.name = t0;
    },
    BinaryExpr: function BinaryExpr(t0, t1, t2) {
      this.left = t0;
      this.operator = t1;
      this.right = t2;
    },
    GroupingExpr: function GroupingExpr(t0) {
      this.expression = t0;
    },
    TernaryExpr: function TernaryExpr(t0, t1, t2) {
      this.condition = t0;
      this.thenBranch = t1;
      this.elseBranch = t2;
    },
    LiteralExpr: function LiteralExpr(t0) {
      this.value = t0;
    },
    UnaryExpr: function UnaryExpr(t0) {
      this.right = t0;
    },
    VariableExpr: function VariableExpr(t0) {
      this.name = t0;
    },
    CallExpr: function CallExpr(t0, t1) {
      this.callee = t0;
      this.$arguments = t1;
    },
    MemberAccessExpr: function MemberAccessExpr(t0) {
      this.object = t0;
    },
    ErrorReporter: function ErrorReporter() {
    },
    Lexer: function Lexer(t0, t1, t2, t3) {
      var _ = this;
      _._lexer$_source = t0;
      _._lexer$_errorReporter = t1;
      _._lexer$_tokens = t2;
      _._lexer$_current = _._start = 0;
      _._tokenStartColumn = _._column = _._line = 1;
      _.length = t3;
    },
    main() {
      var playground, t1, t2, container, editor, _s4_ = "none";
      A.print("LiPo - Linguagem em Portugol iniciado!");
      playground = new A.LiPoPlayground();
      t1 = document;
      t2 = type$.nullable_TextAreaElement._as(t1.querySelector("#editor"));
      if (t2 == null) {
        container = t1.querySelector("#editor-container");
        editor = t1.createElement("textarea");
        editor.id = "editor";
        editor.className = "fallback-editor";
        editor.placeholder = "Digite seu c\xf3digo LiPo aqui...";
        t2 = editor.style;
        t2.width = "100%";
        t2 = editor.style;
        t2.height = "100%";
        t2 = editor.style;
        t2.fontFamily = "monospace";
        t2 = editor.style;
        t2.fontSize = "14px";
        t2 = editor.style;
        t2.border = _s4_;
        t2 = editor.style;
        t2.outline = _s4_;
        t2 = editor.style;
        t2.toString;
        B.CssStyleDeclaration_methods._setPropertyHelper$3(t2, B.CssStyleDeclaration_methods._browserPropertyName$1(t2, "resize"), _s4_, "");
        t2 = container == null;
        if (!t2)
          J.get$children$x(container).clear$0(0);
        if (!t2)
          container.appendChild(editor).toString;
        t2 = editor;
      }
      playground.__LiPoPlayground__editor_A = t2;
      playground.__LiPoPlayground__output_A = type$.DivElement._as(t1.querySelector("#output"));
      playground.__LiPoPlayground__runButton_A = type$.ButtonElement._as(t1.querySelector("#run-btn"));
      playground.__LiPoPlayground__status_A = type$.SpanElement._as(t1.querySelector("#status"));
      playground._setupEventListeners$0();
      B.TextAreaElement_methods.set$value(playground.__LiPoPlayground__editor_A, 'importar io como saida;\n\nsaida.imprimir("Ol\xe1, LiPo!");\nsaida.imprimir("Bem-vindo \xe0 Linguagem em Portugol!");\n\nvar nome = "Desenvolvedor";\nsaida.imprimir("Ol\xe1, " + nome + "!");');
      playground._updateStats$0();
      B.SpanElement_methods.set$text(playground.__LiPoPlayground__status_A, "Pronto para executar");
    },
    LiPoPlayground: function LiPoPlayground() {
      var _ = this;
      _.__LiPoPlayground__status_A = _.__LiPoPlayground__runButton_A = _.__LiPoPlayground__output_A = _.__LiPoPlayground__editor_A = $;
    },
    LiPoPlayground__setupEventListeners_closure: function LiPoPlayground__setupEventListeners_closure(t0) {
      this.$this = t0;
    },
    LiPoPlayground__setupEventListeners_closure0: function LiPoPlayground__setupEventListeners_closure0(t0) {
      this.$this = t0;
    },
    LiPoPlayground__setupEventListeners_closure1: function LiPoPlayground__setupEventListeners_closure1(t0) {
      this.$this = t0;
    },
    LiPoPlayground__setupEventListeners_closure2: function LiPoPlayground__setupEventListeners_closure2(t0) {
      this.$this = t0;
    },
    LiPoPlayground__setupEventListeners_closure3: function LiPoPlayground__setupEventListeners_closure3(t0) {
      this.$this = t0;
    },
    LiPoPlayground__simulateExecution_closure: function LiPoPlayground__simulateExecution_closure() {
    },
    WebErrorReporter: function WebErrorReporter(t0) {
      this.output = t0;
      this._hadError = false;
    },
    Parser: function Parser(t0, t1) {
      this._tokens = t0;
      this._parser$_errorReporter = t1;
      this._parser$_current = 0;
    },
    ParseError: function ParseError() {
    },
    SemanticAnalyzer: function SemanticAnalyzer(t0, t1, t2, t3, t4) {
      var _ = this;
      _._errorReporter = t0;
      _._currentScope = t1;
      _._standardLibrary = t2;
      _._constants = t3;
      _._importedLibraries = t4;
      _._currentFunctionReturnType = null;
      _._switchNestingLevel = _._loopNestingLevel = 0;
    },
    NativeFunction: function NativeFunction(t0, t1, t2) {
      this.name = t0;
      this.arity = t1;
      this.implementation = t2;
    },
    StandardLibrary: function StandardLibrary(t0) {
      this._functions = t0;
    },
    StandardLibrary__registerMathLibrary_closure: function StandardLibrary__registerMathLibrary_closure(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerMathLibrary_closure0: function StandardLibrary__registerMathLibrary_closure0(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerMathLibrary_closure1: function StandardLibrary__registerMathLibrary_closure1(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerMathLibrary_closure2: function StandardLibrary__registerMathLibrary_closure2(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerMathLibrary_closure3: function StandardLibrary__registerMathLibrary_closure3(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerMathLibrary_closure4: function StandardLibrary__registerMathLibrary_closure4(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerMathLibrary_closure5: function StandardLibrary__registerMathLibrary_closure5(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerMathLibrary_closure6: function StandardLibrary__registerMathLibrary_closure6(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerMathLibrary_closure7: function StandardLibrary__registerMathLibrary_closure7(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerMathLibrary_closure8: function StandardLibrary__registerMathLibrary_closure8(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerMathLibrary_closure9: function StandardLibrary__registerMathLibrary_closure9(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerMathLibrary_closure10: function StandardLibrary__registerMathLibrary_closure10() {
    },
    StandardLibrary__registerMathLibrary_closure11: function StandardLibrary__registerMathLibrary_closure11(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerMathLibrary_closure12: function StandardLibrary__registerMathLibrary_closure12(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerMathLibrary_closure13: function StandardLibrary__registerMathLibrary_closure13(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerMathLibrary_closure14: function StandardLibrary__registerMathLibrary_closure14(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerMathLibrary_closure15: function StandardLibrary__registerMathLibrary_closure15(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerMathLibrary_closure16: function StandardLibrary__registerMathLibrary_closure16() {
    },
    StandardLibrary__registerMathLibrary_closure17: function StandardLibrary__registerMathLibrary_closure17() {
    },
    StandardLibrary__registerMathLibrary_closure18: function StandardLibrary__registerMathLibrary_closure18() {
    },
    StandardLibrary__registerMathLibrary_closure19: function StandardLibrary__registerMathLibrary_closure19() {
    },
    StandardLibrary__registerMathLibrary_closure20: function StandardLibrary__registerMathLibrary_closure20() {
    },
    StandardLibrary__registerMathLibrary_closure21: function StandardLibrary__registerMathLibrary_closure21() {
    },
    StandardLibrary__registerMathLibrary_closure22: function StandardLibrary__registerMathLibrary_closure22() {
    },
    StandardLibrary__registerMathLibrary_closure23: function StandardLibrary__registerMathLibrary_closure23() {
    },
    StandardLibrary__registerMathLibrary_closure24: function StandardLibrary__registerMathLibrary_closure24() {
    },
    StandardLibrary__registerStringLibrary_closure: function StandardLibrary__registerStringLibrary_closure(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerStringLibrary_closure0: function StandardLibrary__registerStringLibrary_closure0(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerStringLibrary_closure1: function StandardLibrary__registerStringLibrary_closure1(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerStringLibrary_closure2: function StandardLibrary__registerStringLibrary_closure2(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerStringLibrary_closure3: function StandardLibrary__registerStringLibrary_closure3(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerStringLibrary_closure4: function StandardLibrary__registerStringLibrary_closure4(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerStringLibrary_closure5: function StandardLibrary__registerStringLibrary_closure5(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerStringLibrary_closure6: function StandardLibrary__registerStringLibrary_closure6(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerStringLibrary_closure7: function StandardLibrary__registerStringLibrary_closure7(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerStringLibrary_closure8: function StandardLibrary__registerStringLibrary_closure8(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerStringLibrary_closure9: function StandardLibrary__registerStringLibrary_closure9(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerStringLibrary_closure10: function StandardLibrary__registerStringLibrary_closure10(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerStringLibrary_closure11: function StandardLibrary__registerStringLibrary_closure11(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerStringLibrary_closure12: function StandardLibrary__registerStringLibrary_closure12(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerStringLibrary_closure13: function StandardLibrary__registerStringLibrary_closure13(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerStringLibrary_closure14: function StandardLibrary__registerStringLibrary_closure14(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerStringLibrary_closure15: function StandardLibrary__registerStringLibrary_closure15(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerStringLibrary_closure16: function StandardLibrary__registerStringLibrary_closure16(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerIOLibrary_closure: function StandardLibrary__registerIOLibrary_closure() {
    },
    StandardLibrary__registerIOLibrary_closure0: function StandardLibrary__registerIOLibrary_closure0() {
    },
    StandardLibrary__registerIOLibrary_closure1: function StandardLibrary__registerIOLibrary_closure1() {
    },
    StandardLibrary__registerIOLibrary_closure2: function StandardLibrary__registerIOLibrary_closure2() {
    },
    StandardLibrary__registerIOLibrary_closure3: function StandardLibrary__registerIOLibrary_closure3() {
    },
    StandardLibrary__registerDataLibrary_closure: function StandardLibrary__registerDataLibrary_closure() {
    },
    StandardLibrary__registerDataLibrary_closure0: function StandardLibrary__registerDataLibrary_closure0() {
    },
    StandardLibrary__registerDataLibrary_closure1: function StandardLibrary__registerDataLibrary_closure1(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerDataLibrary_closure2: function StandardLibrary__registerDataLibrary_closure2(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerDataLibrary_closure3: function StandardLibrary__registerDataLibrary_closure3(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerDataLibrary_closure4: function StandardLibrary__registerDataLibrary_closure4(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerDataLibrary_closure5: function StandardLibrary__registerDataLibrary_closure5(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerDataLibrary_closure6: function StandardLibrary__registerDataLibrary_closure6(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerDataLibrary_closure7: function StandardLibrary__registerDataLibrary_closure7(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerDataLibrary_closure8: function StandardLibrary__registerDataLibrary_closure8(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerDataLibrary_closure9: function StandardLibrary__registerDataLibrary_closure9() {
    },
    StandardLibrary__registerDataLibrary_closure10: function StandardLibrary__registerDataLibrary_closure10(t0) {
      this.$this = t0;
    },
    StandardLibrary__registerTypeLibrary_closure: function StandardLibrary__registerTypeLibrary_closure() {
    },
    StandardLibrary__registerTypeLibrary_closure0: function StandardLibrary__registerTypeLibrary_closure0() {
    },
    StandardLibrary__registerTypeLibrary_closure1: function StandardLibrary__registerTypeLibrary_closure1(t0) {
      this.$this = t0;
    },
    Symbol: function Symbol(t0) {
      this.type = t0;
      this.isInitialized = false;
    },
    SymbolTable: function SymbolTable(t0, t1) {
      this.enclosing = t0;
      this._symbols = t1;
    },
    TokenTypeExtension_get_nome(_this) {
      var t1;
      switch (_this) {
        case B.TokenType_0:
          t1 = "Par\xeantese Esquerdo";
          break;
        case B.TokenType_1:
          t1 = "Par\xeantese Direito";
          break;
        case B.TokenType_2:
          t1 = "Chave Esquerda";
          break;
        case B.TokenType_3:
          t1 = "Chave Direita";
          break;
        case B.TokenType_4:
          t1 = "V\xedrgula";
          break;
        case B.TokenType_5:
          t1 = "Ponto";
          break;
        case B.TokenType_6:
          t1 = "Subtra\xe7\xe3o";
          break;
        case B.TokenType_7:
          t1 = "Adi\xe7\xe3o";
          break;
        case B.TokenType_8:
          t1 = "Incremento";
          break;
        case B.TokenType_9:
          t1 = "Decremento";
          break;
        case B.TokenType_10:
          t1 = "M\xf3dulo";
          break;
        case B.TokenType_11:
          t1 = "Ponto e V\xedrgula";
          break;
        case B.TokenType_12:
          t1 = "Divis\xe3o";
          break;
        case B.TokenType_13:
          t1 = "Multiplica\xe7\xe3o";
          break;
        case B.TokenType_14:
          t1 = "Interroga\xe7\xe3o";
          break;
        case B.TokenType_15:
          t1 = "Dois Pontos";
          break;
        case B.TokenType_16:
          t1 = "Nega\xe7\xe3o";
          break;
        case B.TokenType_17:
          t1 = "Diferente";
          break;
        case B.TokenType_18:
          t1 = "Atribui\xe7\xe3o";
          break;
        case B.TokenType_19:
          t1 = "Igualdade";
          break;
        case B.TokenType_20:
          t1 = "Adi\xe7\xe3o e Atribui\xe7\xe3o";
          break;
        case B.TokenType_21:
          t1 = "Subtra\xe7\xe3o e Atribui\xe7\xe3o";
          break;
        case B.TokenType_22:
          t1 = "Multiplica\xe7\xe3o e Atribui\xe7\xe3o";
          break;
        case B.TokenType_23:
          t1 = "Divis\xe3o e Atribui\xe7\xe3o";
          break;
        case B.TokenType_24:
          t1 = "M\xf3dulo e Atribui\xe7\xe3o";
          break;
        case B.TokenType_25:
          t1 = "Maior";
          break;
        case B.TokenType_26:
          t1 = "Maior ou Igual";
          break;
        case B.TokenType_27:
          t1 = "Menor";
          break;
        case B.TokenType_28:
          t1 = "Menor ou Igual";
          break;
        case B.TokenType_29:
          t1 = "Identificador";
          break;
        case B.TokenType_30:
          t1 = "String";
          break;
        case B.TokenType_31:
          t1 = "N\xfamero";
          break;
        case B.TokenType_32:
          t1 = "E (operador l\xf3gico)";
          break;
        case B.TokenType_33:
          t1 = "Sen\xe3o";
          break;
        case B.TokenType_34:
          t1 = "Falso";
          break;
        case B.TokenType_35:
          t1 = "Para (loop)";
          break;
        case B.TokenType_36:
          t1 = "Se (condicional)";
          break;
        case B.TokenType_37:
          t1 = "Nulo";
          break;
        case B.TokenType_38:
          t1 = "Ou (operador l\xf3gico)";
          break;
        case B.TokenType_39:
          t1 = "Imprima";
          break;
        case B.TokenType_40:
          t1 = "Retorne";
          break;
        case B.TokenType_41:
          t1 = "Verdadeiro";
          break;
        case B.TokenType_42:
          t1 = "Vari\xe1vel";
          break;
        case B.TokenType_43:
          t1 = "Enquanto (loop)";
          break;
        case B.TokenType_44:
          t1 = "Parar (loop)";
          break;
        case B.TokenType_45:
          t1 = "Continuar (loop)";
          break;
        case B.TokenType_46:
          t1 = "Escolha (switch)";
          break;
        case B.TokenType_47:
          t1 = "Caso (case)";
          break;
        case B.TokenType_48:
          t1 = "Contr\xe1rio (default)";
          break;
        case B.TokenType_49:
          t1 = "At\xe9 (loop for)";
          break;
        case B.TokenType_50:
          t1 = "Fa\xe7a (loop)";
          break;
        case B.TokenType_51:
          t1 = "Incremente (incremento)";
          break;
        case B.TokenType_52:
          t1 = "Decremente (decremento)";
          break;
        case B.TokenType_53:
          t1 = "Fa\xe7a-Enquanto (loop)";
          break;
        case B.TokenType_54:
          t1 = "Tipo Inteiro";
          break;
        case B.TokenType_55:
          t1 = "Tipo Real";
          break;
        case B.TokenType_56:
          t1 = "Tipo Texto";
          break;
        case B.TokenType_57:
          t1 = "Tipo L\xf3gico";
          break;
        case B.TokenType_58:
          t1 = "Tipo Vazio";
          break;
        case B.TokenType_59:
          t1 = "Declara\xe7\xe3o de Constante";
          break;
        case B.TokenType_60:
          t1 = "Importar";
          break;
        case B.TokenType_61:
          t1 = "Como";
          break;
        case B.TokenType_62:
          t1 = "Operador TipoDe";
          break;
        case B.TokenType_63:
          t1 = "Fim do Arquivo";
          break;
        default:
          t1 = null;
      }
      return t1;
    },
    TokenType: function TokenType(t0) {
      this._name = t0;
    },
    Token: function Token(t0, t1, t2, t3, t4) {
      var _ = this;
      _.type = t0;
      _.lexeme = t1;
      _.literal = t2;
      _.line = t3;
      _.column = t4;
    },
    printString(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    },
    throwLateFieldNI(fieldName) {
      throw A.initializeExceptionWrapper(A.LateError$fieldNI(fieldName), new Error());
    },
    throwLateFieldADI(fieldName) {
      throw A.initializeExceptionWrapper(new A.LateError("Field '" + fieldName + "' has been assigned during initialization."), new Error());
    },
    _StdIOUtils__getStdioOutputStream(fd) {
      throw A.wrapException(A.UnsupportedError$("StdIOUtils._getStdioOutputStream"));
    },
    stdout() {
      $.$get$_ioOverridesToken();
      var t1 = $.$get$_stdout();
      return t1;
    }
  },
  B = {};
  var holders = [A, J, B];
  var $ = {};
  A.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq(receiver, other) {
      return receiver === other;
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    toString$0(receiver) {
      return "Instance of '" + A.Primitives_objectTypeName(receiver) + "'";
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(A._instanceTypeFromConstructor(this));
    }
  };
  J.JSBool.prototype = {
    toString$0(receiver) {
      return String(receiver);
    },
    get$hashCode(receiver) {
      return receiver ? 519018 : 218159;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.bool);
    },
    $isTrustedGetRuntimeType: 1,
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq(receiver, other) {
      return null == other;
    },
    toString$0(receiver) {
      return "null";
    },
    get$hashCode(receiver) {
      return 0;
    },
    $isTrustedGetRuntimeType: 1
  };
  J.JavaScriptObject.prototype = {};
  J.LegacyJavaScriptObject.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$LegacyJavaScriptObject$toString(receiver);
      return "JavaScript function for " + J.toString$0$(dartClosure);
    },
    $isFunction: 1
  };
  J.JavaScriptBigInt.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.JavaScriptSymbol.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.JSArray.prototype = {
    add$1(receiver, value) {
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      receiver.$flags & 1 && A.throwUnsupportedOperation(receiver, 29);
      receiver.push(value);
    },
    join$1(receiver, separator) {
      var i,
        list = A.List_List$filled(receiver.length, "", false, type$.String);
      for (i = 0; i < receiver.length; ++i)
        this.$indexSet(list, i, A.S(receiver[i]));
      return list.join(separator);
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    get$last(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw A.wrapException(A.IterableElementError_noElement());
    },
    any$1(receiver, test) {
      var end, i;
      A._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        if (test.call$1(receiver[i]))
          return true;
        if (receiver.length !== end)
          throw A.wrapException(A.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    contains$1(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], other))
          return true;
      return false;
    },
    toString$0(receiver) {
      return A.Iterable_iterableToFullString(receiver, "[", "]");
    },
    get$iterator(receiver) {
      return new J.ArrayIterator(receiver, receiver.length, A._arrayInstanceType(receiver)._eval$1("ArrayIterator<1>"));
    },
    get$hashCode(receiver) {
      return A.Primitives_objectHashCode(receiver);
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      var t1;
      A._arrayInstanceType(receiver)._precomputed1._as(value);
      receiver.$flags & 2 && A.throwUnsupportedOperation(receiver);
      t1 = receiver.length;
      if (index >= t1)
        throw A.wrapException(A.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current() {
      var t1 = this._current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t2, _this = this,
        t1 = _this._iterable,
        $length = t1.length;
      if (_this._length !== $length) {
        t1 = A.throwConcurrentModificationError(t1);
        throw A.wrapException(t1);
      }
      t2 = _this._index;
      if (t2 >= $length) {
        _this._current = null;
        return false;
      }
      _this._current = t1[t2];
      _this._index = t2 + 1;
      return true;
    },
    $isIterator: 1
  };
  J.JSNumber.prototype = {
    toInt$0(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".toInt()"));
    },
    ceil$0(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647) {
          truncated = receiver | 0;
          return receiver === truncated ? truncated : truncated + 1;
        }
      } else if (receiver >= -2147483648)
        return receiver | 0;
      d = Math.ceil(receiver);
      if (isFinite(d))
        return d;
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".ceil()"));
    },
    floor$0(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647)
          return receiver | 0;
      } else if (receiver >= -2147483648) {
        truncated = receiver | 0;
        return receiver === truncated ? truncated : truncated - 1;
      }
      d = Math.floor(receiver);
      if (isFinite(d))
        return d;
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".floor()"));
    },
    round$0(receiver) {
      if (receiver > 0) {
        if (receiver !== 1 / 0)
          return Math.round(receiver);
      } else if (receiver > -1 / 0)
        return 0 - Math.round(0 - receiver);
      throw A.wrapException(A.UnsupportedError$("" + receiver + ".round()"));
    },
    toString$0(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return intValue & 536870911;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259 & 536870911;
    },
    $mod(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      return result + other;
    },
    _tdivFast$1(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1(receiver, other) {
      var quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw A.wrapException(A.UnsupportedError$("Result of truncating division is " + A.S(quotient) + ": " + A.S(receiver) + " ~/ " + other));
    },
    _shrOtherPositive$1(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrBothPositive$1(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.num);
    },
    $isnum: 1
  };
  J.JSInt.prototype = {
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.int);
    },
    $isTrustedGetRuntimeType: 1,
    $isint: 1
  };
  J.JSNumNotInt.prototype = {
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.double);
    },
    $isTrustedGetRuntimeType: 1
  };
  J.JSString.prototype = {
    endsWith$1(receiver, other) {
      var otherLength = other.length,
        t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    startsWith$1(receiver, pattern) {
      var otherLength = pattern.length;
      if (otherLength > receiver.length)
        return false;
      return pattern === receiver.substring(0, otherLength);
    },
    substring$2(receiver, start, end) {
      return receiver.substring(start, A.RangeError_checkValidRange(start, end, receiver.length));
    },
    substring$1(receiver, start) {
      return this.substring$2(receiver, start, null);
    },
    toLowerCase$0(receiver) {
      return receiver.toLowerCase();
    },
    trim$0(receiver) {
      var startIndex, t1, endIndex0,
        result = receiver.trim(),
        endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (0 >= endIndex)
        return A.ioore(result, 0);
      if (result.charCodeAt(0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      if (!(t1 >= 0))
        return A.ioore(result, t1);
      endIndex0 = result.charCodeAt(t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    $mul(receiver, times) {
      var s, result;
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw A.wrapException(B.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    padLeft$2(receiver, width, padding) {
      var delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return this.$mul(padding, delta) + receiver;
    },
    indexOf$1(receiver, pattern) {
      var t1 = receiver.indexOf(pattern, 0);
      return t1;
    },
    lastIndexOf$1(receiver, pattern) {
      var start = receiver.length,
        t1 = pattern.length;
      if (start + t1 > start)
        start -= t1;
      return receiver.lastIndexOf(pattern, start);
    },
    contains$2(receiver, other, startIndex) {
      var t1 = receiver.length;
      if (startIndex > t1)
        throw A.wrapException(A.RangeError$range(startIndex, 0, t1, null, null));
      return A.stringContainsUnchecked(receiver, other, startIndex);
    },
    contains$1(receiver, other) {
      return this.contains$2(receiver, other, 0);
    },
    compareTo$1(receiver, other) {
      var t1;
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0(receiver) {
      return receiver;
    },
    get$hashCode(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = hash + receiver.charCodeAt(i) & 536870911;
        hash = hash + ((hash & 524287) << 10) & 536870911;
        hash ^= hash >> 6;
      }
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    get$runtimeType(receiver) {
      return A.createRuntimeType(type$.String);
    },
    get$length(receiver) {
      return receiver.length;
    },
    $isTrustedGetRuntimeType: 1,
    $isPattern: 1,
    $isString: 1
  };
  A.LateError.prototype = {
    toString$0(_) {
      return "LateInitializationError: " + this._message;
    }
  };
  A.SentinelValue.prototype = {};
  A.EfficientLengthIterable.prototype = {};
  A.ListIterable.prototype = {
    get$iterator(_) {
      var _this = this;
      return new A.ListIterator(_this, _this.get$length(_this), A._instanceType(_this)._eval$1("ListIterator<ListIterable.E>"));
    },
    join$1(_, separator) {
      var first, t1, i, _this = this,
        $length = _this.get$length(_this);
      if (separator.length !== 0) {
        if ($length === 0)
          return "";
        first = A.S(_this.elementAt$1(0, 0));
        if ($length !== _this.get$length(_this))
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        for (t1 = first, i = 1; i < $length; ++i) {
          t1 = t1 + separator + A.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw A.wrapException(A.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      } else {
        for (i = 0, t1 = ""; i < $length; ++i) {
          t1 += A.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw A.wrapException(A.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
    },
    where$1(_, test) {
      return this.super$Iterable$where(0, A._instanceType(this)._eval$1("bool(ListIterable.E)")._as(test));
    }
  };
  A.ListIterator.prototype = {
    get$current() {
      var t1 = this.__internal$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var t3, _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (_this.__internal$_length !== $length)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      t3 = _this.__internal$_index;
      if (t3 >= $length) {
        _this.__internal$_current = null;
        return false;
      }
      _this.__internal$_current = t2.elementAt$1(t1, t3);
      ++_this.__internal$_index;
      return true;
    },
    $isIterator: 1
  };
  A.MappedIterable.prototype = {
    get$iterator(_) {
      return new A.MappedIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, A._instanceType(this)._eval$1("MappedIterator<1,2>"));
    },
    get$length(_) {
      return J.get$length$asx(this.__internal$_iterable);
    },
    elementAt$1(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this.__internal$_iterable, index));
    }
  };
  A.MappedIterator.prototype = {
    moveNext$0() {
      var _this = this,
        t1 = _this._iterator;
      if (t1.moveNext$0()) {
        _this.__internal$_current = _this._f.call$1(t1.get$current());
        return true;
      }
      _this.__internal$_current = null;
      return false;
    },
    get$current() {
      var t1 = this.__internal$_current;
      return t1 == null ? this.$ti._rest[1]._as(t1) : t1;
    },
    $isIterator: 1
  };
  A.MappedListIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this._source, index));
    }
  };
  A.WhereIterable.prototype = {
    get$iterator(_) {
      return new A.WhereIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti._eval$1("WhereIterator<1>"));
    }
  };
  A.WhereIterator.prototype = {
    moveNext$0() {
      var t1, t2;
      for (t1 = this._iterator, t2 = this._f; t1.moveNext$0();)
        if (t2.call$1(t1.get$current()))
          return true;
      return false;
    },
    get$current() {
      return this._iterator.get$current();
    },
    $isIterator: 1
  };
  A.ReversedListIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1(_, index) {
      var t1 = this._source,
        t2 = J.getInterceptor$asx(t1);
      return t2.elementAt$1(t1, t2.get$length(t1) - 1 - index);
    }
  };
  A.TypeErrorDecoder.prototype = {
    matchTypeError$1(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return null;
      result = Object.create(null);
      t1 = _this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  A.NullError.prototype = {
    toString$0(_) {
      return "Null check operator used on a null value";
    }
  };
  A.JsNoSuchMethodError.prototype = {
    toString$0(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + _this.__js_helper$_message;
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + t1 + "' (" + _this.__js_helper$_message + ")";
      return _s38_ + t1 + "' on '" + t2 + "' (" + _this.__js_helper$_message + ")";
    }
  };
  A.UnknownJsTypeError.prototype = {
    toString$0(_) {
      var t1 = this.__js_helper$_message;
      return t1.length === 0 ? "Error" : "Error: " + t1;
    }
  };
  A.NullThrownFromJavaScriptException.prototype = {
    toString$0(_) {
      return "Throw of null ('" + (this._irritant === null ? "null" : "undefined") + "' from JavaScript)";
    }
  };
  A.ExceptionAndStackTrace.prototype = {};
  A._StackTrace.prototype = {
    toString$0(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  A.Closure.prototype = {
    toString$0(_) {
      var $constructor = this.constructor,
        $name = $constructor == null ? null : $constructor.name;
      return "Closure '" + A.unminifyOrTag($name == null ? "unknown" : $name) + "'";
    },
    $isFunction: 1,
    get$$call() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  A.Closure0Args.prototype = {"call*": "call$0", $requiredArgCount: 0};
  A.Closure2Args.prototype = {"call*": "call$2", $requiredArgCount: 2};
  A.TearOffClosure.prototype = {};
  A.StaticClosure.prototype = {
    toString$0(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + A.unminifyOrTag($name) + "'";
    }
  };
  A.BoundClosure.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof A.BoundClosure))
        return false;
      return this.$_target === other.$_target && this._receiver === other._receiver;
    },
    get$hashCode(_) {
      return (A.objectHashCode(this._receiver) ^ A.Primitives_objectHashCode(this.$_target)) >>> 0;
    },
    toString$0(_) {
      return "Closure '" + this.$_name + "' of " + ("Instance of '" + A.Primitives_objectTypeName(this._receiver) + "'");
    }
  };
  A.RuntimeError.prototype = {
    toString$0(_) {
      return "RuntimeError: " + this.message;
    }
  };
  A.JsLinkedHashMap.prototype = {
    get$length(_) {
      return this.__js_helper$_length;
    },
    get$keys() {
      return new A.LinkedHashMapKeysIterable(this, this.$ti._eval$1("LinkedHashMapKeysIterable<1>"));
    },
    containsKey$1(key) {
      var strings = this.__js_helper$_strings;
      if (strings == null)
        return false;
      return strings[key] != null;
    },
    $index(_, key) {
      var strings, cell, t1, nums, _null = null;
      if (typeof key == "string") {
        strings = this.__js_helper$_strings;
        if (strings == null)
          return _null;
        cell = strings[key];
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = this.__js_helper$_nums;
        if (nums == null)
          return _null;
        cell = nums[key];
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else
        return this.internalGet$1(key);
    },
    internalGet$1(key) {
      var bucket, index,
        rest = this.__js_helper$_rest;
      if (rest == null)
        return null;
      bucket = rest[J.get$hashCode$(key) & 1073741823];
      index = this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      return bucket[index].hashMapCellValue;
    },
    $indexSet(_, key, value) {
      var strings, nums, rest, hash, bucket, index, _this = this,
        t1 = _this.$ti;
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (typeof key == "string") {
        strings = _this.__js_helper$_strings;
        _this.__js_helper$_addHashTableEntry$3(strings == null ? _this.__js_helper$_strings = _this._newHashTable$0() : strings, key, value);
      } else if (typeof key == "number" && (key & 0x3fffffff) === key) {
        nums = _this.__js_helper$_nums;
        _this.__js_helper$_addHashTableEntry$3(nums == null ? _this.__js_helper$_nums = _this._newHashTable$0() : nums, key, value);
      } else {
        rest = _this.__js_helper$_rest;
        if (rest == null)
          rest = _this.__js_helper$_rest = _this._newHashTable$0();
        hash = J.get$hashCode$(key) & 1073741823;
        bucket = rest[hash];
        if (bucket == null)
          rest[hash] = [_this.__js_helper$_newLinkedCell$2(key, value)];
        else {
          index = _this.internalFindBucketIndex$2(bucket, key);
          if (index >= 0)
            bucket[index].hashMapCellValue = value;
          else
            bucket.push(_this.__js_helper$_newLinkedCell$2(key, value));
        }
      }
    },
    forEach$1(_, action) {
      var cell, modifications, _this = this;
      _this.$ti._eval$1("~(1,2)")._as(action);
      cell = _this.__js_helper$_first;
      modifications = _this.__js_helper$_modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this.__js_helper$_modifications)
          throw A.wrapException(A.ConcurrentModificationError$(_this));
        cell = cell.__js_helper$_next;
      }
    },
    __js_helper$_addHashTableEntry$3(table, key, value) {
      var cell,
        t1 = this.$ti;
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      cell = table[key];
      if (cell == null)
        table[key] = this.__js_helper$_newLinkedCell$2(key, value);
      else
        cell.hashMapCellValue = value;
    },
    _modified$0() {
      this.__js_helper$_modifications = this.__js_helper$_modifications + 1 & 1073741823;
    },
    __js_helper$_newLinkedCell$2(key, value) {
      var _this = this,
        t1 = _this.$ti,
        cell = new A.LinkedHashMapCell(t1._precomputed1._as(key), t1._rest[1]._as(value));
      if (_this.__js_helper$_first == null)
        _this.__js_helper$_first = _this.__js_helper$_last = cell;
      else {
        t1 = _this.__js_helper$_last;
        t1.toString;
        cell._previous = t1;
        _this.__js_helper$_last = t1.__js_helper$_next = cell;
      }
      ++_this.__js_helper$_length;
      _this._modified$0();
      return cell;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    _newHashTable$0() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    $isLinkedHashMap: 1
  };
  A.LinkedHashMapCell.prototype = {};
  A.LinkedHashMapKeysIterable.prototype = {
    get$length(_) {
      return this._map.__js_helper$_length;
    },
    get$iterator(_) {
      var t1 = this._map;
      return new A.LinkedHashMapKeyIterator(t1, t1.__js_helper$_modifications, t1.__js_helper$_first, this.$ti._eval$1("LinkedHashMapKeyIterator<1>"));
    }
  };
  A.LinkedHashMapKeyIterator.prototype = {
    get$current() {
      return this.__js_helper$_current;
    },
    moveNext$0() {
      var cell, _this = this,
        t1 = _this._map;
      if (_this.__js_helper$_modifications !== t1.__js_helper$_modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      cell = _this.__js_helper$_cell;
      if (cell == null) {
        _this.__js_helper$_current = null;
        return false;
      } else {
        _this.__js_helper$_current = cell.hashMapCellKey;
        _this.__js_helper$_cell = cell.__js_helper$_next;
        return true;
      }
    },
    $isIterator: 1
  };
  A.initHooks_closure.prototype = {
    call$1(o) {
      return this.getTag(o);
    },
    $signature: 19
  };
  A.initHooks_closure0.prototype = {
    call$2(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 20
  };
  A.initHooks_closure1.prototype = {
    call$1(tag) {
      return this.prototypeForTag(A._asString(tag));
    },
    $signature: 21
  };
  A.JSSyntaxRegExp.prototype = {
    toString$0(_) {
      return "RegExp/" + this.pattern + "/" + this._nativeRegExp.flags;
    },
    get$_nativeGlobalVersion() {
      var _this = this,
        t1 = _this._nativeGlobalRegExp;
      if (t1 != null)
        return t1;
      t1 = _this._nativeRegExp;
      return _this._nativeGlobalRegExp = A.JSSyntaxRegExp_makeNative(_this.pattern, t1.multiline, !t1.ignoreCase, t1.unicode, t1.dotAll, "g");
    },
    firstMatch$1(string) {
      var m = this._nativeRegExp.exec(string);
      if (m == null)
        return null;
      return new A._MatchImplementation(m);
    },
    _execGlobal$2(string, start) {
      var match,
        regexp = this.get$_nativeGlobalVersion();
      if (regexp == null)
        regexp = type$.Object._as(regexp);
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return null;
      return new A._MatchImplementation(match);
    },
    $isPattern: 1,
    $isRegExp: 1
  };
  A._MatchImplementation.prototype = {$isMatch: 1, $isRegExpMatch: 1};
  A._AllMatchesIterator.prototype = {
    get$current() {
      var t1 = this.__js_helper$_current;
      return t1 == null ? type$.RegExpMatch._as(t1) : t1;
    },
    moveNext$0() {
      var t1, t2, t3, match, t4, nextIndex, _this = this,
        string = _this.__js_helper$_string;
      if (string == null)
        return false;
      t1 = _this._nextIndex;
      t2 = string.length;
      if (t1 <= t2) {
        t3 = _this._regExp;
        match = t3._execGlobal$2(string, t1);
        if (match != null) {
          _this.__js_helper$_current = match;
          t1 = match.__js_helper$_match;
          t4 = t1.index;
          nextIndex = t4 + t1[0].length;
          if (t4 === nextIndex) {
            t1 = false;
            if (t3._nativeRegExp.unicode) {
              t3 = _this._nextIndex;
              t4 = t3 + 1;
              if (t4 < t2) {
                if (!(t3 >= 0 && t3 < t2))
                  return A.ioore(string, t3);
                t3 = string.charCodeAt(t3);
                if (t3 >= 55296 && t3 <= 56319) {
                  if (!(t4 >= 0))
                    return A.ioore(string, t4);
                  t1 = string.charCodeAt(t4);
                  t1 = t1 >= 56320 && t1 <= 57343;
                }
              }
            }
            nextIndex = (t1 ? nextIndex + 1 : nextIndex) + 1;
          }
          _this._nextIndex = nextIndex;
          return true;
        }
      }
      _this.__js_helper$_string = _this.__js_helper$_current = null;
      return false;
    },
    $isIterator: 1
  };
  A.StringMatch.prototype = {$isMatch: 1};
  A._StringAllMatchesIterator.prototype = {
    moveNext$0() {
      var index, end, _this = this,
        t1 = _this.__js_helper$_index,
        t2 = _this._pattern,
        t3 = t2.length,
        t4 = _this._input,
        t5 = t4.length;
      if (t1 + t3 > t5) {
        _this.__js_helper$_current = null;
        return false;
      }
      index = t4.indexOf(t2, t1);
      if (index < 0) {
        _this.__js_helper$_index = t5 + 1;
        _this.__js_helper$_current = null;
        return false;
      }
      end = index + t3;
      _this.__js_helper$_current = new A.StringMatch(index, t2);
      _this.__js_helper$_index = end === _this.__js_helper$_index ? end + 1 : end;
      return true;
    },
    get$current() {
      var t1 = this.__js_helper$_current;
      t1.toString;
      return t1;
    },
    $isIterator: 1
  };
  A.Rti.prototype = {
    _eval$1(recipe) {
      return A._Universe_evalInEnvironment(init.typeUniverse, this, recipe);
    },
    _bind$1(typeOrTuple) {
      return A._Universe_bind(init.typeUniverse, this, typeOrTuple);
    }
  };
  A._FunctionParameters.prototype = {};
  A._Type.prototype = {
    toString$0(_) {
      return A._rtiToString(this._rti, null);
    }
  };
  A._Error.prototype = {
    toString$0(_) {
      return this.__rti$_message;
    }
  };
  A._TypeError.prototype = {$isTypeError: 1};
  A._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1(__wc0_formal) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 9
  };
  A._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1(callback) {
      var t1, t2;
      this._box_0.storedCallback = type$.void_Function._as(callback);
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 22
  };
  A._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 10
  };
  A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 10
  };
  A._TimerImpl.prototype = {
    _TimerImpl$2(milliseconds, callback) {
      if (self.setTimeout != null)
        self.setTimeout(A.convertDartClosureToJS(new A._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw A.wrapException(A.UnsupportedError$("`setTimeout()` not found."));
    }
  };
  A._TimerImpl_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 2
  };
  A._AsyncAwaitCompleter.prototype = {};
  A._awaitOnObject_closure.prototype = {
    call$1(result) {
      return this.bodyFunction.call$2(0, result);
    },
    $signature: 23
  };
  A._awaitOnObject_closure0.prototype = {
    call$2(error, stackTrace) {
      this.bodyFunction.call$2(1, new A.ExceptionAndStackTrace(error, type$.StackTrace._as(stackTrace)));
    },
    $signature: 24
  };
  A._wrapJsFunctionForAsync_closure.prototype = {
    call$2(errorCode, result) {
      this.$protected(A._asInt(errorCode), result);
    },
    $signature: 25
  };
  A.AsyncError.prototype = {
    toString$0(_) {
      return A.S(this.error);
    },
    $isError: 1,
    get$stackTrace() {
      return this.stackTrace;
    }
  };
  A.Future_Future$delayed_closure.prototype = {
    call$0() {
      this.T._as(null);
      this.result._complete$1(null);
    },
    $signature: 2
  };
  A._FutureListener.prototype = {
    matchesErrorTest$1(asyncError) {
      if ((this.state & 15) !== 6)
        return true;
      return this.result._zone.runUnary$2$2(type$.bool_Function_Object._as(this.callback), asyncError.error, type$.bool, type$.Object);
    },
    handleError$1(asyncError) {
      var exception, _this = this,
        errorCallback = _this.errorCallback,
        result = null,
        t1 = type$.dynamic,
        t2 = type$.Object,
        t3 = asyncError.error,
        t4 = _this.result._zone;
      if (type$.dynamic_Function_Object_StackTrace._is(errorCallback))
        result = t4.runBinary$3$3(errorCallback, t3, asyncError.stackTrace, t1, t2, type$.StackTrace);
      else
        result = t4.runUnary$2$2(type$.dynamic_Function_Object._as(errorCallback), t3, t1, t2);
      try {
        t1 = _this.$ti._eval$1("2/")._as(result);
        return t1;
      } catch (exception) {
        if (type$.TypeError._is(A.unwrapException(exception))) {
          if ((_this.state & 1) !== 0)
            throw A.wrapException(A.ArgumentError$("The error handler of Future.then must return a value of the returned future's type", "onError"));
          throw A.wrapException(A.ArgumentError$("The error handler of Future.catchError must return a value of the future's type", "onError"));
        } else
          throw exception;
      }
    }
  };
  A._Future.prototype = {
    then$1$2$onError(f, onError, $R) {
      var currentZone, result,
        t1 = this.$ti;
      t1._bind$1($R)._eval$1("1/(2)")._as(f);
      currentZone = $.Zone__current;
      if (currentZone === B.C__RootZone) {
        if (!type$.dynamic_Function_Object_StackTrace._is(onError) && !type$.dynamic_Function_Object._is(onError))
          throw A.wrapException(A.ArgumentError$value(onError, "onError", string$.Error_));
      } else {
        $R._eval$1("@<0/>")._bind$1(t1._precomputed1)._eval$1("1(2)")._as(f);
        onError = A._registerErrorHandler(onError, currentZone);
      }
      result = new A._Future(currentZone, $R._eval$1("_Future<0>"));
      this._addListener$1(new A._FutureListener(result, 3, f, onError, t1._eval$1("@<1>")._bind$1($R)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    _thenAwait$1$2(f, onError, $E) {
      var result,
        t1 = this.$ti;
      t1._bind$1($E)._eval$1("1/(2)")._as(f);
      result = new A._Future($.Zone__current, $E._eval$1("_Future<0>"));
      this._addListener$1(new A._FutureListener(result, 19, f, onError, t1._eval$1("@<1>")._bind$1($E)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    _setErrorObject$1(error) {
      this._state = this._state & 1 | 16;
      this._resultOrListeners = error;
    },
    _cloneResult$1(source) {
      this._state = source._state & 30 | this._state & 1;
      this._resultOrListeners = source._resultOrListeners;
    },
    _addListener$1(listener) {
      var source, _this = this,
        t1 = _this._state;
      if (t1 <= 3) {
        listener._nextListener = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listener;
      } else {
        if ((t1 & 4) !== 0) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          if ((source._state & 24) === 0) {
            source._addListener$1(listener);
            return;
          }
          _this._cloneResult$1(source);
        }
        A._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new A._Future__addListener_closure(_this, listener)));
      }
    },
    _prependListeners$1(listeners) {
      var t1, existingListeners, next, cursor, next0, source, _this = this, _box_0 = {};
      _box_0.listeners = listeners;
      if (listeners == null)
        return;
      t1 = _this._state;
      if (t1 <= 3) {
        existingListeners = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listeners;
        if (existingListeners != null) {
          next = listeners._nextListener;
          for (cursor = listeners; next != null; cursor = next, next = next0)
            next0 = next._nextListener;
          cursor._nextListener = existingListeners;
        }
      } else {
        if ((t1 & 4) !== 0) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          if ((source._state & 24) === 0) {
            source._prependListeners$1(listeners);
            return;
          }
          _this._cloneResult$1(source);
        }
        _box_0.listeners = _this._reverseListeners$1(listeners);
        A._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new A._Future__prependListeners_closure(_box_0, _this)));
      }
    },
    _removeListeners$0() {
      var current = type$.nullable__FutureListener_dynamic_dynamic._as(this._resultOrListeners);
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1(listeners) {
      var current, prev, next;
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _complete$1(value) {
      var listeners, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/")._as(value);
      listeners = _this._removeListeners$0();
      t1._precomputed1._as(value);
      _this._state = 8;
      _this._resultOrListeners = value;
      A._Future__propagateToListeners(_this, listeners);
    },
    _completeWithValue$1(value) {
      var listeners, _this = this;
      _this.$ti._precomputed1._as(value);
      listeners = _this._removeListeners$0();
      _this._state = 8;
      _this._resultOrListeners = value;
      A._Future__propagateToListeners(_this, listeners);
    },
    _completeWithResultOf$1(source) {
      var t1, listeners, _this = this;
      if ((source._state & 16) !== 0) {
        t1 = _this._zone === source._zone;
        t1 = !(t1 || t1);
      } else
        t1 = false;
      if (t1)
        return;
      listeners = _this._removeListeners$0();
      _this._cloneResult$1(source);
      A._Future__propagateToListeners(_this, listeners);
    },
    _completeErrorObject$1(error) {
      var listeners = this._removeListeners$0();
      this._setErrorObject$1(error);
      A._Future__propagateToListeners(this, listeners);
    },
    _asyncComplete$1(value) {
      var t1 = this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value)) {
        this._chainFuture$1(value);
        return;
      }
      this._asyncCompleteWithValue$1(value);
    },
    _asyncCompleteWithValue$1(value) {
      var _this = this;
      _this.$ti._precomputed1._as(value);
      _this._state ^= 2;
      A._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new A._Future__asyncCompleteWithValue_closure(_this, value)));
    },
    _chainFuture$1(value) {
      A._Future__chainCoreFuture(this.$ti._eval$1("Future<1>")._as(value), this, false);
      return;
    },
    _asyncCompleteErrorObject$1(error) {
      this._state ^= 2;
      A._rootScheduleMicrotask(null, null, this._zone, type$.void_Function._as(new A._Future__asyncCompleteErrorObject_closure(this, error)));
    },
    $isFuture: 1
  };
  A._Future__addListener_closure.prototype = {
    call$0() {
      A._Future__propagateToListeners(this.$this, this.listener);
    },
    $signature: 2
  };
  A._Future__prependListeners_closure.prototype = {
    call$0() {
      A._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    $signature: 2
  };
  A._Future__chainCoreFuture_closure.prototype = {
    call$0() {
      A._Future__chainCoreFuture(this._box_0.source, this.target, true);
    },
    $signature: 2
  };
  A._Future__asyncCompleteWithValue_closure.prototype = {
    call$0() {
      this.$this._completeWithValue$1(this.value);
    },
    $signature: 2
  };
  A._Future__asyncCompleteErrorObject_closure.prototype = {
    call$0() {
      this.$this._completeErrorObject$1(this.error);
    },
    $signature: 2
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0() {
      var e, s, t1, exception, t2, t3, originalSource, joinedResult, _this = this, completeResult = null;
      try {
        t1 = _this._box_0.listener;
        completeResult = t1.result._zone.run$1$1(type$.dynamic_Function._as(t1.callback), type$.dynamic);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        if (_this.hasError && type$.AsyncError._as(_this._box_1.source._resultOrListeners).error === e) {
          t1 = _this._box_0;
          t1.listenerValueOrError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        } else {
          t1 = e;
          t2 = s;
          if (t2 == null)
            t2 = A.AsyncError_defaultStackTrace(t1);
          t3 = _this._box_0;
          t3.listenerValueOrError = new A.AsyncError(t1, t2);
          t1 = t3;
        }
        t1.listenerHasError = true;
        return;
      }
      if (completeResult instanceof A._Future && (completeResult._state & 24) !== 0) {
        if ((completeResult._state & 16) !== 0) {
          t1 = _this._box_0;
          t1.listenerValueOrError = type$.AsyncError._as(completeResult._resultOrListeners);
          t1.listenerHasError = true;
        }
        return;
      }
      if (completeResult instanceof A._Future) {
        originalSource = _this._box_1.source;
        joinedResult = new A._Future(originalSource._zone, originalSource.$ti);
        completeResult.then$1$2$onError(new A._Future__propagateToListeners_handleWhenCompleteCallback_closure(joinedResult, originalSource), new A._Future__propagateToListeners_handleWhenCompleteCallback_closure0(joinedResult), type$.void);
        t1 = _this._box_0;
        t1.listenerValueOrError = joinedResult;
        t1.listenerHasError = false;
      }
    },
    $signature: 2
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1(__wc0_formal) {
      this.joinedResult._completeWithResultOf$1(this.originalSource);
    },
    $signature: 9
  };
  A._Future__propagateToListeners_handleWhenCompleteCallback_closure0.prototype = {
    call$2(e, s) {
      type$.Object._as(e);
      type$.StackTrace._as(s);
      this.joinedResult._completeErrorObject$1(new A.AsyncError(e, s));
    },
    $signature: 26
  };
  A._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0() {
      var e, s, t1, t2, t3, t4, t5, exception;
      try {
        t1 = this._box_0;
        t2 = t1.listener;
        t3 = t2.$ti;
        t4 = t3._precomputed1;
        t5 = t4._as(this.sourceResult);
        t1.listenerValueOrError = t2.result._zone.runUnary$2$2(t3._eval$1("2/(1)")._as(t2.callback), t5, t3._eval$1("2/"), t4);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = e;
        t2 = s;
        if (t2 == null)
          t2 = A.AsyncError_defaultStackTrace(t1);
        t3 = this._box_0;
        t3.listenerValueOrError = new A.AsyncError(t1, t2);
        t3.listenerHasError = true;
      }
    },
    $signature: 2
  };
  A._Future__propagateToListeners_handleError.prototype = {
    call$0() {
      var asyncError, e, s, t1, exception, t2, t3, _this = this;
      try {
        asyncError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t1 = _this._box_0;
        if (t1.listener.matchesErrorTest$1(asyncError) && t1.listener.errorCallback != null) {
          t1.listenerValueOrError = t1.listener.handleError$1(asyncError);
          t1.listenerHasError = false;
        }
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        t1 = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        if (t1.error === e) {
          t2 = _this._box_0;
          t2.listenerValueOrError = t1;
          t1 = t2;
        } else {
          t1 = e;
          t2 = s;
          if (t2 == null)
            t2 = A.AsyncError_defaultStackTrace(t1);
          t3 = _this._box_0;
          t3.listenerValueOrError = new A.AsyncError(t1, t2);
          t1 = t3;
        }
        t1.listenerHasError = true;
      }
    },
    $signature: 2
  };
  A._AsyncCallbackEntry.prototype = {};
  A.Stream.prototype = {
    get$length(_) {
      var t2, t3, _this = this, t1 = {},
        future = new A._Future($.Zone__current, type$._Future_int);
      t1.count = 0;
      t2 = _this.$ti;
      t3 = t2._eval$1("~(1)?")._as(new A.Stream_length_closure(t1, _this));
      type$.nullable_void_Function._as(new A.Stream_length_closure0(t1, future));
      A._EventStreamSubscription$(_this._target, _this._eventType, t3, false, t2._precomputed1);
      return future;
    }
  };
  A.Stream_length_closure.prototype = {
    call$1(__wc0_formal) {
      this.$this.$ti._precomputed1._as(__wc0_formal);
      ++this._box_0.count;
    },
    $signature() {
      return this.$this.$ti._eval$1("~(1)");
    }
  };
  A.Stream_length_closure0.prototype = {
    call$0() {
      this.future._complete$1(this._box_0.count);
    },
    $signature: 2
  };
  A._StreamIterator.prototype = {};
  A._Zone.prototype = {$isZone: 1};
  A._rootHandleError_closure.prototype = {
    call$0() {
      A.Error_throwWithStackTrace(this.error, this.stackTrace);
    },
    $signature: 2
  };
  A._RootZone.prototype = {
    runGuarded$1(f) {
      var e, s, exception;
      type$.void_Function._as(f);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        A._rootRun(null, null, this, f, type$.void);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    runUnaryGuarded$1$2(f, arg, $T) {
      var e, s, exception;
      $T._eval$1("~(0)")._as(f);
      $T._as(arg);
      try {
        if (B.C__RootZone === $.Zone__current) {
          f.call$1(arg);
          return;
        }
        A._rootRunUnary(null, null, this, f, arg, type$.void, $T);
      } catch (exception) {
        e = A.unwrapException(exception);
        s = A.getTraceFromException(exception);
        A._rootHandleError(type$.Object._as(e), type$.StackTrace._as(s));
      }
    },
    bindCallbackGuarded$1(f) {
      return new A._RootZone_bindCallbackGuarded_closure(this, type$.void_Function._as(f));
    },
    bindUnaryCallbackGuarded$1$1(f, $T) {
      return new A._RootZone_bindUnaryCallbackGuarded_closure(this, $T._eval$1("~(0)")._as(f), $T);
    },
    run$1$1(f, $R) {
      $R._eval$1("0()")._as(f);
      if ($.Zone__current === B.C__RootZone)
        return f.call$0();
      return A._rootRun(null, null, this, f, $R);
    },
    runUnary$2$2(f, arg, $R, $T) {
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      $T._as(arg);
      if ($.Zone__current === B.C__RootZone)
        return f.call$1(arg);
      return A._rootRunUnary(null, null, this, f, arg, $R, $T);
    },
    runBinary$3$3(f, arg1, arg2, $R, T1, T2) {
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      if ($.Zone__current === B.C__RootZone)
        return f.call$2(arg1, arg2);
      return A._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
    },
    registerBinaryCallback$3$1(f, $R, T1, T2) {
      return $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
    }
  };
  A._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0() {
      return this.$this.runGuarded$1(this.f);
    },
    $signature: 2
  };
  A._RootZone_bindUnaryCallbackGuarded_closure.prototype = {
    call$1(arg) {
      var t1 = this.T;
      return this.$this.runUnaryGuarded$1$2(this.f, t1._as(arg), t1);
    },
    $signature() {
      return this.T._eval$1("~(0)");
    }
  };
  A._LinkedHashSet.prototype = {
    get$iterator(_) {
      var _this = this,
        t1 = new A._LinkedHashSetIterator(_this, _this._modifications, A._instanceType(_this)._eval$1("_LinkedHashSetIterator<1>"));
      t1._cell = _this._first;
      return t1;
    },
    get$length(_) {
      return this._collection$_length;
    },
    contains$1(_, object) {
      var strings, nums;
      if (typeof object == "string" && object !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return type$.nullable__LinkedHashSetCell._as(strings[object]) != null;
      } else if (typeof object == "number" && (object & 1073741823) === object) {
        nums = this._nums;
        if (nums == null)
          return false;
        return type$.nullable__LinkedHashSetCell._as(nums[object]) != null;
      } else
        return this._contains$1(object);
    },
    _contains$1(object) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    },
    add$1(_, element) {
      var strings, nums, _this = this;
      A._instanceType(_this)._precomputed1._as(element);
      if (typeof element == "string" && element !== "__proto__") {
        strings = _this._strings;
        return _this._addHashTableEntry$2(strings == null ? _this._strings = A._LinkedHashSet__newHashTable() : strings, element);
      } else if (typeof element == "number" && (element & 1073741823) === element) {
        nums = _this._nums;
        return _this._addHashTableEntry$2(nums == null ? _this._nums = A._LinkedHashSet__newHashTable() : nums, element);
      } else
        return _this._add$1(element);
    },
    _add$1(element) {
      var rest, hash, bucket, _this = this;
      A._instanceType(_this)._precomputed1._as(element);
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = A._LinkedHashSet__newHashTable();
      hash = _this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._newLinkedCell$1(element)];
      else {
        if (_this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(_this._newLinkedCell$1(element));
      }
      return true;
    },
    _addHashTableEntry$2(table, element) {
      A._instanceType(this)._precomputed1._as(element);
      if (type$.nullable__LinkedHashSetCell._as(table[element]) != null)
        return false;
      table[element] = this._newLinkedCell$1(element);
      return true;
    },
    _newLinkedCell$1(element) {
      var _this = this,
        cell = new A._LinkedHashSetCell(A._instanceType(_this)._precomputed1._as(element));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else
        _this._last = _this._last._next = cell;
      ++_this._collection$_length;
      _this._modifications = _this._modifications + 1 & 1073741823;
      return cell;
    },
    _computeHashCode$1(element) {
      return J.get$hashCode$(element) & 1073741823;
    },
    _findBucketIndex$2(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i]._collection$_element, element))
          return i;
      return -1;
    }
  };
  A._LinkedHashSetCell.prototype = {};
  A._LinkedHashSetIterator.prototype = {
    get$current() {
      var t1 = this._collection$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    moveNext$0() {
      var _this = this,
        cell = _this._cell,
        t1 = _this._set;
      if (_this._modifications !== t1._modifications)
        throw A.wrapException(A.ConcurrentModificationError$(t1));
      else if (cell == null) {
        _this._collection$_current = null;
        return false;
      } else {
        _this._collection$_current = _this.$ti._eval$1("1?")._as(cell._collection$_element);
        _this._cell = cell._next;
        return true;
      }
    },
    $isIterator: 1
  };
  A.ListBase.prototype = {
    get$iterator(receiver) {
      return new A.ListIterator(receiver, this.get$length(receiver), A.instanceType(receiver)._eval$1("ListIterator<ListBase.E>"));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    get$isEmpty(receiver) {
      return this.get$length(receiver) === 0;
    },
    toList$0(receiver) {
      var t1, first, result, i, _this = this;
      if (_this.get$isEmpty(receiver)) {
        t1 = J.JSArray_JSArray$growable(0, A.instanceType(receiver)._eval$1("ListBase.E"));
        return t1;
      }
      first = _this.$index(receiver, 0);
      result = A.List_List$filled(_this.get$length(receiver), first, true, A.instanceType(receiver)._eval$1("ListBase.E"));
      for (i = 1; i < _this.get$length(receiver); ++i)
        B.JSArray_methods.$indexSet(result, i, _this.$index(receiver, i));
      return result;
    },
    toString$0(receiver) {
      return A.Iterable_iterableToFullString(receiver, "[", "]");
    },
    $isIterable: 1,
    $isList: 1
  };
  A.MapBase.prototype = {
    forEach$1(_, action) {
      var t2, key, t3,
        t1 = A._instanceType(this);
      t1._eval$1("~(MapBase.K,MapBase.V)")._as(action);
      for (t2 = J.get$iterator$ax(this.get$keys()), t1 = t1._eval$1("MapBase.V"); t2.moveNext$0();) {
        key = t2.get$current();
        t3 = this.$index(0, key);
        action.call$2(key, t3 == null ? t1._as(t3) : t3);
      }
    },
    get$length(_) {
      return J.get$length$asx(this.get$keys());
    },
    toString$0(_) {
      return A.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  A.MapBase_mapToString_closure.prototype = {
    call$2(k, v) {
      var t2,
        t1 = this._box_0;
      if (!t1.first)
        this.result._contents += ", ";
      t1.first = false;
      t1 = this.result;
      t2 = A.S(k);
      t1._contents = (t1._contents += t2) + ": ";
      t2 = A.S(v);
      t1._contents += t2;
    },
    $signature: 27
  };
  A.SetBase.prototype = {
    addAll$1(_, elements) {
      var t1;
      for (t1 = J.get$iterator$ax(A._instanceType(this)._eval$1("Iterable<1>")._as(elements)); t1.moveNext$0();)
        this.add$1(0, t1.get$current());
    },
    toString$0(_) {
      return A.Iterable_iterableToFullString(this, "{", "}");
    },
    elementAt$1(_, index) {
      var iterator, skipCount, t1, _this = this;
      A.RangeError_checkNotNegative(index, "index");
      iterator = A._LinkedHashSetIterator$(_this, _this._modifications, A._instanceType(_this)._precomputed1);
      for (skipCount = index; iterator.moveNext$0();) {
        if (skipCount === 0) {
          t1 = iterator._collection$_current;
          return t1 == null ? iterator.$ti._precomputed1._as(t1) : t1;
        }
        --skipCount;
      }
      throw A.wrapException(A.IndexError$withLength(index, index - skipCount, _this, "index"));
    },
    $isIterable: 1,
    $isSet: 1
  };
  A._SetBase.prototype = {};
  A.DateTime.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.DateTime && this._value === other._value && this._microsecond === other._microsecond && this.isUtc === other.isUtc;
    },
    get$hashCode(_) {
      return A.Object_hash(this._value, this._microsecond);
    },
    toString$0(_) {
      var _this = this,
        y = A.DateTime__fourDigits(A.Primitives_getYear(_this)),
        m = A.DateTime__twoDigits(A.Primitives_getMonth(_this)),
        d = A.DateTime__twoDigits(A.Primitives_getDay(_this)),
        h = A.DateTime__twoDigits(A.Primitives_getHours(_this)),
        min = A.DateTime__twoDigits(A.Primitives_getMinutes(_this)),
        sec = A.DateTime__twoDigits(A.Primitives_getSeconds(_this)),
        ms = A.DateTime__threeDigits(A.Primitives_getMilliseconds(_this)),
        t1 = _this._microsecond,
        us = t1 === 0 ? "" : A.DateTime__threeDigits(t1);
      t1 = y + "-" + m;
      if (_this.isUtc)
        return t1 + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + us + "Z";
      else
        return t1 + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + us;
    }
  };
  A.DateTime_parse_parseIntOrZero.prototype = {
    call$1(matched) {
      if (matched == null)
        return 0;
      return A.int_parse(matched);
    },
    $signature: 11
  };
  A.DateTime_parse_parseMilliAndMicroseconds.prototype = {
    call$1(matched) {
      var t1, result, i;
      if (matched == null)
        return 0;
      for (t1 = matched.length, result = 0, i = 0; i < 6; ++i) {
        result *= 10;
        if (i < t1) {
          if (!(i < t1))
            return A.ioore(matched, i);
          result += matched.charCodeAt(i) ^ 48;
        }
      }
      return result;
    },
    $signature: 11
  };
  A.Duration.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof A.Duration && this._duration === other._duration;
    },
    get$hashCode(_) {
      return B.JSInt_methods.get$hashCode(this._duration);
    },
    toString$0(_) {
      var sign, minutes, minutesPadding, seconds, secondsPadding,
        microseconds = this._duration,
        hours = B.JSInt_methods._tdivFast$1(microseconds, 3600000000),
        microseconds0 = microseconds % 3600000000;
      if (microseconds < 0) {
        hours = 0 - hours;
        microseconds = 0 - microseconds0;
        sign = "-";
      } else {
        microseconds = microseconds0;
        sign = "";
      }
      minutes = B.JSInt_methods._tdivFast$1(microseconds, 60000000);
      microseconds %= 60000000;
      minutesPadding = minutes < 10 ? "0" : "";
      seconds = B.JSInt_methods._tdivFast$1(microseconds, 1000000);
      secondsPadding = seconds < 10 ? "0" : "";
      return sign + hours + ":" + minutesPadding + minutes + ":" + secondsPadding + seconds + "." + B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(microseconds % 1000000), 6, "0");
    }
  };
  A._Enum.prototype = {
    toString$0(_) {
      return this._enumToString$0();
    }
  };
  A.Error.prototype = {
    get$stackTrace() {
      return A.Primitives_extractStackTrace(this);
    }
  };
  A.AssertionError.prototype = {
    toString$0(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Assertion failed: " + A.Error_safeToString(t1);
      return "Assertion failed";
    }
  };
  A.TypeError.prototype = {};
  A.ArgumentError.prototype = {
    get$_errorName() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation() {
      return "";
    },
    toString$0(_) {
      var _this = this,
        $name = _this.name,
        nameString = $name == null ? "" : " (" + $name + ")",
        message = _this.message,
        messageString = message == null ? "" : ": " + message,
        prefix = _this.get$_errorName() + nameString + messageString;
      if (!_this._hasValue)
        return prefix;
      return prefix + _this.get$_errorExplanation() + ": " + A.Error_safeToString(_this.get$invalidValue());
    },
    get$invalidValue() {
      return this.invalidValue;
    }
  };
  A.RangeError.prototype = {
    get$invalidValue() {
      return A._asNumQ(this.invalidValue);
    },
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      var explanation,
        start = this.start,
        end = this.end;
      if (start == null)
        explanation = end != null ? ": Not less than or equal to " + A.S(end) : "";
      else if (end == null)
        explanation = ": Not greater than or equal to " + A.S(start);
      else if (end > start)
        explanation = ": Not in inclusive range " + A.S(start) + ".." + A.S(end);
      else
        explanation = end < start ? ": Valid value range is empty" : ": Only valid value is " + A.S(start);
      return explanation;
    }
  };
  A.IndexError.prototype = {
    get$invalidValue() {
      return A._asInt(this.invalidValue);
    },
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      if (A._asInt(this.invalidValue) < 0)
        return ": index must not be negative";
      var t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + t1;
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A.UnsupportedError.prototype = {
    toString$0(_) {
      return "Unsupported operation: " + this.message;
    }
  };
  A.UnimplementedError.prototype = {
    toString$0(_) {
      return "UnimplementedError: " + this.message;
    }
  };
  A.StateError.prototype = {
    toString$0(_) {
      return "Bad state: " + this.message;
    }
  };
  A.ConcurrentModificationError.prototype = {
    toString$0(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + A.Error_safeToString(t1) + ".";
    }
  };
  A.OutOfMemoryError.prototype = {
    toString$0(_) {
      return "Out of Memory";
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1
  };
  A.StackOverflowError.prototype = {
    toString$0(_) {
      return "Stack Overflow";
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1
  };
  A._Exception.prototype = {
    toString$0(_) {
      return "Exception: " + this.message;
    }
  };
  A.FormatException.prototype = {
    toString$0(_) {
      var message = this.message,
        report = "" !== message ? "FormatException: " + message : "FormatException",
        source = this.source;
      if (typeof source == "string") {
        if (source.length > 78)
          source = B.JSString_methods.substring$2(source, 0, 75) + "...";
        return report + "\n" + source;
      } else
        return report;
    }
  };
  A.Iterable.prototype = {
    where$1(_, test) {
      var t1 = A._instanceType(this);
      return new A.WhereIterable(this, t1._eval$1("bool(Iterable.E)")._as(test), t1._eval$1("WhereIterable<Iterable.E>"));
    },
    get$length(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$single(_) {
      var result,
        it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw A.wrapException(A.IterableElementError_noElement());
      result = it.get$current();
      if (it.moveNext$0())
        throw A.wrapException(A.IterableElementError_tooMany());
      return result;
    },
    elementAt$1(_, index) {
      var iterator, skipCount;
      A.RangeError_checkNotNegative(index, "index");
      iterator = this.get$iterator(this);
      for (skipCount = index; iterator.moveNext$0();) {
        if (skipCount === 0)
          return iterator.get$current();
        --skipCount;
      }
      throw A.wrapException(A.IndexError$withLength(index, index - skipCount, this, "index"));
    },
    toString$0(_) {
      return A.Iterable_iterableToShortString(this, "(", ")");
    }
  };
  A.Null.prototype = {
    get$hashCode(_) {
      return A.Object.prototype.get$hashCode.call(this, 0);
    },
    toString$0(_) {
      return "null";
    }
  };
  A.Object.prototype = {$isObject: 1,
    $eq(_, other) {
      return this === other;
    },
    get$hashCode(_) {
      return A.Primitives_objectHashCode(this);
    },
    toString$0(_) {
      return "Instance of '" + A.Primitives_objectTypeName(this) + "'";
    },
    get$runtimeType(_) {
      return A.getRuntimeTypeOfDartObject(this);
    },
    toString() {
      return this.toString$0(this);
    }
  };
  A._StringStackTrace.prototype = {
    toString$0(_) {
      return "";
    },
    $isStackTrace: 1
  };
  A.StringBuffer.prototype = {
    get$length(_) {
      return this._contents.length;
    },
    toString$0(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  A.HtmlElement.prototype = {};
  A.AnchorElement.prototype = {
    set$href(receiver, value) {
      receiver.href = value;
    },
    toString$0(receiver) {
      var t1 = String(receiver);
      t1.toString;
      return t1;
    },
    $isAnchorElement: 1
  };
  A.AreaElement.prototype = {
    toString$0(receiver) {
      var t1 = String(receiver);
      t1.toString;
      return t1;
    }
  };
  A.BaseElement.prototype = {$isBaseElement: 1};
  A.BodyElement.prototype = {$isBodyElement: 1};
  A.ButtonElement.prototype = {$isButtonElement: 1};
  A.CharacterData.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.CssStyleDeclaration.prototype = {
    _browserPropertyName$1(receiver, propertyName) {
      var t1 = $.$get$CssStyleDeclaration__propertyCache(),
        $name = t1[propertyName];
      if (typeof $name == "string")
        return $name;
      $name = this._supportedBrowserPropertyName$1(receiver, propertyName);
      t1[propertyName] = $name;
      return $name;
    },
    _supportedBrowserPropertyName$1(receiver, propertyName) {
      var prefixed,
        t1 = propertyName.replace(/^-ms-/, "ms-").replace(/-([\da-z])/ig, function(_, letter) {
          return letter.toUpperCase();
        });
      t1.toString;
      t1 = t1 in receiver;
      t1.toString;
      if (t1)
        return propertyName;
      prefixed = $.$get$Device_cssPrefix() + propertyName;
      t1 = prefixed in receiver;
      t1.toString;
      if (t1)
        return prefixed;
      return propertyName;
    },
    _setPropertyHelper$3(receiver, propertyName, value, priority) {
      receiver.setProperty(propertyName, value, priority);
    },
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    }
  };
  A.CssStyleDeclarationBase.prototype = {};
  A.DivElement.prototype = {$isDivElement: 1};
  A.Document.prototype = {};
  A.DomException.prototype = {
    toString$0(receiver) {
      var t1 = String(receiver);
      t1.toString;
      return t1;
    }
  };
  A.DomImplementation.prototype = {
    createHtmlDocument$1(receiver, title) {
      var t1 = receiver.createHTMLDocument(title);
      t1.toString;
      return t1;
    }
  };
  A._ChildrenElementList.prototype = {
    get$isEmpty(_) {
      return this._element.firstElementChild == null;
    },
    get$length(_) {
      return this._childElements.length;
    },
    $index(_, index) {
      var t1 = this._childElements;
      if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
      return type$.Element._as(t1[index]);
    },
    get$iterator(_) {
      var t1 = this.toList$0(this);
      return new J.ArrayIterator(t1, t1.length, A._arrayInstanceType(t1)._eval$1("ArrayIterator<1>"));
    },
    clear$0(_) {
      J._clearChildren$0$x(this._element);
    }
  };
  A.Element.prototype = {
    get$attributes(receiver) {
      return new A._ElementAttributeMap(receiver);
    },
    get$children(receiver) {
      var t1 = receiver.children;
      t1.toString;
      return new A._ChildrenElementList(receiver, t1);
    },
    toString$0(receiver) {
      var t1 = receiver.localName;
      t1.toString;
      return t1;
    },
    createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator) {
      var t1, t2, contextElement, fragment;
      if (treeSanitizer == null) {
        t1 = $.Element__defaultValidator;
        if (t1 == null) {
          t1 = A._setArrayType([], type$.JSArray_NodeValidator);
          t2 = new A.NodeValidatorBuilder(t1);
          B.JSArray_methods.add$1(t1, A._Html5NodeValidator$(null));
          B.JSArray_methods.add$1(t1, A._TemplatingNodeValidator$());
          $.Element__defaultValidator = t2;
          validator = t2;
        } else
          validator = t1;
        t1 = $.Element__defaultSanitizer;
        if (t1 == null) {
          validator.toString;
          t1 = new A._ValidatingTreeSanitizer(validator);
          $.Element__defaultSanitizer = t1;
          treeSanitizer = t1;
        } else {
          validator.toString;
          t1.validator = validator;
          treeSanitizer = t1;
        }
      }
      if ($.Element__parseDocument == null) {
        t1 = document;
        t2 = t1.implementation;
        t2.toString;
        t2 = B.DomImplementation_methods.createHtmlDocument$1(t2, "");
        $.Element__parseDocument = t2;
        t2 = t2.createRange();
        t2.toString;
        $.Element__parseRange = t2;
        t2 = $.Element__parseDocument.createElement("base");
        type$.BaseElement._as(t2);
        t1 = t1.baseURI;
        t1.toString;
        t2.href = t1;
        $.Element__parseDocument.head.appendChild(t2).toString;
      }
      t1 = $.Element__parseDocument;
      if (t1.body == null) {
        t2 = t1.createElement("body");
        B.HtmlDocument_methods.set$body(t1, type$.BodyElement._as(t2));
      }
      t1 = $.Element__parseDocument;
      if (type$.BodyElement._is(receiver)) {
        t1 = t1.body;
        t1.toString;
        contextElement = t1;
      } else {
        t1.toString;
        t2 = receiver.tagName;
        t2.toString;
        contextElement = t1.createElement(t2);
        $.Element__parseDocument.body.appendChild(contextElement).toString;
      }
      t1 = "createContextualFragment" in window.Range.prototype;
      t1.toString;
      if (t1) {
        t1 = receiver.tagName;
        t1.toString;
        t1 = !B.JSArray_methods.contains$1(B.List_tEi, t1);
      } else
        t1 = false;
      if (t1) {
        $.Element__parseRange.selectNodeContents(contextElement);
        t1 = $.Element__parseRange;
        t1 = t1.createContextualFragment(html);
        t1.toString;
        fragment = t1;
      } else {
        J.set$_innerHtml$x(contextElement, html);
        t1 = $.Element__parseDocument.createDocumentFragment();
        t1.toString;
        for (; t2 = contextElement.firstChild, t2 != null;)
          t1.appendChild(t2).toString;
        fragment = t1;
      }
      if (contextElement !== $.Element__parseDocument.body)
        J.remove$0$x(contextElement);
      treeSanitizer.sanitizeTree$1(fragment);
      document.adoptNode(fragment).toString;
      return fragment;
    },
    createFragment$2$treeSanitizer(receiver, html, treeSanitizer) {
      return this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, null);
    },
    setInnerHtml$1(receiver, html) {
      this.set$text(receiver, null);
      receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, html, null, null)).toString;
    },
    set$_innerHtml(receiver, value) {
      receiver.innerHTML = value;
    },
    get$onClick(receiver) {
      return new A._ElementEventStreamImpl(receiver, "click", false, type$._ElementEventStreamImpl_MouseEvent);
    },
    $isElement: 1
  };
  A.Element_Element$html_closure.prototype = {
    call$1(e) {
      return type$.Element._is(type$.Node._as(e));
    },
    $signature: 12
  };
  A.Event.prototype = {$isEvent: 1};
  A.EventTarget.prototype = {
    _addEventListener$3(receiver, type, listener, options) {
      return receiver.addEventListener(type, A.convertDartClosureToJS(type$.nullable_dynamic_Function_Event._as(listener), 1), false);
    },
    $isEventTarget: 1
  };
  A.FormElement.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.HtmlCollection.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1 = receiver.length,
        t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null));
      t1 = receiver[index];
      t1.toString;
      return t1;
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1,
    $isHtmlCollection: 1
  };
  A.HtmlDocument.prototype = {
    set$body(receiver, value) {
      receiver.body = value;
    }
  };
  A.KeyboardEvent.prototype = {$isKeyboardEvent: 1};
  A.Location.prototype = {
    toString$0(receiver) {
      var t1 = String(receiver);
      t1.toString;
      return t1;
    },
    $isLocation: 1
  };
  A.MouseEvent.prototype = {$isMouseEvent: 1};
  A._ChildNodeListLazy.prototype = {
    get$single(_) {
      var t1 = this._this,
        l = t1.childNodes.length;
      if (l === 0)
        throw A.wrapException(A.StateError$("No elements"));
      if (l > 1)
        throw A.wrapException(A.StateError$("More than one element"));
      t1 = t1.firstChild;
      t1.toString;
      return t1;
    },
    addAll$1(_, iterable) {
      var t1, t2, len, i, t3;
      type$.Iterable_Node._as(iterable);
      t1 = iterable._this;
      t2 = this._this;
      if (t1 !== t2)
        for (len = t1.childNodes.length, i = 0; i < len; ++i) {
          t3 = t1.firstChild;
          t3.toString;
          t2.appendChild(t3).toString;
        }
      return;
    },
    get$iterator(_) {
      var t1 = this._this.childNodes;
      return new A.FixedSizeListIterator(t1, t1.length, A.instanceType(t1)._eval$1("FixedSizeListIterator<ImmutableListMixin.E>"));
    },
    get$length(_) {
      return this._this.childNodes.length;
    },
    $index(_, index) {
      var t1 = this._this.childNodes;
      if (!(index >= 0 && index < t1.length))
        return A.ioore(t1, index);
      return t1[index];
    }
  };
  A.Node.prototype = {
    remove$0(receiver) {
      var t1 = receiver.parentNode;
      if (t1 != null)
        t1.removeChild(receiver).toString;
    },
    _clearChildren$0(receiver) {
      var t1;
      for (; t1 = receiver.firstChild, t1 != null;)
        receiver.removeChild(t1).toString;
    },
    toString$0(receiver) {
      var value = receiver.nodeValue;
      return value == null ? this.super$Interceptor$toString(receiver) : value;
    },
    set$text(receiver, value) {
      receiver.textContent = value;
    },
    $isNode: 1
  };
  A.NodeList.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1 = receiver.length,
        t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null));
      t1 = receiver[index];
      t1.toString;
      return t1;
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.SelectElement.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  A.SpanElement.prototype = {$isSpanElement: 1};
  A.TableElement.prototype = {
    createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator) {
      var table,
        t1 = "createContextualFragment" in window.Range.prototype;
      t1.toString;
      if (t1)
        return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
      table = A.Element_Element$html("<table>" + html + "</table>", treeSanitizer, validator);
      t1 = document.createDocumentFragment();
      t1.toString;
      new A._ChildNodeListLazy(t1).addAll$1(0, new A._ChildNodeListLazy(table));
      return t1;
    }
  };
  A.TableRowElement.prototype = {
    createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator) {
      var t2,
        t1 = "createContextualFragment" in window.Range.prototype;
      t1.toString;
      if (t1)
        return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
      t1 = document;
      t2 = t1.createDocumentFragment();
      t2.toString;
      t1 = t1.createElement("table");
      t1.toString;
      new A._ChildNodeListLazy(t2).addAll$1(0, new A._ChildNodeListLazy(new A._ChildNodeListLazy(new A._ChildNodeListLazy(B.TableElement_methods.createFragment$3$treeSanitizer$validator(t1, html, treeSanitizer, validator)).get$single(0)).get$single(0)));
      return t2;
    }
  };
  A.TableSectionElement.prototype = {
    createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator) {
      var t2,
        t1 = "createContextualFragment" in window.Range.prototype;
      t1.toString;
      if (t1)
        return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
      t1 = document;
      t2 = t1.createDocumentFragment();
      t2.toString;
      t1 = t1.createElement("table");
      t1.toString;
      new A._ChildNodeListLazy(t2).addAll$1(0, new A._ChildNodeListLazy(new A._ChildNodeListLazy(B.TableElement_methods.createFragment$3$treeSanitizer$validator(t1, html, treeSanitizer, validator)).get$single(0)));
      return t2;
    }
  };
  A.TemplateElement.prototype = {$isTemplateElement: 1};
  A.TextAreaElement.prototype = {
    set$value(receiver, value) {
      receiver.value = value;
    },
    $isTextAreaElement: 1
  };
  A.UIEvent.prototype = {};
  A._Attr.prototype = {$is_Attr: 1};
  A._NamedNodeMap.prototype = {
    get$length(receiver) {
      var t1 = receiver.length;
      t1.toString;
      return t1;
    },
    $index(receiver, index) {
      var t1 = receiver.length,
        t2 = index >>> 0 !== index || index >= t1;
      t2.toString;
      if (t2)
        throw A.wrapException(A.IndexError$withLength(index, t1, receiver, null));
      t1 = receiver[index];
      t1.toString;
      return t1;
    },
    elementAt$1(receiver, index) {
      if (!(index >= 0 && index < receiver.length))
        return A.ioore(receiver, index);
      return receiver[index];
    },
    $isJavaScriptIndexingBehavior: 1,
    $isIterable: 1,
    $isList: 1
  };
  A._AttributeMap.prototype = {
    forEach$1(_, f) {
      var t1, t2, t3, _i, key, value;
      type$.void_Function_String_String._as(f);
      for (t1 = this.get$keys(), t2 = t1.length, t3 = this._element, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        key = t1[_i];
        value = t3.getAttribute(key);
        f.call$2(key, value == null ? A._asString(value) : value);
      }
    },
    get$keys() {
      var keys, len, t2, i, attr, t3,
        t1 = this._element.attributes;
      t1.toString;
      keys = A._setArrayType([], type$.JSArray_String);
      for (len = t1.length, t2 = type$._Attr, i = 0; i < len; ++i) {
        if (!(i < t1.length))
          return A.ioore(t1, i);
        attr = t2._as(t1[i]);
        if (attr.namespaceURI == null) {
          t3 = attr.name;
          t3.toString;
          B.JSArray_methods.add$1(keys, t3);
        }
      }
      return keys;
    }
  };
  A._ElementAttributeMap.prototype = {
    $index(_, key) {
      return this._element.getAttribute(A._asString(key));
    },
    get$length(_) {
      return this.get$keys().length;
    }
  };
  A.EventStreamProvider.prototype = {};
  A._EventStream.prototype = {};
  A._ElementEventStreamImpl.prototype = {};
  A._EventStreamSubscription.prototype = {$isStreamSubscription: 1};
  A._EventStreamSubscription_closure.prototype = {
    call$1(e) {
      return this.onData.call$1(type$.Event._as(e));
    },
    $signature: 13
  };
  A._Html5NodeValidator.prototype = {
    _Html5NodeValidator$1$uriPolicy(uriPolicy) {
      var _i;
      if ($._Html5NodeValidator__attributeValidators.__js_helper$_length === 0) {
        for (_i = 0; _i < 262; ++_i)
          $._Html5NodeValidator__attributeValidators.$indexSet(0, B.List_xWm[_i], A.html__Html5NodeValidator__standardAttributeValidator$closure());
        for (_i = 0; _i < 12; ++_i)
          $._Html5NodeValidator__attributeValidators.$indexSet(0, B.List_ql7[_i], A.html__Html5NodeValidator__uriAttributeValidator$closure());
      }
    },
    allowsElement$1(element) {
      return $.$get$_Html5NodeValidator__allowedElements().contains$1(0, A.Element__safeTagName(element));
    },
    allowsAttribute$3(element, attributeName, value) {
      var validator = $._Html5NodeValidator__attributeValidators.$index(0, A.Element__safeTagName(element) + "::" + attributeName);
      if (validator == null)
        validator = $._Html5NodeValidator__attributeValidators.$index(0, "*::" + attributeName);
      if (validator == null)
        return false;
      return A._asBool(validator.call$4(element, attributeName, value, this));
    },
    $isNodeValidator: 1
  };
  A.ImmutableListMixin.prototype = {
    get$iterator(receiver) {
      return new A.FixedSizeListIterator(receiver, this.get$length(receiver), A.instanceType(receiver)._eval$1("FixedSizeListIterator<ImmutableListMixin.E>"));
    }
  };
  A.NodeValidatorBuilder.prototype = {
    allowsElement$1(element) {
      return B.JSArray_methods.any$1(this._validators, new A.NodeValidatorBuilder_allowsElement_closure(element));
    },
    allowsAttribute$3(element, attributeName, value) {
      return B.JSArray_methods.any$1(this._validators, new A.NodeValidatorBuilder_allowsAttribute_closure(element, attributeName, value));
    },
    $isNodeValidator: 1
  };
  A.NodeValidatorBuilder_allowsElement_closure.prototype = {
    call$1(v) {
      return type$.NodeValidator._as(v).allowsElement$1(this.element);
    },
    $signature: 14
  };
  A.NodeValidatorBuilder_allowsAttribute_closure.prototype = {
    call$1(v) {
      return type$.NodeValidator._as(v).allowsAttribute$3(this.element, this.attributeName, this.value);
    },
    $signature: 14
  };
  A._SimpleNodeValidator.prototype = {
    _SimpleNodeValidator$4$allowedAttributes$allowedElements$allowedUriAttributes(uriPolicy, allowedAttributes, allowedElements, allowedUriAttributes) {
      var legalAttributes, extraUriAttributes, t1;
      this.allowedElements.addAll$1(0, allowedElements);
      legalAttributes = allowedAttributes.where$1(0, new A._SimpleNodeValidator_closure());
      extraUriAttributes = allowedAttributes.where$1(0, new A._SimpleNodeValidator_closure0());
      this.allowedAttributes.addAll$1(0, legalAttributes);
      t1 = this.allowedUriAttributes;
      t1.addAll$1(0, B.List_empty);
      t1.addAll$1(0, extraUriAttributes);
    },
    allowsElement$1(element) {
      return this.allowedElements.contains$1(0, A.Element__safeTagName(element));
    },
    allowsAttribute$3(element, attributeName, value) {
      var t3, _this = this,
        tagName = A.Element__safeTagName(element),
        t1 = _this.allowedUriAttributes,
        t2 = tagName + "::" + attributeName;
      if (t1.contains$1(0, t2))
        return _this.uriPolicy.allowsUri$1(value);
      else {
        t3 = "*::" + attributeName;
        if (t1.contains$1(0, t3))
          return _this.uriPolicy.allowsUri$1(value);
        else {
          t1 = _this.allowedAttributes;
          if (t1.contains$1(0, t2))
            return true;
          else if (t1.contains$1(0, t3))
            return true;
          else if (t1.contains$1(0, tagName + "::*"))
            return true;
          else if (t1.contains$1(0, "*::*"))
            return true;
        }
      }
      return false;
    },
    $isNodeValidator: 1
  };
  A._SimpleNodeValidator_closure.prototype = {
    call$1(x) {
      return !B.JSArray_methods.contains$1(B.List_ql7, A._asString(x));
    },
    $signature: 15
  };
  A._SimpleNodeValidator_closure0.prototype = {
    call$1(x) {
      return B.JSArray_methods.contains$1(B.List_ql7, A._asString(x));
    },
    $signature: 15
  };
  A._TemplatingNodeValidator.prototype = {
    allowsAttribute$3(element, attributeName, value) {
      if (this.super$_SimpleNodeValidator$allowsAttribute(element, attributeName, value))
        return true;
      if (attributeName === "template" && value === "")
        return true;
      if (element.getAttribute("template") === "")
        return this._templateAttrs.contains$1(0, attributeName);
      return false;
    }
  };
  A._TemplatingNodeValidator_closure.prototype = {
    call$1(attr) {
      return "TEMPLATE::" + A._asString(attr);
    },
    $signature: 16
  };
  A._SvgNodeValidator.prototype = {
    allowsElement$1(element) {
      var t1;
      if (type$.ScriptElement._is(element))
        return false;
      t1 = type$.SvgElement._is(element);
      if (t1 && A.Element__safeTagName(element) === "foreignObject")
        return false;
      if (t1)
        return true;
      return false;
    },
    allowsAttribute$3(element, attributeName, value) {
      if (attributeName === "is" || B.JSString_methods.startsWith$1(attributeName, "on"))
        return false;
      return this.allowsElement$1(element);
    },
    $isNodeValidator: 1
  };
  A.FixedSizeListIterator.prototype = {
    moveNext$0() {
      var _this = this,
        nextPosition = _this._position + 1,
        t1 = _this._html$_length;
      if (nextPosition < t1) {
        _this._html$_current = J.$index$asx(_this._array, nextPosition);
        _this._position = nextPosition;
        return true;
      }
      _this._html$_current = null;
      _this._position = t1;
      return false;
    },
    get$current() {
      var t1 = this._html$_current;
      return t1 == null ? this.$ti._precomputed1._as(t1) : t1;
    },
    $isIterator: 1
  };
  A._SameOriginUriPolicy.prototype = {$isUriPolicy: 1};
  A._ValidatingTreeSanitizer.prototype = {
    sanitizeTree$1(node) {
      var previousTreeModifications,
        walk = new A._ValidatingTreeSanitizer_sanitizeTree_walk(this);
      do {
        previousTreeModifications = this.numTreeModifications;
        walk.call$2(node, null);
      } while (previousTreeModifications !== this.numTreeModifications);
    },
    _removeNode$2(node, $parent) {
      ++this.numTreeModifications;
      if ($parent == null || $parent !== node.parentNode)
        J.remove$0$x(node);
      else
        $parent.removeChild(node).toString;
    },
    _sanitizeUntrustedElement$2(element, $parent) {
      var corruptedTest1, elementText, elementTagName, t1, corrupted0, exception, t2,
        corrupted = true,
        attrs = null, isAttr = null;
      try {
        attrs = J.get$attributes$x(element);
        isAttr = attrs._element.getAttribute("is");
        type$.Element._as(element);
        t1 = function(element) {
          if (!(element.attributes instanceof NamedNodeMap)) {
            return true;
          }
          if (element.id == "lastChild" || element.name == "lastChild" || element.id == "previousSibling" || element.name == "previousSibling" || element.id == "children" || element.name == "children") {
            return true;
          }
          var childNodes = element.childNodes;
          if (element.lastChild && element.lastChild !== childNodes[childNodes.length - 1]) {
            return true;
          }
          if (element.children) {
            if (!(element.children instanceof HTMLCollection || element.children instanceof NodeList)) {
              return true;
            }
          }
          var length = 0;
          if (element.children) {
            length = element.children.length;
          }
          for (var i = 0; i < length; i++) {
            var child = element.children[i];
            if (child.id == "attributes" || child.name == "attributes" || child.id == "lastChild" || child.name == "lastChild" || child.id == "previousSibling" || child.name == "previousSibling" || child.id == "children" || child.name == "children") {
              return true;
            }
          }
          return false;
        }(element);
        t1.toString;
        corruptedTest1 = t1;
        if (corruptedTest1)
          corrupted0 = true;
        else {
          t1 = !(element.attributes instanceof NamedNodeMap);
          t1.toString;
          corrupted0 = t1;
        }
        corrupted = corrupted0;
      } catch (exception) {
      }
      elementText = "element unprintable";
      try {
        elementText = J.toString$0$(element);
      } catch (exception) {
      }
      try {
        type$.Element._as(element);
        elementTagName = A.Element__safeTagName(element);
        this._sanitizeElement$7(element, $parent, corrupted, elementText, elementTagName, type$.Map_dynamic_dynamic._as(attrs), A._asStringQ(isAttr));
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.ArgumentError)
          throw exception;
        else {
          this._removeNode$2(element, $parent);
          window.toString;
          t1 = A.S(elementText);
          t2 = typeof console != "undefined";
          t2.toString;
          if (t2)
            window.console.warn("Removing corrupted element " + t1);
        }
      }
    },
    _sanitizeElement$7(element, $parent, corrupted, text, tag, attrs, isAttr) {
      var t1, t2, keys, i, $name, t3, t4, _this = this;
      if (corrupted) {
        _this._removeNode$2(element, $parent);
        window.toString;
        t1 = typeof console != "undefined";
        t1.toString;
        if (t1)
          window.console.warn("Removing element due to corrupted attributes on <" + text + ">");
        return;
      }
      if (!_this.validator.allowsElement$1(element)) {
        _this._removeNode$2(element, $parent);
        window.toString;
        t1 = A.S($parent);
        t2 = typeof console != "undefined";
        t2.toString;
        if (t2)
          window.console.warn("Removing disallowed element <" + tag + "> from " + t1);
        return;
      }
      if (isAttr != null)
        if (!_this.validator.allowsAttribute$3(element, "is", isAttr)) {
          _this._removeNode$2(element, $parent);
          window.toString;
          t1 = typeof console != "undefined";
          t1.toString;
          if (t1)
            window.console.warn("Removing disallowed type extension <" + tag + ' is="' + isAttr + '">');
          return;
        }
      t1 = attrs.get$keys();
      keys = A._setArrayType(t1.slice(0), A._arrayInstanceType(t1));
      for (i = attrs.get$keys().length - 1, t1 = attrs._element, t2 = "Removing disallowed attribute <" + tag + " "; i >= 0; --i) {
        if (!(i < keys.length))
          return A.ioore(keys, i);
        $name = keys[i];
        t3 = _this.validator;
        t4 = J.toLowerCase$0$s($name);
        A._asString($name);
        if (!t3.allowsAttribute$3(element, t4, A._asString(t1.getAttribute($name)))) {
          window.toString;
          t3 = t1.getAttribute($name);
          t4 = typeof console != "undefined";
          t4.toString;
          if (t4)
            window.console.warn(t2 + $name + '="' + A.S(t3) + '">');
          t1.removeAttribute($name);
        }
      }
      if (type$.TemplateElement._is(element)) {
        t1 = element.content;
        t1.toString;
        _this.sanitizeTree$1(t1);
      }
    },
    sanitizeNode$2(node, $parent) {
      var t1 = node.nodeType;
      t1.toString;
      switch (t1) {
        case 1:
          this._sanitizeUntrustedElement$2(node, $parent);
          break;
        case 8:
        case 11:
        case 3:
        case 4:
          break;
        default:
          this._removeNode$2(node, $parent);
      }
    },
    $isNodeTreeSanitizer: 1
  };
  A._ValidatingTreeSanitizer_sanitizeTree_walk.prototype = {
    call$2(node, $parent) {
      var child, nextChild, t2, exception, t3,
        t1 = this.$this;
      t1.sanitizeNode$2(node, $parent);
      child = node.lastChild;
      for (; child != null;) {
        nextChild = null;
        try {
          nextChild = child.previousSibling;
          if (nextChild != null && nextChild.nextSibling !== child) {
            t2 = A.StateError$("Corrupt HTML");
            throw A.wrapException(t2);
          }
        } catch (exception) {
          t2 = child;
          ++t1.numTreeModifications;
          t3 = t2.parentNode;
          if (node !== t3) {
            if (t3 != null)
              t3.removeChild(t2).toString;
          } else
            node.removeChild(t2).toString;
          child = null;
          nextChild = node.lastChild;
        }
        if (child != null)
          this.call$2(child, node);
        child = nextChild;
      }
    },
    $signature: 28
  };
  A._CssStyleDeclaration_JavaScriptObject_CssStyleDeclarationBase.prototype = {};
  A._HtmlCollection_JavaScriptObject_ListMixin.prototype = {};
  A._HtmlCollection_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A._NodeList_JavaScriptObject_ListMixin.prototype = {};
  A._NodeList_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A.__NamedNodeMap_JavaScriptObject_ListMixin.prototype = {};
  A.__NamedNodeMap_JavaScriptObject_ListMixin_ImmutableListMixin.prototype = {};
  A.FilteredElementList.prototype = {
    get$_html_common$_iterable() {
      var t1 = this._childNodes,
        t2 = A._instanceType(t1);
      return new A.MappedIterable(new A.WhereIterable(t1, t2._eval$1("bool(ListBase.E)")._as(new A.FilteredElementList__iterable_closure()), t2._eval$1("WhereIterable<ListBase.E>")), t2._eval$1("Element(ListBase.E)")._as(new A.FilteredElementList__iterable_closure0()), t2._eval$1("MappedIterable<ListBase.E,Element>"));
    },
    clear$0(_) {
      J._clearChildren$0$x(this._childNodes._this);
    },
    get$length(_) {
      return J.get$length$asx(this.get$_html_common$_iterable().__internal$_iterable);
    },
    $index(_, index) {
      var t1 = this.get$_html_common$_iterable();
      return t1._f.call$1(J.elementAt$1$ax(t1.__internal$_iterable, index));
    },
    get$iterator(_) {
      var t1 = A.List_List$from(this.get$_html_common$_iterable(), false, type$.Element);
      return new J.ArrayIterator(t1, t1.length, A._arrayInstanceType(t1)._eval$1("ArrayIterator<1>"));
    }
  };
  A.FilteredElementList__iterable_closure.prototype = {
    call$1(n) {
      return type$.Element._is(type$.Node._as(n));
    },
    $signature: 12
  };
  A.FilteredElementList__iterable_closure0.prototype = {
    call$1(n) {
      return type$.Element._as(type$.Node._as(n));
    },
    $signature: 29
  };
  A._JSRandom.prototype = {
    nextDouble$0() {
      return Math.random();
    }
  };
  A.ScriptElement0.prototype = {$isScriptElement0: 1};
  A.SvgElement.prototype = {
    get$children(receiver) {
      return new A.FilteredElementList(receiver, new A._ChildNodeListLazy(receiver));
    },
    createFragment$3$treeSanitizer$validator(receiver, svg, treeSanitizer, validator) {
      var t2, fragment, root,
        t1 = A._setArrayType([], type$.JSArray_NodeValidator);
      B.JSArray_methods.add$1(t1, A._Html5NodeValidator$(null));
      B.JSArray_methods.add$1(t1, A._TemplatingNodeValidator$());
      B.JSArray_methods.add$1(t1, new A._SvgNodeValidator());
      treeSanitizer = new A._ValidatingTreeSanitizer(new A.NodeValidatorBuilder(t1));
      t1 = document;
      t2 = t1.body;
      t2.toString;
      fragment = B.BodyElement_methods.createFragment$2$treeSanitizer(t2, '<svg version="1.1">' + svg + "</svg>", treeSanitizer);
      t1 = t1.createDocumentFragment();
      t1.toString;
      root = new A._ChildNodeListLazy(fragment).get$single(0);
      for (; t2 = root.firstChild, t2 != null;)
        t1.appendChild(t2).toString;
      return t1;
    },
    get$onClick(receiver) {
      return new A._ElementEventStreamImpl(receiver, "click", false, type$._ElementEventStreamImpl_MouseEvent);
    },
    $isSvgElement: 1
  };
  A.Stmt.prototype = {};
  A.BlockStmt.prototype = {
    accept$1$1(_, visitor, $T) {
      return $T._eval$1("AstVisitor<0>")._as(visitor).visitBlockStmt$1(this);
    }
  };
  A.ExpressionStmt.prototype = {
    accept$1$1(_, visitor, $T) {
      this.expression.accept$1$1(0, $T._eval$1("AstVisitor<0>")._as(visitor), type$.void);
      return null;
    }
  };
  A.IfStmt.prototype = {
    accept$1$1(_, visitor, $T) {
      var t1, t2;
      $T._eval$1("AstVisitor<0>")._as(visitor);
      t1 = type$.void;
      this.condition.accept$1$1(0, visitor, t1);
      this.thenBranch.accept$1$1(0, visitor, t1);
      t2 = this.elseBranch;
      if (t2 != null)
        t2.accept$1$1(0, visitor, t1);
      return null;
    }
  };
  A.PrintStmt.prototype = {
    accept$1$1(_, visitor, $T) {
      this.expression.accept$1$1(0, $T._eval$1("AstVisitor<0>")._as(visitor), type$.void);
      return null;
    }
  };
  A.VarDeclStmt.prototype = {
    accept$1$1(_, visitor, $T) {
      var t1, t2;
      $T._eval$1("AstVisitor<0>")._as(visitor);
      t1 = this.name;
      visitor._currentScope.define$1(t1);
      t2 = this.initializer;
      if (t2 != null)
        t2.accept$1$1(0, visitor, type$.void);
      visitor._currentScope.assign$1(0, t1);
      return null;
    }
  };
  A.TypedVarDeclStmt.prototype = {
    accept$1$1(_, visitor, $T) {
      var t1, t2, expectedType, actualType, t3;
      $T._eval$1("AstVisitor<0>")._as(visitor);
      t1 = this.name;
      visitor._currentScope.define$1(t1);
      t2 = this.initializer;
      if (t2 != null) {
        t2.accept$1$1(0, visitor, type$.void);
        expectedType = this.type.type.type;
        actualType = visitor._inferExpressionType$1(t2);
        if (!visitor._areTypesCompatible$2(actualType, expectedType)) {
          t2 = visitor._errorReporter;
          t3 = "Tipo incompat\xedvel na declara\xe7\xe3o. Vari\xe1vel '" + t1.lexeme + "' \xe9 do tipo '" + visitor._tokenTypeToString$1(expectedType) + "', mas inicializador \xe9 do tipo '" + visitor._tokenTypeToString$1(actualType) + "'.";
          t2.super$ErrorReporter$error(0, t1.line, t3);
          t2.output._contents += "ERRO: " + t3 + "\n";
        }
      }
      visitor._currentScope.assign$1(0, t1);
      return null;
    }
  };
  A.ConstDeclStmt.prototype = {
    accept$1$1(_, visitor, $T) {
      return $T._eval$1("AstVisitor<0>")._as(visitor).visitConstDeclStmt$1(this);
    }
  };
  A.WhileStmt.prototype = {
    accept$1$1(_, visitor, $T) {
      var t1;
      $T._eval$1("AstVisitor<0>")._as(visitor);
      t1 = type$.void;
      this.condition.accept$1$1(0, visitor, t1);
      ++visitor._loopNestingLevel;
      this.body.accept$1$1(0, visitor, t1);
      --visitor._loopNestingLevel;
      return null;
    }
  };
  A.DoWhileStmt.prototype = {
    accept$1$1(_, visitor, $T) {
      var t1;
      $T._eval$1("AstVisitor<0>")._as(visitor);
      ++visitor._loopNestingLevel;
      t1 = type$.void;
      this.body.accept$1$1(0, visitor, t1);
      --visitor._loopNestingLevel;
      this.condition.accept$1$1(0, visitor, t1);
      return null;
    }
  };
  A.ForStmt.prototype = {
    accept$1$1(_, visitor, $T) {
      var t1, t2, t3, _this = this;
      $T._eval$1("AstVisitor<0>")._as(visitor);
      t1 = type$.void;
      _this.initializer.accept$1$1(0, visitor, t1);
      _this.condition.accept$1$1(0, visitor, t1);
      t2 = new A.SymbolTable(visitor._currentScope, A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Symbol));
      visitor._currentScope = t2;
      t3 = _this.variable;
      t2.define$1(t3);
      visitor._currentScope.assign$1(0, t3);
      ++visitor._loopNestingLevel;
      _this.body.accept$1$1(0, visitor, t1);
      --visitor._loopNestingLevel;
      t1 = visitor._currentScope.enclosing;
      t1.toString;
      visitor._currentScope = t1;
      return null;
    }
  };
  A.ForStepStmt.prototype = {
    accept$1$1(_, visitor, $T) {
      var t1, t2, t3, _this = this;
      $T._eval$1("AstVisitor<0>")._as(visitor);
      t1 = type$.void;
      _this.initializer.accept$1$1(0, visitor, t1);
      _this.condition.accept$1$1(0, visitor, t1);
      _this.step.accept$1$1(0, visitor, t1);
      t2 = new A.SymbolTable(visitor._currentScope, A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Symbol));
      visitor._currentScope = t2;
      t3 = _this.variable;
      t2.define$1(t3);
      visitor._currentScope.assign$1(0, t3);
      ++visitor._loopNestingLevel;
      _this.body.accept$1$1(0, visitor, t1);
      --visitor._loopNestingLevel;
      t1 = visitor._currentScope.enclosing;
      t1.toString;
      visitor._currentScope = t1;
      return null;
    }
  };
  A.ForCStmt.prototype = {
    accept$1$1(_, visitor, $T) {
      var t1, _this = this;
      $T._eval$1("AstVisitor<0>")._as(visitor);
      visitor._currentScope = new A.SymbolTable(visitor._currentScope, A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Symbol));
      t1 = _this.initializer;
      if (t1 != null)
        t1.accept$1$1(0, visitor, type$.void);
      t1 = _this.condition;
      if (t1 != null)
        t1.accept$1$1(0, visitor, type$.void);
      t1 = _this.increment;
      if (t1 != null)
        t1.accept$1$1(0, visitor, type$.void);
      ++visitor._loopNestingLevel;
      _this.body.accept$1$1(0, visitor, type$.void);
      --visitor._loopNestingLevel;
      t1 = visitor._currentScope.enclosing;
      t1.toString;
      visitor._currentScope = t1;
      return null;
    }
  };
  A.TypeInfo.prototype = {
    toString$0(_) {
      return this.type.lexeme;
    }
  };
  A.Parameter.prototype = {
    toString$0(_) {
      return this.type.type.lexeme + " " + this.name.lexeme;
    }
  };
  A.FunctionStmt.prototype = {
    accept$1$1(_, visitor, $T) {
      return $T._eval$1("AstVisitor<0>")._as(visitor).visitFunctionStmt$1(this);
    }
  };
  A.ReturnStmt.prototype = {
    accept$1$1(_, visitor, $T) {
      var t1, returnExprType, expectedType, t2;
      $T._eval$1("AstVisitor<0>")._as(visitor);
      t1 = this.value;
      if (t1 != null) {
        t1.accept$1$1(0, visitor, type$.void);
        if (visitor._currentFunctionReturnType != null) {
          returnExprType = visitor._inferExpressionType$1(t1);
          expectedType = visitor._currentFunctionReturnType.type.type;
          if (!visitor._areTypesCompatible$2(returnExprType, expectedType)) {
            t1 = visitor._errorReporter;
            t2 = "Tipo de retorno incompat\xedvel. Esperado '" + visitor._tokenTypeToString$1(expectedType) + "', mas encontrado '" + visitor._tokenTypeToString$1(returnExprType) + "'.";
            t1.super$ErrorReporter$error(0, this.keyword.line, t2);
            t1.output._contents += "ERRO: " + t2 + "\n";
          }
        }
      }
      return null;
    }
  };
  A.BreakStmt.prototype = {
    accept$1$1(_, visitor, $T) {
      var t1;
      $T._eval$1("AstVisitor<0>")._as(visitor);
      if (visitor._loopNestingLevel === 0 && visitor._switchNestingLevel === 0) {
        t1 = visitor._errorReporter;
        t1.super$ErrorReporter$error(0, this.keyword.line, "Comando 'pare' s\xf3 pode ser usado dentro de loops ou switches.");
        t1.output._contents += "ERRO: Comando 'pare' s\xf3 pode ser usado dentro de loops ou switches.\n";
      }
      return null;
    }
  };
  A.ContinueStmt.prototype = {
    accept$1$1(_, visitor, $T) {
      var t1;
      $T._eval$1("AstVisitor<0>")._as(visitor);
      if (visitor._loopNestingLevel === 0) {
        t1 = visitor._errorReporter;
        t1.super$ErrorReporter$error(0, this.keyword.line, "Comando 'continuar' s\xf3 pode ser usado dentro de loops.");
        t1.output._contents += "ERRO: Comando 'continuar' s\xf3 pode ser usado dentro de loops.\n";
      }
      return null;
    }
  };
  A.ImportStmt.prototype = {
    accept$1$1(_, visitor, $T) {
      return $T._eval$1("AstVisitor<0>")._as(visitor).visitImportStmt$1(this);
    }
  };
  A.SwitchStmt.prototype = {
    accept$1$1(_, visitor, $T) {
      return $T._eval$1("AstVisitor<0>")._as(visitor).visitSwitchStmt$1(this);
    }
  };
  A.CaseStmt.prototype = {};
  A.Expr.prototype = {};
  A.AssignExpr.prototype = {
    accept$1$1(_, visitor, $T) {
      return $T._eval$1("AstVisitor<0>")._as(visitor).visitAssignExpr$1(this);
    }
  };
  A.CompoundAssignExpr.prototype = {
    accept$1$1(_, visitor, $T) {
      return $T._eval$1("AstVisitor<0>")._as(visitor).visitCompoundAssignExpr$1(this);
    }
  };
  A.IncrementExpr.prototype = {
    accept$1$1(_, visitor, $T) {
      return $T._eval$1("AstVisitor<0>")._as(visitor).visitIncrementExpr$1(this);
    }
  };
  A.DecrementExpr.prototype = {
    accept$1$1(_, visitor, $T) {
      return $T._eval$1("AstVisitor<0>")._as(visitor).visitDecrementExpr$1(this);
    }
  };
  A.BinaryExpr.prototype = {
    accept$1$1(_, visitor, $T) {
      var t1;
      $T._eval$1("AstVisitor<0>")._as(visitor);
      t1 = type$.void;
      this.left.accept$1$1(0, visitor, t1);
      this.right.accept$1$1(0, visitor, t1);
      return null;
    }
  };
  A.GroupingExpr.prototype = {
    accept$1$1(_, visitor, $T) {
      this.expression.accept$1$1(0, $T._eval$1("AstVisitor<0>")._as(visitor), type$.void);
      return null;
    }
  };
  A.TernaryExpr.prototype = {
    accept$1$1(_, visitor, $T) {
      var t1;
      $T._eval$1("AstVisitor<0>")._as(visitor);
      t1 = type$.void;
      this.condition.accept$1$1(0, visitor, t1);
      this.thenBranch.accept$1$1(0, visitor, t1);
      this.elseBranch.accept$1$1(0, visitor, t1);
      return null;
    }
  };
  A.LiteralExpr.prototype = {
    accept$1$1(_, visitor, $T) {
      $T._eval$1("AstVisitor<0>")._as(visitor);
      return null;
    }
  };
  A.UnaryExpr.prototype = {
    accept$1$1(_, visitor, $T) {
      this.right.accept$1$1(0, $T._eval$1("AstVisitor<0>")._as(visitor), type$.void);
      return null;
    }
  };
  A.VariableExpr.prototype = {
    accept$1$1(_, visitor, $T) {
      return $T._eval$1("AstVisitor<0>")._as(visitor).visitVariableExpr$1(this);
    }
  };
  A.CallExpr.prototype = {
    accept$1$1(_, visitor, $T) {
      return $T._eval$1("AstVisitor<0>")._as(visitor).visitCallExpr$1(this);
    }
  };
  A.MemberAccessExpr.prototype = {
    accept$1$1(_, visitor, $T) {
      return $T._eval$1("AstVisitor<0>")._as(visitor).visitMemberAccessExpr$1(this);
    }
  };
  A.ErrorReporter.prototype = {
    report$3(line, where, message) {
      A.print("[Linha " + line + "] Erro " + where + ": " + message);
      this._hadError = true;
    },
    error$2(_, line, message) {
      this.super$ErrorReporter$report(line, "", message);
      this.output._contents += "ERRO [Linha " + line + "]: " + message + "\n";
    }
  };
  A.Lexer.prototype = {
    scanTokens$0() {
      var t1, t2, _this = this;
      for (t1 = _this.length; t2 = _this._lexer$_current, t2 < t1;) {
        _this._start = t2;
        _this._tokenStartColumn = _this._column;
        _this._scanToken$0();
      }
      t1 = _this._lexer$_tokens;
      B.JSArray_methods.add$1(t1, new A.Token(B.TokenType_63, "", null, _this._line, _this._column));
      return t1;
    },
    _scanToken$0() {
      var t1, t2, t3, t4, t5, _this = this, _s1_ = "=",
        c = _this._lexer$_advance$0();
      switch (c) {
        case "(":
          _this._addToken$1(B.TokenType_0);
          break;
        case ")":
          _this._addToken$1(B.TokenType_1);
          break;
        case "{":
          _this._addToken$1(B.TokenType_2);
          break;
        case "}":
          _this._addToken$1(B.TokenType_3);
          break;
        case ",":
          _this._addToken$1(B.TokenType_4);
          break;
        case ".":
          _this._addToken$1(B.TokenType_5);
          break;
        case "?":
          _this._addToken$1(B.TokenType_14);
          break;
        case ":":
          _this._addToken$1(B.TokenType_15);
          break;
        case "-":
          if (_this._lexer$_match$1("-"))
            _this._addToken$1(B.TokenType_9);
          else if (_this._lexer$_match$1(_s1_))
            _this._addToken$1(B.TokenType_21);
          else
            _this._addToken$1(B.TokenType_6);
          break;
        case "+":
          if (_this._lexer$_match$1("+"))
            _this._addToken$1(B.TokenType_8);
          else if (_this._lexer$_match$1(_s1_))
            _this._addToken$1(B.TokenType_20);
          else
            _this._addToken$1(B.TokenType_7);
          break;
        case ";":
          _this._addToken$1(B.TokenType_11);
          break;
        case "*":
          _this._addToken$1(_this._lexer$_match$1(_s1_) ? B.TokenType_22 : B.TokenType_13);
          break;
        case "%":
          _this._addToken$1(_this._lexer$_match$1(_s1_) ? B.TokenType_24 : B.TokenType_10);
          break;
        case "!":
          _this._addToken$1(_this._lexer$_match$1(_s1_) ? B.TokenType_17 : B.TokenType_16);
          break;
        case "=":
          _this._addToken$1(_this._lexer$_match$1(_s1_) ? B.TokenType_19 : B.TokenType_18);
          break;
        case "<":
          _this._addToken$1(_this._lexer$_match$1(_s1_) ? B.TokenType_28 : B.TokenType_27);
          break;
        case ">":
          _this._addToken$1(_this._lexer$_match$1(_s1_) ? B.TokenType_26 : B.TokenType_25);
          break;
        case "/":
          if (_this._lexer$_match$1("/")) {
            t1 = _this._lexer$_source;
            t2 = t1.length;
            t3 = _this.length;
            while (true) {
              t4 = _this._lexer$_current;
              if (t4 >= t3)
                t5 = "\x00";
              else {
                if (!(t4 < t2))
                  return A.ioore(t1, t4);
                t5 = t1[t4];
              }
              if (!(t5 !== "\n" && t4 < t3))
                break;
              _this._lexer$_advance$0();
            }
          } else if (_this._lexer$_match$1(_s1_))
            _this._addToken$1(B.TokenType_23);
          else
            _this._addToken$1(B.TokenType_12);
          break;
        case " ":
        case "\r":
        case "\t":
          break;
        case "\n":
          ++_this._line;
          _this._column = 1;
          break;
        case '"':
          _this._string$0();
          break;
        default:
          if (_this._isDigit$1(c))
            _this._number$0();
          else if (_this._isAlpha$1(c))
            _this._identifier$0();
          else {
            t1 = _this._lexer$_errorReporter;
            t1.super$ErrorReporter$error(0, _this._line, "Caractere inesperado.");
            t1.output._contents += "ERRO: Caractere inesperado.\n";
          }
      }
    },
    _identifier$0() {
      var t4, t5, text, type, _this = this,
        t1 = _this._lexer$_source,
        t2 = t1.length,
        t3 = _this.length;
      while (true) {
        t4 = _this._lexer$_current;
        if (t4 >= t3)
          t4 = "\x00";
        else {
          if (!(t4 < t2))
            return A.ioore(t1, t4);
          t4 = t1[t4];
        }
        if (!_this._isAlpha$1(t4)) {
          if (t4 === "0")
            t5 = 0;
          else
            t5 = t4 < "0" ? -1 : 1;
          if (t5 >= 0) {
            if (t4 === "9")
              t4 = 0;
            else
              t4 = t4 < "9" ? -1 : 1;
            t4 = t4 <= 0;
          } else
            t4 = false;
        } else
          t4 = true;
        if (!t4)
          break;
        _this._lexer$_advance$0();
      }
      text = B.JSString_methods.substring$2(t1, _this._start, _this._lexer$_current);
      type = $.$get$Lexer__keywords().$index(0, text);
      _this._addToken$1(type == null ? B.TokenType_29 : type);
    },
    _number$0() {
      var t4, t5, t6, t7, hasDecimal, valueStr, _this = this,
        t1 = _this._lexer$_source,
        t2 = t1.length,
        t3 = _this.length;
      while (true) {
        t4 = _this._lexer$_current;
        t5 = t4 >= t3;
        if (t5)
          t6 = "\x00";
        else {
          if (!(t4 < t2))
            return A.ioore(t1, t4);
          t6 = t1[t4];
        }
        if (t6 === "0")
          t7 = 0;
        else
          t7 = t6 < "0" ? -1 : 1;
        if (t7 >= 0) {
          if (t6 === "9")
            t6 = 0;
          else
            t6 = t6 < "9" ? -1 : 1;
          t6 = t6 <= 0;
        } else
          t6 = false;
        if (!t6)
          break;
        _this._lexer$_advance$0();
      }
      if (t5)
        t4 = "\x00";
      else {
        if (!(t4 < t2))
          return A.ioore(t1, t4);
        t4 = t1[t4];
      }
      hasDecimal = t4 === "." && _this._isDigit$1(_this._lexer$_peekNext$0());
      if (hasDecimal) {
        _this._lexer$_advance$0();
        while (true) {
          t4 = _this._lexer$_current;
          if (t4 >= t3)
            t4 = "\x00";
          else {
            if (!(t4 < t2))
              return A.ioore(t1, t4);
            t4 = t1[t4];
          }
          if (t4 === "0")
            t5 = 0;
          else
            t5 = t4 < "0" ? -1 : 1;
          if (t5 >= 0) {
            if (t4 === "9")
              t4 = 0;
            else
              t4 = t4 < "9" ? -1 : 1;
            t4 = t4 <= 0;
          } else
            t4 = false;
          if (!t4)
            break;
          _this._lexer$_advance$0();
        }
      }
      valueStr = B.JSString_methods.substring$2(t1, _this._start, _this._lexer$_current);
      if (hasDecimal)
        _this._addToken$2(B.TokenType_31, A.double_parse(valueStr));
      else
        _this._addToken$2(B.TokenType_31, A.int_parse(valueStr));
    },
    _string$0() {
      var t4, t5, t6, _this = this,
        t1 = _this._lexer$_source,
        t2 = t1.length,
        t3 = _this.length;
      while (true) {
        t4 = _this._lexer$_current;
        t5 = t4 >= t3;
        if (t5)
          t6 = "\x00";
        else {
          if (!(t4 < t2))
            return A.ioore(t1, t4);
          t6 = t1[t4];
        }
        if (!(t6 !== '"' && t4 < t3))
          break;
        if (t5)
          t4 = "\x00";
        else {
          if (!(t4 < t2))
            return A.ioore(t1, t4);
          t4 = t1[t4];
        }
        if (t4 === "\n") {
          ++_this._line;
          _this._column = 1;
        }
        _this._lexer$_advance$0();
      }
      if (t5) {
        t1 = _this._lexer$_errorReporter;
        t1.super$ErrorReporter$error(0, _this._line, "String n\xe3o terminada.");
        t1.output._contents += "ERRO: String n\xe3o terminada.\n";
        return;
      }
      _this._lexer$_advance$0();
      _this._addToken$2(B.TokenType_30, B.JSString_methods.substring$2(t1, _this._start + 1, _this._lexer$_current - 1));
    },
    _lexer$_match$1(expected) {
      var t2, _this = this,
        t1 = _this._lexer$_current;
      if (t1 >= _this.length)
        return false;
      t2 = _this._lexer$_source;
      if (!(t1 < t2.length))
        return A.ioore(t2, t1);
      if (t2[t1] !== expected)
        return false;
      _this._lexer$_current = t1 + 1;
      return true;
    },
    _lexer$_peekNext$0() {
      var t2,
        t1 = this._lexer$_current + 1;
      if (t1 >= this.length)
        return "\x00";
      t2 = this._lexer$_source;
      if (!(t1 < t2.length))
        return A.ioore(t2, t1);
      return t2[t1];
    },
    _isAlpha$1(c) {
      var t1;
      if (!(B.JSString_methods.compareTo$1(c, "a") >= 0 && B.JSString_methods.compareTo$1(c, "z") <= 0))
        t1 = B.JSString_methods.compareTo$1(c, "A") >= 0 && B.JSString_methods.compareTo$1(c, "Z") <= 0 || c === "_";
      else
        t1 = true;
      return t1;
    },
    _isDigit$1(c) {
      return B.JSString_methods.compareTo$1(c, "0") >= 0 && B.JSString_methods.compareTo$1(c, "9") <= 0;
    },
    _lexer$_advance$0() {
      var char,
        t1 = this._lexer$_source,
        t2 = this._lexer$_current++;
      if (!(t2 < t1.length))
        return A.ioore(t1, t2);
      char = t1[t2];
      ++this._column;
      return char;
    },
    _addToken$2(type, literal) {
      var _this = this;
      B.JSArray_methods.add$1(_this._lexer$_tokens, new A.Token(type, B.JSString_methods.substring$2(_this._lexer$_source, _this._start, _this._lexer$_current), literal, _this._line, _this._tokenStartColumn));
    },
    _addToken$1(type) {
      return this._addToken$2(type, null);
    },
    get$length(receiver) {
      return this.length;
    }
  };
  A.LiPoPlayground.prototype = {
    _setupEventListeners$0() {
      var t2, t3, _this = this,
        t1 = _this.__LiPoPlayground__runButton_A;
      t1 === $ && A.throwLateFieldNI("_runButton");
      t2 = type$._ElementEventStreamImpl_MouseEvent;
      A._EventStreamSubscription$(t1, "click", t2._eval$1("~(1)?")._as(new A.LiPoPlayground__setupEventListeners_closure(_this)), false, t2._precomputed1);
      t2 = _this.__LiPoPlayground__editor_A;
      t2 === $ && A.throwLateFieldNI("_editor");
      t1 = type$._ElementEventStreamImpl_KeyboardEvent;
      A._EventStreamSubscription$(t2, "keydown", t1._eval$1("~(1)?")._as(new A.LiPoPlayground__setupEventListeners_closure0(_this)), false, t1._precomputed1);
      t1 = document;
      t2 = t1.querySelector("#clear-btn");
      if (t2 != null) {
        t2 = J.get$onClick$x(t2);
        t3 = t2.$ti;
        A._EventStreamSubscription$(t2._target, t2._eventType, t3._eval$1("~(1)?")._as(new A.LiPoPlayground__setupEventListeners_closure1(_this)), false, t3._precomputed1);
      }
      t1 = t1.querySelector("#clear-output-btn");
      if (t1 != null) {
        t1 = J.get$onClick$x(t1);
        t2 = t1.$ti;
        A._EventStreamSubscription$(t1._target, t1._eventType, t2._eval$1("~(1)?")._as(new A.LiPoPlayground__setupEventListeners_closure2(_this)), false, t2._precomputed1);
      }
      t1 = type$._ElementEventStreamImpl_Event;
      A._EventStreamSubscription$(_this.__LiPoPlayground__editor_A, "input", t1._eval$1("~(1)?")._as(new A.LiPoPlayground__setupEventListeners_closure3(_this)), false, t1._precomputed1);
    },
    _runCode$0() {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.void),
        $async$returnValue, $async$handler = 2, $async$errorStack = [], $async$next = [], $async$self = this, code, result, e, code0, t2, exception, t1, $async$exception;
      var $async$_runCode$0 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$errorStack.push($async$result);
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.__LiPoPlayground__editor_A;
              t1 === $ && A.throwLateFieldNI("_editor");
              code0 = t1.value;
              code = code0 == null ? "" : code0;
              if (J.trim$0$s(code).length === 0) {
                t1 = $async$self.__LiPoPlayground__output_A;
                t1 === $ && A.throwLateFieldNI("_output");
                B.DivElement_methods.setInnerHtml$1(t1, '<pre class="output-text">AVISO: Por favor, digite algum c\xf3digo LiPo antes de executar.</pre>');
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = $async$self.__LiPoPlayground__status_A;
              t1 === $ && A.throwLateFieldNI("_status");
              B.SpanElement_methods.set$text(t1, "Executando c\xf3digo LiPo...");
              t1 = $async$self.__LiPoPlayground__runButton_A;
              t1 === $ && A.throwLateFieldNI("_runButton");
              t1.disabled = true;
              $async$handler = 4;
              $async$goto = 7;
              return A._asyncAwait(A.Future_Future$delayed(A.Duration$(0, 0, 500), type$.dynamic), $async$_runCode$0);
            case 7:
              // returning from await.
              $async$goto = 8;
              return A._asyncAwait($async$self._compileAndRun$1(code), $async$_runCode$0);
            case 8:
              // returning from await.
              result = $async$result;
              t1 = A._asString(result);
              t2 = $async$self.__LiPoPlayground__output_A;
              t2 === $ && A.throwLateFieldNI("_output");
              B.DivElement_methods.setInnerHtml$1(t2, '<pre class="output-text">' + t1 + "</pre>");
              B.SpanElement_methods.set$text($async$self.__LiPoPlayground__status_A, "Execu\xe7\xe3o do c\xf3digo LiPo conclu\xedda");
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$errorStack.pop();
              e = A.unwrapException($async$exception);
              t1 = A.S(e);
              t2 = $async$self.__LiPoPlayground__output_A;
              t2 === $ && A.throwLateFieldNI("_output");
              B.DivElement_methods.setInnerHtml$1(t2, '<pre class="output-text">' + ("ERRO: Erro durante a execu\xe7\xe3o: " + t1) + "</pre>");
              B.SpanElement_methods.set$text($async$self.__LiPoPlayground__status_A, "Erro na execu\xe7\xe3o do c\xf3digo LiPo");
              $async$next.push(6);
              // goto finally
              $async$goto = 5;
              break;
            case 3:
              // uncaught
              $async$next = [2];
            case 5:
              // finally
              $async$handler = 2;
              $async$self.__LiPoPlayground__runButton_A.disabled = false;
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 6:
              // after finally
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return A._asyncRethrow($async$errorStack.at(-1), $async$completer);
          }
      });
      return A._asyncStartSync($async$_runCode$0, $async$completer);
    },
    _compileAndRun$1(code) {
      return this._compileAndRun$body$LiPoPlayground(code);
    },
    _compileAndRun$body$LiPoPlayground(code) {
      var $async$goto = 0,
        $async$completer = A._makeAsyncAwaitCompleter(type$.String),
        $async$returnValue, $async$self = this, output, errorReporter, lexer, tokens, parser, statements, analyzer, executionResult, e, t1, t2, exception;
      var $async$_compileAndRun$1 = A._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return A._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              try {
                output = new A.StringBuffer("");
                errorReporter = new A.WebErrorReporter(output);
                output._contents += "\ud83d\udd0d Iniciando an\xe1lise l\xe9xica...\n";
                lexer = new A.Lexer(code, errorReporter, A._setArrayType([], type$.JSArray_Token), code.length);
                tokens = lexer.scanTokens$0();
                if (errorReporter._hadError) {
                  t1 = output._contents;
                  $async$returnValue = t1.charCodeAt(0) == 0 ? t1 : t1;
                  // goto return
                  $async$goto = 1;
                  break;
                }
                output._contents += "\u2705 An\xe1lise l\xe9xica conclu\xedda com sucesso!\n";
                output._contents += "\ud83d\udd0d Iniciando an\xe1lise sint\xe1tica...\n";
                parser = new A.Parser(tokens, errorReporter);
                statements = parser.parse$0();
                if (errorReporter._hadError) {
                  t1 = output._contents;
                  $async$returnValue = t1.charCodeAt(0) == 0 ? t1 : t1;
                  // goto return
                  $async$goto = 1;
                  break;
                }
                output._contents += "\u2705 An\xe1lise sint\xe1tica conclu\xedda com sucesso!\n";
                output._contents += "\ud83d\udd0d Iniciando an\xe1lise sem\xe2ntica...\n";
                t1 = type$.String;
                t2 = new A.StandardLibrary(A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.NativeFunction));
                t2._registerMathLibrary$0();
                t2._registerStringLibrary$0();
                t2._registerIOLibrary$0();
                t2._registerDataLibrary$0();
                t2._registerTypeLibrary$0();
                analyzer = new A.SemanticAnalyzer(errorReporter, new A.SymbolTable(null, A.LinkedHashMap_LinkedHashMap$_empty(t1, type$.Symbol)), t2, A.LinkedHashSet_LinkedHashSet$_empty(t1), A.LinkedHashMap_LinkedHashMap$_empty(t1, t1));
                analyzer.analyze$1(statements);
                if (errorReporter._hadError) {
                  t1 = output._contents;
                  $async$returnValue = t1.charCodeAt(0) == 0 ? t1 : t1;
                  // goto return
                  $async$goto = 1;
                  break;
                }
                output._contents += "\u2705 An\xe1lise sem\xe2ntica conclu\xedda com sucesso!\n";
                output._contents += "\n";
                output._contents += "\ud83d\ude80 EXECUTANDO C\xd3DIGO LIPO:\n";
                t1 = output;
                t2 = B.JSString_methods.$mul("=", 40) + "\n";
                t1._contents += t2;
                executionResult = $async$self._simulateExecution$2(code, statements);
                t2 = output;
                t1 = A.S(executionResult);
                t2._contents += t1;
                t1 = output;
                t2 = B.JSString_methods.$mul("=", 40) + "\n";
                t1._contents += t2;
                output._contents += "\u2705 Execu\xe7\xe3o conclu\xedda com sucesso!\n";
                t2 = output._contents;
                $async$returnValue = t2.charCodeAt(0) == 0 ? t2 : t2;
                // goto return
                $async$goto = 1;
                break;
              } catch (exception) {
                e = A.unwrapException(exception);
                t1 = A.S(e);
                $async$returnValue = "ERRO: Erro de compila\xe7\xe3o do c\xf3digo LiPo: " + t1;
                // goto return
                $async$goto = 1;
                break;
              }
            case 1:
              // return
              return A._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return A._asyncStartSync($async$_compileAndRun$1, $async$completer);
    },
    _simulateExecution$2(code, statements) {
      var t2, match, t3, t4, t5, lines, _i, trimmedLine, t6, $content, parts, result, _i0, part, t7,
        output = new A.StringBuffer(""),
        t1 = type$.String,
        variables = A.LinkedHashMap_LinkedHashMap$_empty(t1, t1),
        varRegex = A.RegExp_RegExp('var\\s+(\\w+)\\s*=\\s*"([^"]+)"');
      t1 = new A._AllMatchesIterator(varRegex, code, 0);
      t2 = type$.RegExpMatch;
      for (; t1.moveNext$0();) {
        match = t1.__js_helper$_current;
        t3 = (match == null ? t2._as(match) : match).__js_helper$_match;
        t4 = t3.length;
        if (1 >= t4)
          return A.ioore(t3, 1);
        t5 = t3[1];
        t5.toString;
        if (2 >= t4)
          return A.ioore(t3, 2);
        t3 = t3[2];
        t3.toString;
        variables.$indexSet(0, t5, t3);
      }
      lines = code.split("\n");
      for (t1 = lines.length, t2 = type$.JSArray_String, t3 = type$.String_Function_String, t4 = type$.MappedListIterable_String_String, t5 = t4._eval$1("ListIterable.E"), _i = 0; _i < lines.length; lines.length === t1 || (0, A.throwConcurrentModificationError)(lines), ++_i) {
        trimmedLine = B.JSString_methods.trim$0(lines[_i]);
        if (A.stringContainsUnchecked(trimmedLine, "saida.imprimir(", 0)) {
          match = A.RegExp_RegExp("saida\\.imprimir\\((.+)\\)").firstMatch$1(trimmedLine);
          if (match != null) {
            t6 = match.__js_helper$_match;
            if (1 >= t6.length)
              return A.ioore(t6, 1);
            t6 = t6[1];
            t6.toString;
            $content = B.JSString_methods.trim$0(t6);
            if (B.JSString_methods.startsWith$1($content, '"') && B.JSString_methods.endsWith$1($content, '"'))
              output._contents += B.JSString_methods.substring$2($content, 1, $content.length - 1) + "\n";
            else if (A.stringContainsUnchecked($content, "+", 0)) {
              parts = A.List_List$_of(new A.MappedListIterable(A._setArrayType($content.split("+"), t2), t3._as(new A.LiPoPlayground__simulateExecution_closure()), t4), t5);
              for (t6 = parts.length, result = "", _i0 = 0; _i0 < parts.length; parts.length === t6 || (0, A.throwConcurrentModificationError)(parts), ++_i0) {
                part = parts[_i0];
                if (B.JSString_methods.startsWith$1(part, '"') && B.JSString_methods.endsWith$1(part, '"'))
                  result += B.JSString_methods.substring$2(part, 1, part.length - 1);
                else if (variables.containsKey$1(part)) {
                  t7 = variables.$index(0, part);
                  t7.toString;
                  result += t7;
                } else
                  result += part;
              }
              output._contents += result + "\n";
            } else if (variables.containsKey$1($content)) {
              t6 = variables.$index(0, $content);
              t6.toString;
              output._contents += t6 + "\n";
            } else
              output._contents += $content + "\n";
          }
        }
      }
      t1 = output._contents;
      if (t1.length === 0)
        t1 = output._contents = t1 + "(C\xf3digo executado sem sa\xedda de texto)\n";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _updateStats$0() {
      var code, lines, t2,
        t1 = this.__LiPoPlayground__editor_A;
      t1 === $ && A.throwLateFieldNI("_editor");
      code = t1.value;
      if (code == null)
        code = "";
      lines = code.split("\n").length;
      t1 = document;
      t2 = t1.querySelector("#lines-count");
      if (t2 != null)
        J.set$text$x(t2, "Linhas: " + lines);
      t1 = t1.querySelector("#chars-count");
      if (t1 != null)
        J.set$text$x(t1, "Caracteres: " + code.length);
    }
  };
  A.LiPoPlayground__setupEventListeners_closure.prototype = {
    call$1(__wc0_formal) {
      type$.MouseEvent._as(__wc0_formal);
      return this.$this._runCode$0();
    },
    $signature: 7
  };
  A.LiPoPlayground__setupEventListeners_closure0.prototype = {
    call$1($event) {
      var t1;
      type$.KeyboardEvent._as($event);
      t1 = $event.ctrlKey;
      t1.toString;
      if (t1) {
        t1 = $event.keyCode;
        t1.toString;
        t1 = t1 === 13;
      } else
        t1 = false;
      if (t1) {
        $event.preventDefault();
        this.$this._runCode$0();
      }
    },
    $signature: 30
  };
  A.LiPoPlayground__setupEventListeners_closure1.prototype = {
    call$1(__wc1_formal) {
      var t1, t2;
      type$.MouseEvent._as(__wc1_formal);
      t1 = this.$this;
      t2 = t1.__LiPoPlayground__editor_A;
      t2 === $ && A.throwLateFieldNI("_editor");
      B.TextAreaElement_methods.set$value(t2, "");
      t1._updateStats$0();
      t1 = t1.__LiPoPlayground__status_A;
      t1 === $ && A.throwLateFieldNI("_status");
      B.SpanElement_methods.set$text(t1, "Editor limpo");
      return null;
    },
    $signature: 7
  };
  A.LiPoPlayground__setupEventListeners_closure2.prototype = {
    call$1(__wc2_formal) {
      var t1;
      type$.MouseEvent._as(__wc2_formal);
      t1 = this.$this.__LiPoPlayground__output_A;
      t1 === $ && A.throwLateFieldNI("_output");
      B.DivElement_methods.setInnerHtml$1(t1, '      <div class="welcome-message">\n        <h4>Sa\xedda limpa</h4>\n        <p>Execute seu c\xf3digo LiPo para ver o resultado aqui.</p>\n      </div>\n    ');
      return null;
    },
    $signature: 7
  };
  A.LiPoPlayground__setupEventListeners_closure3.prototype = {
    call$1(__wc3_formal) {
      return this.$this._updateStats$0();
    },
    $signature: 13
  };
  A.LiPoPlayground__simulateExecution_closure.prototype = {
    call$1(p) {
      return B.JSString_methods.trim$0(A._asString(p));
    },
    $signature: 16
  };
  A.WebErrorReporter.prototype = {};
  A.Parser.prototype = {
    parse$0() {
      var t2,
        statements = A._setArrayType([], type$.JSArray_Stmt),
        t1 = this._tokens;
      while (true) {
        t2 = this._parser$_current;
        if (!(t2 < t1.length))
          return A.ioore(t1, t2);
        if (!(t1[t2].type !== B.TokenType_63))
          break;
        B.JSArray_methods.add$1(statements, this._declaration$0());
      }
      return statements;
    },
    _declaration$0() {
      var t1, t2, type, $name, initializer, exception, _this = this;
      try {
        t1 = type$.JSArray_TokenType;
        if (_this._match$1(A._setArrayType([B.TokenType_42], t1))) {
          t1 = _this._varDeclaration$0();
          return t1;
        }
        if (_this._match$1(A._setArrayType([B.TokenType_59], t1))) {
          t1 = _this._tokens;
          t2 = _this._parser$_current;
          if (!(t2 < t1.length))
            return A.ioore(t1, t2);
          if (_this._isTypeToken$1(t1[t2]))
            type = new A.TypeInfo(_this._advance$0());
          else {
            t2 = _this._parser$_current;
            if (!(t2 < t1.length))
              return A.ioore(t1, t2);
            t2 = t1[t2].type;
            if (t2 !== B.TokenType_63 && t2 === B.TokenType_42)
              _this._advance$0();
            else
              A.throwExpression(_this._error$2(_this._peek$0(), "Esperado tipo ou 'var' ap\xf3s 'constante'."));
            type = null;
          }
          $name = _this._consume$2(B.TokenType_29, "Esperado nome da constante.");
          _this._consume$2(B.TokenType_18, "Constantes devem ser inicializadas. Esperado '='.");
          initializer = _this._assignment$0();
          if (type == null)
            type = _this._inferTypeFromExpression$1(initializer);
          _this._consume$2(B.TokenType_11, "Esperado ';' ap\xf3s a declara\xe7\xe3o da constante.");
          return new A.ConstDeclStmt(type, $name, initializer);
        }
        t1 = _this._tokens;
        t2 = _this._parser$_current;
        if (!(t2 < t1.length))
          return A.ioore(t1, t2);
        if (_this._isTypeToken$1(t1[t2]) && _this._parser$_current + 1 < t1.length && _this._peekNext$0().type === B.TokenType_29 && _this._parser$_current + 2 < t1.length && _this._peekNextNext$0().type === B.TokenType_0) {
          t1 = _this._functionDeclaration$0();
          return t1;
        }
        t2 = _this._parser$_current;
        if (!(t2 < t1.length))
          return A.ioore(t1, t2);
        if (_this._isTypeToken$1(t1[t2]) && _this._parser$_current + 1 < t1.length && _this._peekNext$0().type === B.TokenType_29) {
          t1 = _this._typedVarDeclaration$0();
          return t1;
        }
        t1 = _this._statement$0();
        return t1;
      } catch (exception) {
        if (A.unwrapException(exception) instanceof A.ParseError) {
          _this._synchronize$0();
          return new A.ExpressionStmt(new A.LiteralExpr(null));
        } else
          throw exception;
      }
    },
    _varDeclaration$0() {
      var _this = this,
        $name = _this._consume$2(B.TokenType_29, "Esperado nome da vari\xe1vel."),
        initializer = _this._match$1(A._setArrayType([B.TokenType_18], type$.JSArray_TokenType)) ? _this._assignment$0() : null;
      _this._consume$2(B.TokenType_11, "Esperado ';' ap\xf3s a declara\xe7\xe3o da vari\xe1vel.");
      return new A.VarDeclStmt($name, initializer);
    },
    _typedVarDeclaration$0() {
      var _this = this,
        typeToken = _this._advance$0(),
        $name = _this._consume$2(B.TokenType_29, "Esperado nome da vari\xe1vel ap\xf3s tipo."),
        initializer = _this._match$1(A._setArrayType([B.TokenType_18], type$.JSArray_TokenType)) ? _this._assignment$0() : null;
      _this._consume$2(B.TokenType_11, "Esperado ';' ap\xf3s a declara\xe7\xe3o da vari\xe1vel tipada.");
      return new A.TypedVarDeclStmt(new A.TypeInfo(typeToken), $name, initializer);
    },
    _statement$0() {
      var t2, t3, library, alias, condition, thenBranch, value, body, t4, keyword, _this = this,
        _s29_ = "Esperado '(' ap\xf3s 'enquanto'.",
        _s43_ = "Esperado ')' ap\xf3s a condi\xe7\xe3o do 'enquanto'.",
        t1 = type$.JSArray_TokenType;
      if (_this._match$1(A._setArrayType([B.TokenType_60], t1))) {
        t2 = _this._tokens;
        t3 = _this._parser$_current - 1;
        if (!(t3 >= 0 && t3 < t2.length))
          return A.ioore(t2, t3);
        library = _this._consume$2(B.TokenType_29, "Esperado nome da biblioteca ap\xf3s 'importar'.");
        alias = _this._match$1(A._setArrayType([B.TokenType_61], t1)) ? _this._consume$2(B.TokenType_29, "Esperado nome do alias ap\xf3s 'como'.") : null;
        _this._consume$2(B.TokenType_11, "Esperado ';' ap\xf3s declara\xe7\xe3o de import.");
        return new A.ImportStmt(library, alias);
      }
      if (_this._match$1(A._setArrayType([B.TokenType_36], t1))) {
        _this._consume$2(B.TokenType_0, "Esperado '(' ap\xf3s 'se'.");
        condition = _this._assignment$0();
        _this._consume$2(B.TokenType_1, "Esperado ')' ap\xf3s a condi\xe7\xe3o do 'se'.");
        thenBranch = _this._statement$0();
        return new A.IfStmt(condition, thenBranch, _this._match$1(A._setArrayType([B.TokenType_33], t1)) ? _this._statement$0() : null);
      }
      if (_this._match$1(A._setArrayType([B.TokenType_39], t1))) {
        value = _this._assignment$0();
        _this._consume$2(B.TokenType_11, "Esperado ';' ap\xf3s o valor.");
        return new A.PrintStmt(value);
      }
      if (_this._match$1(A._setArrayType([B.TokenType_43], t1))) {
        _this._consume$2(B.TokenType_0, _s29_);
        condition = _this._assignment$0();
        _this._consume$2(B.TokenType_1, _s43_);
        return new A.WhileStmt(condition, _this._statement$0());
      }
      if (_this._match$1(A._setArrayType([B.TokenType_50], t1))) {
        body = _this._statement$0();
        _this._consume$2(B.TokenType_43, "Esperado 'enquanto' ap\xf3s o corpo do loop 'faca'.");
        _this._consume$2(B.TokenType_0, _s29_);
        condition = _this._assignment$0();
        _this._consume$2(B.TokenType_1, _s43_);
        _this._consume$2(B.TokenType_11, "Esperado ';' ap\xf3s o loop 'faca...enquanto'.");
        return new A.DoWhileStmt(body, condition);
      }
      if (_this._match$1(A._setArrayType([B.TokenType_35], t1))) {
        t1 = _this._tokens;
        t2 = _this._parser$_current;
        if (!(t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2].type;
        if (t2 !== B.TokenType_63 && t2 === B.TokenType_0)
          return _this._forCStatement$0();
        else
          return _this._forStatement$0();
      }
      if (_this._match$1(A._setArrayType([B.TokenType_40], t1))) {
        t1 = _this._tokens;
        t2 = _this._parser$_current;
        t3 = t2 - 1;
        t4 = t1.length;
        if (!(t3 >= 0 && t3 < t4))
          return A.ioore(t1, t3);
        keyword = t1[t3];
        if (!(t2 < t4))
          return A.ioore(t1, t2);
        t1 = t1[t2].type;
        value = !(t1 !== B.TokenType_63 && t1 === B.TokenType_11) ? _this._assignment$0() : null;
        _this._consume$2(B.TokenType_11, "Esperado ';' ap\xf3s valor de retorno.");
        return new A.ReturnStmt(keyword, value);
      }
      if (_this._match$1(A._setArrayType([B.TokenType_44], t1))) {
        t1 = _this._tokens;
        t2 = _this._parser$_current - 1;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        keyword = t1[t2];
        _this._consume$2(B.TokenType_11, "Esperado ';' ap\xf3s 'parar'.");
        return new A.BreakStmt(keyword);
      }
      if (_this._match$1(A._setArrayType([B.TokenType_45], t1))) {
        t1 = _this._tokens;
        t2 = _this._parser$_current - 1;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        keyword = t1[t2];
        _this._consume$2(B.TokenType_11, "Esperado ';' ap\xf3s 'continuar'.");
        return new A.ContinueStmt(keyword);
      }
      if (_this._match$1(A._setArrayType([B.TokenType_46], t1)))
        return _this._switchStatement$0();
      if (_this._match$1(A._setArrayType([B.TokenType_2], t1)))
        return new A.BlockStmt(_this._block$0());
      return _this._expressionStatement$0();
    },
    _forStatement$0() {
      var variable, initializer, condition, step, _this = this,
        t1 = _this._tokens,
        t2 = _this._parser$_current;
      if (!(t2 < t1.length))
        return A.ioore(t1, t2);
      t2 = t1[t2].type;
      if (t2 !== B.TokenType_63 && t2 === B.TokenType_0)
        return _this._forCStatement$0();
      variable = _this._consume$2(B.TokenType_29, "Esperado nome da vari\xe1vel ap\xf3s 'para'.");
      _this._consume$2(B.TokenType_18, "Esperado '=' ap\xf3s o nome da vari\xe1vel.");
      initializer = _this._assignment$0();
      _this._consume$2(B.TokenType_49, "Esperado 'ate' ap\xf3s o valor inicial.");
      condition = _this._assignment$0();
      t1 = type$.JSArray_TokenType;
      if (_this._match$1(A._setArrayType([B.TokenType_51], t1))) {
        step = _this._assignment$0();
        _this._consume$2(B.TokenType_50, "Esperado 'faca' ap\xf3s o valor de incremento.");
        return new A.ForStepStmt(variable, initializer, condition, step, _this._statement$0());
      } else if (_this._match$1(A._setArrayType([B.TokenType_52], t1))) {
        step = _this._assignment$0();
        _this._consume$2(B.TokenType_50, "Esperado 'faca' ap\xf3s o valor de decremento.");
        return new A.ForStepStmt(variable, initializer, condition, step, _this._statement$0());
      } else {
        _this._consume$2(B.TokenType_50, "Esperado 'faca' ap\xf3s o valor final.");
        return new A.ForStmt(variable, initializer, condition, _this._statement$0());
      }
    },
    _forCStatement$0() {
      var t1, initializer, t2, condition, increment, _this = this;
      _this._consume$2(B.TokenType_0, "Esperado '(' ap\xf3s 'para'.");
      t1 = type$.JSArray_TokenType;
      if (_this._match$1(A._setArrayType([B.TokenType_11], t1)))
        initializer = null;
      else if (_this._match$1(A._setArrayType([B.TokenType_42], t1)))
        initializer = _this._varDeclaration$0();
      else {
        t1 = _this._tokens;
        t2 = _this._parser$_current;
        if (!(t2 < t1.length))
          return A.ioore(t1, t2);
        initializer = _this._isTypeToken$1(t1[t2]) ? _this._typedVarDeclaration$0() : _this._expressionStatement$0();
      }
      t1 = _this._tokens;
      t2 = _this._parser$_current;
      if (!(t2 < t1.length))
        return A.ioore(t1, t2);
      t2 = t1[t2].type;
      condition = !(t2 !== B.TokenType_63 && t2 === B.TokenType_11) ? _this._assignment$0() : null;
      _this._consume$2(B.TokenType_11, "Esperado ';' ap\xf3s condi\xe7\xe3o do for.");
      t2 = _this._parser$_current;
      if (!(t2 < t1.length))
        return A.ioore(t1, t2);
      t2 = t1[t2].type;
      increment = !(t2 !== B.TokenType_63 && t2 === B.TokenType_1) ? _this._assignment$0() : null;
      _this._consume$2(B.TokenType_1, "Esperado ')' ap\xf3s incremento do for.");
      return new A.ForCStmt(initializer, condition, increment, _this._statement$0());
    },
    _block$0() {
      var t2, t3, _this = this,
        statements = A._setArrayType([], type$.JSArray_Stmt),
        t1 = _this._tokens;
      while (true) {
        t2 = _this._parser$_current;
        if (!(t2 < t1.length))
          return A.ioore(t1, t2);
        t2 = t1[t2].type;
        t3 = t2 !== B.TokenType_63;
        if (!(!(t3 && t2 === B.TokenType_3) && t3))
          break;
        B.JSArray_methods.add$1(statements, _this._declaration$0());
      }
      _this._consume$2(B.TokenType_3, "Esperado '}' ap\xf3s o bloco.");
      return statements;
    },
    _expressionStatement$0() {
      var expr = this._assignment$0();
      this._consume$2(B.TokenType_11, "Esperado ';' ap\xf3s a express\xe3o.");
      return new A.ExpressionStmt(expr);
    },
    _assignment$0() {
      var t2, equals, value, operator, _this = this,
        expr = _this._ternary$0(),
        t1 = type$.JSArray_TokenType;
      if (_this._match$1(A._setArrayType([B.TokenType_18], t1))) {
        t1 = _this._tokens;
        t2 = _this._parser$_current - 1;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        equals = t1[t2];
        value = _this._assignment$0();
        if (expr instanceof A.VariableExpr)
          return new A.AssignExpr(expr.name, value);
        t1 = _this._parser$_errorReporter;
        t1.super$ErrorReporter$error(0, equals.line, "Alvo de atribui\xe7\xe3o inv\xe1lido.");
        t1.output._contents += "ERRO: Alvo de atribui\xe7\xe3o inv\xe1lido.\n";
      } else if (_this._match$1(A._setArrayType([B.TokenType_20, B.TokenType_21, B.TokenType_22, B.TokenType_23, B.TokenType_24], t1))) {
        t1 = _this._tokens;
        t2 = _this._parser$_current - 1;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        operator = t1[t2];
        value = _this._assignment$0();
        if (expr instanceof A.VariableExpr)
          return new A.CompoundAssignExpr(expr.name, operator, value);
        t1 = _this._parser$_errorReporter;
        t1.super$ErrorReporter$error(0, operator.line, "Alvo de atribui\xe7\xe3o composta inv\xe1lido.");
        t1.output._contents += "ERRO: Alvo de atribui\xe7\xe3o composta inv\xe1lido.\n";
      }
      return expr;
    },
    _ternary$0() {
      var thenBranch, _this = this,
        t1 = type$.JSArray_TokenType,
        expr = _this._binary$2$next$types(_this.get$_and(), A._setArrayType([B.TokenType_38], t1));
      if (_this._match$1(A._setArrayType([B.TokenType_14], t1))) {
        thenBranch = _this._assignment$0();
        _this._consume$2(B.TokenType_15, "Esperado ':' ap\xf3s express\xe3o verdadeira do operador tern\xe1rio.");
        return new A.TernaryExpr(expr, thenBranch, _this._ternary$0());
      }
      return expr;
    },
    _and$0() {
      return this._binary$2$next$types(this.get$_equality(), A._setArrayType([B.TokenType_32], type$.JSArray_TokenType));
    },
    _equality$0() {
      return this._binary$2$next$types(this.get$_comparison(), A._setArrayType([B.TokenType_17, B.TokenType_19], type$.JSArray_TokenType));
    },
    _comparison$0() {
      return this._binary$2$next$types(this.get$_term(), A._setArrayType([B.TokenType_25, B.TokenType_26, B.TokenType_27, B.TokenType_28], type$.JSArray_TokenType));
    },
    _term$0() {
      return this._binary$2$next$types(this.get$_factor(), A._setArrayType([B.TokenType_6, B.TokenType_7], type$.JSArray_TokenType));
    },
    _factor$0() {
      return this._binary$2$next$types(this.get$_unary(), A._setArrayType([B.TokenType_12, B.TokenType_13, B.TokenType_10], type$.JSArray_TokenType));
    },
    _unary$0() {
      var t2, expr, _this = this,
        t1 = type$.JSArray_TokenType;
      if (_this._match$1(A._setArrayType([B.TokenType_16, B.TokenType_6, B.TokenType_62], t1))) {
        t1 = _this._tokens;
        t2 = _this._parser$_current - 1;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        return new A.UnaryExpr(_this._unary$0());
      }
      if (_this._match$1(A._setArrayType([B.TokenType_9], t1))) {
        expr = _this._call$0();
        if (expr instanceof A.VariableExpr)
          return new A.DecrementExpr(expr.name);
        else
          throw A.wrapException(_this._error$2(_this._parser$_previous$0(), string$.Operadx2d));
      }
      if (_this._match$1(A._setArrayType([B.TokenType_8], t1))) {
        expr = _this._call$0();
        if (expr instanceof A.VariableExpr)
          return new A.IncrementExpr(expr.name);
        else
          throw A.wrapException(_this._error$2(_this._parser$_previous$0(), string$.Operadx2b));
      }
      return _this._call$0();
    },
    _call$0() {
      var t1, t2, t3, _this = this,
        expr = _this._parser$_primary$0();
      for (t1 = type$.JSArray_TokenType, t2 = _this._tokens; true;)
        if (_this._match$1(A._setArrayType([B.TokenType_0], t1)))
          expr = _this._finishCall$1(expr);
        else if (_this._match$1(A._setArrayType([B.TokenType_5], t1))) {
          t3 = _this._parser$_current - 1;
          if (!(t3 >= 0 && t3 < t2.length))
            return A.ioore(t2, t3);
          _this._consume$2(B.TokenType_29, "Esperado nome da propriedade ap\xf3s '.'.");
          expr = new A.MemberAccessExpr(expr);
        } else if (_this._match$1(A._setArrayType([B.TokenType_8], t1)))
          if (expr instanceof A.VariableExpr)
            expr = new A.IncrementExpr(expr.name);
          else
            throw A.wrapException(_this._error$2(_this._parser$_previous$0(), string$.Operadx2b));
        else if (_this._match$1(A._setArrayType([B.TokenType_9], t1)))
          if (expr instanceof A.VariableExpr)
            expr = new A.DecrementExpr(expr.name);
          else
            throw A.wrapException(_this._error$2(_this._parser$_previous$0(), string$.Operadx2d));
        else
          break;
      return expr;
    },
    _parser$_primary$0() {
      var t2, expr, _this = this,
        t1 = type$.JSArray_TokenType;
      if (_this._match$1(A._setArrayType([B.TokenType_34], t1)))
        return new A.LiteralExpr(false);
      if (_this._match$1(A._setArrayType([B.TokenType_41], t1)))
        return new A.LiteralExpr(true);
      if (_this._match$1(A._setArrayType([B.TokenType_37], t1)))
        return new A.LiteralExpr(null);
      if (_this._match$1(A._setArrayType([B.TokenType_31, B.TokenType_30], t1))) {
        t1 = _this._tokens;
        t2 = _this._parser$_current - 1;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        return new A.LiteralExpr(t1[t2].literal);
      }
      if (_this._match$1(A._setArrayType([B.TokenType_29], t1))) {
        t1 = _this._tokens;
        t2 = _this._parser$_current - 1;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        return new A.VariableExpr(t1[t2]);
      }
      if (_this._match$1(A._setArrayType([B.TokenType_0], t1))) {
        expr = _this._assignment$0();
        _this._consume$2(B.TokenType_1, "Esperado ')' ap\xf3s a express\xe3o.");
        return new A.GroupingExpr(expr);
      }
      throw A.wrapException(_this._error$2(_this._peek$0(), "Express\xe3o esperada."));
    },
    _binary$2$next$types(next, types) {
      var expr, t1, t2;
      type$.Expr_Function._as(next);
      type$.List_TokenType._as(types);
      expr = next.call$0();
      for (t1 = this._tokens; this._match$1(types);) {
        t2 = this._parser$_current - 1;
        if (!(t2 >= 0 && t2 < t1.length))
          return A.ioore(t1, t2);
        expr = new A.BinaryExpr(expr, t1[t2], next.call$0());
      }
      return expr;
    },
    _isTypeToken$1(token) {
      var t1 = token.type;
      return t1 === B.TokenType_54 || t1 === B.TokenType_55 || t1 === B.TokenType_56 || t1 === B.TokenType_57 || t1 === B.TokenType_58;
    },
    _peekNext$0() {
      var t1 = this._parser$_current + 1,
        t2 = this._tokens;
      if (t1 >= t2.length)
        return B.JSArray_methods.get$last(t2);
      return t2[t1];
    },
    _peekNextNext$0() {
      var t1 = this._parser$_current + 2,
        t2 = this._tokens;
      if (t1 >= t2.length)
        return B.JSArray_methods.get$last(t2);
      return t2[t1];
    },
    _functionDeclaration$0() {
      var parameters, t1, t2, t3, _this = this,
        returnTypeToken = _this._advance$0(),
        $name = _this._consume$2(B.TokenType_29, "Esperado nome da fun\xe7\xe3o.");
      _this._consume$2(B.TokenType_0, "Esperado '(' ap\xf3s nome da fun\xe7\xe3o.");
      parameters = A._setArrayType([], type$.JSArray_Parameter);
      t1 = _this._tokens;
      t2 = _this._parser$_current;
      if (!(t2 < t1.length))
        return A.ioore(t1, t2);
      t2 = t1[t2].type;
      if (!(t2 !== B.TokenType_63 && t2 === B.TokenType_1)) {
        t2 = type$.JSArray_TokenType;
        do {
          t3 = _this._parser$_current;
          if (!(t3 < t1.length))
            return A.ioore(t1, t3);
          if (!_this._isTypeToken$1(t1[t3]))
            throw A.wrapException(_this._error$2(_this._peek$0(), "Esperado tipo do par\xe2metro."));
          B.JSArray_methods.add$1(parameters, new A.Parameter(new A.TypeInfo(_this._advance$0()), _this._consume$2(B.TokenType_29, "Esperado nome do par\xe2metro.")));
        } while (_this._match$1(A._setArrayType([B.TokenType_4], t2)));
      }
      _this._consume$2(B.TokenType_1, "Esperado ')' ap\xf3s par\xe2metros.");
      _this._consume$2(B.TokenType_2, "Esperado '{' antes do corpo da fun\xe7\xe3o.");
      return new A.FunctionStmt(new A.TypeInfo(returnTypeToken), $name, parameters, new A.BlockStmt(_this._block$0()));
    },
    _switchStatement$0() {
      var expression, cases, t3, t4, t5, caseKeyword, value, statements, t6, defaultKeyword, _this = this,
        t1 = _this._tokens,
        t2 = _this._parser$_current - 1;
      if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
      _this._consume$2(B.TokenType_0, "Esperado '(' ap\xf3s 'escolha'.");
      expression = _this._assignment$0();
      _this._consume$2(B.TokenType_1, "Esperado ')' ap\xf3s express\xe3o do switch.");
      _this._consume$2(B.TokenType_2, "Esperado '{' ap\xf3s express\xe3o do switch.");
      cases = A._setArrayType([], type$.JSArray_CaseStmt);
      t2 = type$.JSArray_Stmt;
      t3 = type$.JSArray_TokenType;
      while (true) {
        t4 = _this._parser$_current;
        if (!(t4 < t1.length))
          return A.ioore(t1, t4);
        t4 = t1[t4].type;
        t5 = t4 !== B.TokenType_63;
        if (!(!(t5 && t4 === B.TokenType_3) && t5))
          break;
        if (_this._match$1(A._setArrayType([B.TokenType_47], t3))) {
          t4 = _this._parser$_current - 1;
          if (!(t4 >= 0 && t4 < t1.length))
            return A.ioore(t1, t4);
          caseKeyword = t1[t4];
          value = _this._assignment$0();
          _this._consume$2(B.TokenType_15, "Esperado ':' ap\xf3s valor do caso.");
          statements = A._setArrayType([], t2);
          while (true) {
            t4 = _this._parser$_current;
            if (!(t4 < t1.length))
              return A.ioore(t1, t4);
            t4 = t1[t4].type;
            t5 = t4 !== B.TokenType_63;
            t6 = false;
            if (!(t5 && t4 === B.TokenType_47))
              if (!(t5 && t4 === B.TokenType_48))
                t4 = !(t5 && t4 === B.TokenType_3) && t5;
              else
                t4 = t6;
            else
              t4 = t6;
            if (!t4)
              break;
            B.JSArray_methods.add$1(statements, _this._statement$0());
          }
          B.JSArray_methods.add$1(cases, new A.CaseStmt(caseKeyword, value, statements));
        } else if (_this._match$1(A._setArrayType([B.TokenType_48], t3))) {
          t4 = _this._parser$_current - 1;
          if (!(t4 >= 0 && t4 < t1.length))
            return A.ioore(t1, t4);
          defaultKeyword = t1[t4];
          _this._consume$2(B.TokenType_15, "Esperado ':' ap\xf3s 'contrario'.");
          statements = A._setArrayType([], t2);
          while (true) {
            t4 = _this._parser$_current;
            if (!(t4 < t1.length))
              return A.ioore(t1, t4);
            t4 = t1[t4].type;
            t5 = t4 !== B.TokenType_63;
            t6 = false;
            if (!(t5 && t4 === B.TokenType_47))
              if (!(t5 && t4 === B.TokenType_48))
                t4 = !(t5 && t4 === B.TokenType_3) && t5;
              else
                t4 = t6;
            else
              t4 = t6;
            if (!t4)
              break;
            B.JSArray_methods.add$1(statements, _this._statement$0());
          }
          B.JSArray_methods.add$1(cases, new A.CaseStmt(defaultKeyword, null, statements));
        } else
          throw A.wrapException(_this._error$2(_this._peek$0(), "Esperado 'caso' ou 'contrario' dentro do switch."));
      }
      _this._consume$2(B.TokenType_3, "Esperado '}' ap\xf3s casos do switch.");
      return new A.SwitchStmt(expression, cases);
    },
    _finishCall$1(callee) {
      var _this = this,
        $arguments = A._setArrayType([], type$.JSArray_Expr),
        t1 = _this._tokens,
        t2 = _this._parser$_current;
      if (!(t2 < t1.length))
        return A.ioore(t1, t2);
      t2 = t1[t2].type;
      if (!(t2 !== B.TokenType_63 && t2 === B.TokenType_1)) {
        t1 = type$.JSArray_TokenType;
        do
          B.JSArray_methods.add$1($arguments, _this._assignment$0());
        while (_this._match$1(A._setArrayType([B.TokenType_4], t1)));
      }
      _this._consume$2(B.TokenType_1, "Esperado ')' ap\xf3s argumentos.");
      return new A.CallExpr(callee, $arguments);
    },
    _match$1(types) {
      var t1, t2, t3, t4, _i, type, t5, t6, _this = this;
      type$.List_TokenType._as(types);
      for (t1 = types.length, t2 = _this._tokens, t3 = _this._parser$_current, t4 = t2.length, _i = 0; _i < t1; ++_i) {
        type = types[_i];
        if (!(t3 < t4))
          return A.ioore(t2, t3);
        t5 = t2[t3].type;
        t6 = t5 !== B.TokenType_63;
        if (t6 && t5 === type) {
          if (t6)
            _this._parser$_current = t3 + 1;
          t1 = _this._parser$_current - 1;
          if (!(t1 >= 0 && t1 < t2.length))
            return A.ioore(t2, t1);
          return true;
        }
      }
      return false;
    },
    _consume$2(type, message) {
      var _this = this,
        t1 = _this._tokens,
        t2 = _this._parser$_current;
      if (!(t2 < t1.length))
        return A.ioore(t1, t2);
      t2 = t1[t2].type;
      if (t2 !== B.TokenType_63 && t2 === type)
        return _this._advance$0();
      throw A.wrapException(_this._error$2(_this._peek$0(), message));
    },
    _advance$0() {
      var t1 = this._tokens,
        t2 = this._parser$_current,
        t3 = t1.length;
      if (!(t2 < t3))
        return A.ioore(t1, t2);
      t2 = (t1[t2].type !== B.TokenType_63 ? this._parser$_current = t2 + 1 : t2) - 1;
      if (!(t2 >= 0 && t2 < t3))
        return A.ioore(t1, t2);
      return t1[t2];
    },
    _peek$0() {
      var t1 = this._tokens,
        t2 = this._parser$_current;
      if (!(t2 < t1.length))
        return A.ioore(t1, t2);
      return t1[t2];
    },
    _parser$_previous$0() {
      var t1 = this._tokens,
        t2 = this._parser$_current - 1;
      if (!(t2 >= 0 && t2 < t1.length))
        return A.ioore(t1, t2);
      return t1[t2];
    },
    _error$2(token, message) {
      var t1 = this._parser$_errorReporter;
      t1.super$ErrorReporter$error(0, token.line, message);
      t1.output._contents += "ERRO: " + message + "\n";
      return new A.ParseError();
    },
    _inferTypeFromExpression$1(expr) {
      var value, t1, t2, t3, t4, _this = this, _null = null;
      if (expr instanceof A.LiteralExpr) {
        value = expr.value;
        if (typeof value == "number") {
          t1 = B.JSNumber_methods.toInt$0(value);
          t2 = _this._tokens;
          t3 = _this._parser$_current;
          t4 = t2.length;
          if (value === t1) {
            if (!(t3 < t4))
              return A.ioore(t2, t3);
            t1 = t2[t3];
            return new A.TypeInfo(new A.Token(B.TokenType_54, "inteiro", _null, t1.line, t1.column));
          } else {
            if (!(t3 < t4))
              return A.ioore(t2, t3);
            t1 = t2[t3];
            return new A.TypeInfo(new A.Token(B.TokenType_55, "real", _null, t1.line, t1.column));
          }
        } else if (A._isInt(value)) {
          t1 = _this._tokens;
          t2 = _this._parser$_current;
          if (!(t2 < t1.length))
            return A.ioore(t1, t2);
          t2 = t1[t2];
          return new A.TypeInfo(new A.Token(B.TokenType_54, "inteiro", _null, t2.line, t2.column));
        } else if (typeof value == "string") {
          t1 = _this._tokens;
          t2 = _this._parser$_current;
          if (!(t2 < t1.length))
            return A.ioore(t1, t2);
          t2 = t1[t2];
          return new A.TypeInfo(new A.Token(B.TokenType_56, "texto", _null, t2.line, t2.column));
        } else if (A._isBool(value)) {
          t1 = _this._tokens;
          t2 = _this._parser$_current;
          if (!(t2 < t1.length))
            return A.ioore(t1, t2);
          t2 = t1[t2];
          return new A.TypeInfo(new A.Token(B.TokenType_57, "logico", _null, t2.line, t2.column));
        }
      }
      t1 = _this._tokens;
      t2 = _this._parser$_current;
      if (!(t2 < t1.length))
        return A.ioore(t1, t2);
      t2 = t1[t2];
      return new A.TypeInfo(new A.Token(B.TokenType_55, "real", _null, t2.line, t2.column));
    },
    _synchronize$0() {
      var t1, t2, t3, t4, t5, t6, _this = this;
      _this._advance$0();
      t1 = _this._tokens;
      while (true) {
        t2 = _this._parser$_current;
        t3 = t1.length;
        if (!(t2 < t3))
          return A.ioore(t1, t2);
        t4 = t1[t2].type;
        t5 = t4 !== B.TokenType_63;
        if (!t5)
          break;
        t6 = t2 - 1;
        if (!(t6 >= 0 && t6 < t3))
          return A.ioore(t1, t6);
        if (t1[t6].type === B.TokenType_11)
          return;
        switch (t4) {
          case B.TokenType_42:
          case B.TokenType_35:
          case B.TokenType_36:
          case B.TokenType_43:
          case B.TokenType_39:
          case B.TokenType_40:
          case B.TokenType_54:
          case B.TokenType_55:
          case B.TokenType_56:
          case B.TokenType_57:
          case B.TokenType_58:
            return;
          default:
            break;
        }
        t2 = (t5 ? _this._parser$_current = t2 + 1 : t2) - 1;
        if (!(t2 >= 0 && t2 < t3))
          return A.ioore(t1, t2);
      }
    }
  };
  A.ParseError.prototype = {};
  A.SemanticAnalyzer.prototype = {
    analyze$1(statements) {
      var t1, t2, _i;
      type$.List_Stmt._as(statements);
      for (t1 = statements.length, t2 = type$.void, _i = 0; _i < statements.length; statements.length === t1 || (0, A.throwConcurrentModificationError)(statements), ++_i)
        statements[_i].accept$1$1(0, this, t2);
    },
    visitBlockStmt$1(stmt) {
      var t1, t2, t3, _i, _this = this;
      _this._currentScope = new A.SymbolTable(_this._currentScope, A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Symbol));
      for (t1 = stmt.statements, t2 = t1.length, t3 = type$.void, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].accept$1$1(0, _this, t3);
      t1 = _this._currentScope.enclosing;
      t1.toString;
      _this._currentScope = t1;
    },
    visitConstDeclStmt$1(stmt) {
      var t2, t3, expectedType, actualType, _this = this,
        t1 = stmt.name;
      if (_this._currentScope.$get$1(t1) != null) {
        t2 = _this._errorReporter;
        t3 = "Constante '" + t1.lexeme + "' j\xe1 foi declarada neste escopo.";
        t2.super$ErrorReporter$error(0, t1.line, t3);
        t2.output._contents += "ERRO: " + t3 + "\n";
        return;
      }
      _this._currentScope.define$1(t1);
      t2 = stmt.initializer;
      t2.accept$1$1(0, _this, type$.void);
      expectedType = stmt.type.type.type;
      actualType = _this._inferExpressionType$1(t2);
      if (!_this._areTypesCompatible$2(actualType, expectedType)) {
        t2 = _this._errorReporter;
        t3 = "Tipo incompat\xedvel na declara\xe7\xe3o da constante. '" + t1.lexeme + "' \xe9 do tipo '" + _this._tokenTypeToString$1(expectedType) + "', mas inicializador \xe9 do tipo '" + _this._tokenTypeToString$1(actualType) + "'.";
        t2.super$ErrorReporter$error(0, t1.line, t3);
        t2.output._contents += "ERRO: " + t3 + "\n";
      }
      _this._constants.add$1(0, t1.lexeme);
      _this._currentScope.assign$1(0, t1);
    },
    visitVariableExpr$1(expr) {
      var t3, _this = this,
        t1 = expr.name,
        symbol = _this._currentScope.$get$1(t1),
        t2 = t1.lexeme;
      if (B.JSArray_methods.contains$1(A._setArrayType(["math", "string", "io"], type$.JSArray_String), t2) || _this._importedLibraries.containsKey$1(t2))
        return;
      if (_this._standardLibrary._functions.containsKey$1(t2))
        return;
      if (symbol == null) {
        t3 = _this._errorReporter;
        t2 = "Vari\xe1vel '" + t2 + "' n\xe3o declarada.";
        t3.super$ErrorReporter$error(0, t1.line, t2);
        t3.output._contents += "ERRO: " + t2 + "\n";
      } else if (!symbol.isInitialized) {
        t3 = _this._errorReporter;
        t2 = "Vari\xe1vel '" + t2 + "' usada antes de ser inicializada.";
        t3.super$ErrorReporter$error(0, t1.line, t2);
        t3.output._contents += "ERRO: " + t2 + "\n";
      }
    },
    visitCompoundAssignExpr$1(expr) {
      var t3, _this = this,
        t1 = expr.name,
        t2 = t1.lexeme;
      if (_this._constants.contains$1(0, t2)) {
        t3 = _this._errorReporter;
        t2 = "N\xe3o \xe9 poss\xedvel aplicar opera\xe7\xe3o '" + expr.operator.lexeme + "' \xe0 constante '" + t2 + "'.";
        t3.super$ErrorReporter$error(0, t1.line, t2);
        t3.output._contents += "ERRO: " + t2 + "\n";
        return;
      }
      expr.value.accept$1$1(0, _this, type$.void);
      if (!_this._currentScope.assign$1(0, t1)) {
        t3 = _this._errorReporter;
        t2 = "Tentativa de opera\xe7\xe3o '" + expr.operator.lexeme + "' em vari\xe1vel '" + t2 + "' n\xe3o declarada.";
        t3.super$ErrorReporter$error(0, t1.line, t2);
        t3.output._contents += "ERRO: " + t2 + "\n";
      }
    },
    visitDecrementExpr$1(expr) {
      var t3, _this = this,
        t1 = expr.name,
        t2 = t1.lexeme;
      if (_this._constants.contains$1(0, t2)) {
        t3 = _this._errorReporter;
        t2 = "N\xe3o \xe9 poss\xedvel decrementar constante '" + t2 + "'.";
        t3.super$ErrorReporter$error(0, t1.line, t2);
        t3.output._contents += "ERRO: " + t2 + "\n";
        return;
      }
      if (!_this._currentScope.assign$1(0, t1)) {
        t3 = _this._errorReporter;
        t2 = "Tentativa de decrementar vari\xe1vel '" + t2 + "' n\xe3o declarada.";
        t3.super$ErrorReporter$error(0, t1.line, t2);
        t3.output._contents += "ERRO: " + t2 + "\n";
      }
    },
    visitIncrementExpr$1(expr) {
      var t3, _this = this,
        t1 = expr.name,
        t2 = t1.lexeme;
      if (_this._constants.contains$1(0, t2)) {
        t3 = _this._errorReporter;
        t2 = "N\xe3o \xe9 poss\xedvel incrementar constante '" + t2 + "'.";
        t3.super$ErrorReporter$error(0, t1.line, t2);
        t3.output._contents += "ERRO: " + t2 + "\n";
        return;
      }
      if (!_this._currentScope.assign$1(0, t1)) {
        t3 = _this._errorReporter;
        t2 = "Tentativa de incrementar vari\xe1vel '" + t2 + "' n\xe3o declarada.";
        t3.super$ErrorReporter$error(0, t1.line, t2);
        t3.output._contents += "ERRO: " + t2 + "\n";
      }
    },
    visitAssignExpr$1(expr) {
      var t3, symbol, t4, actualType, _this = this,
        t1 = expr.name,
        t2 = t1.lexeme;
      if (_this._constants.contains$1(0, t2)) {
        t3 = _this._errorReporter;
        t2 = "N\xe3o \xe9 poss\xedvel atribuir valor \xe0 constante '" + t2 + "'.";
        t3.super$ErrorReporter$error(0, t1.line, t2);
        t3.output._contents += "ERRO: " + t2 + "\n";
        return;
      }
      t3 = expr.value;
      t3.accept$1$1(0, _this, type$.void);
      if (!_this._currentScope.assign$1(0, t1)) {
        t3 = _this._errorReporter;
        t2 = "Tentativa de atribuir a uma vari\xe1vel '" + t2 + "' n\xe3o declarada.";
        t3.super$ErrorReporter$error(0, t1.line, t2);
        t3.output._contents += "ERRO: " + t2 + "\n";
        return;
      }
      symbol = _this._currentScope.$get$1(t1);
      if (symbol != null && symbol.type != null) {
        t4 = symbol.type;
        t4.toString;
        actualType = _this._inferExpressionType$1(t3);
        if (!_this._areTypesCompatible$2(actualType, t4)) {
          t3 = _this._errorReporter;
          t4 = "Tipo incompat\xedvel na atribui\xe7\xe3o. Vari\xe1vel '" + t2 + "' \xe9 do tipo '" + _this._tokenTypeToString$1(t4) + "', mas valor \xe9 do tipo '" + _this._tokenTypeToString$1(actualType) + "'.";
          t3.super$ErrorReporter$error(0, t1.line, t4);
          t3.output._contents += "ERRO: " + t4 + "\n";
        }
      }
    },
    visitFunctionStmt$1(stmt) {
      var previousReturnType, t2, _i, param, t3, t4, t5, _this = this,
        t1 = stmt.name;
      _this._currentScope.define$1(t1);
      _this._currentScope.assign$1(0, t1);
      previousReturnType = _this._currentFunctionReturnType;
      _this._currentFunctionReturnType = stmt.returnType;
      _this._currentScope = new A.SymbolTable(_this._currentScope, A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Symbol));
      for (t1 = stmt.params, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, A.throwConcurrentModificationError)(t1), ++_i) {
        param = t1[_i];
        t3 = param.name;
        t4 = _this._currentScope._symbols;
        t5 = t3.lexeme;
        t4.containsKey$1(t5);
        t4.$indexSet(0, t5, new A.Symbol(null));
        _this._currentScope._symbols.$indexSet(0, t5, new A.Symbol(param.type.type.type));
        _this._currentScope.assign$1(0, t3);
      }
      stmt.body.accept$1$1(0, _this, type$.void);
      t1 = _this._currentScope.enclosing;
      t1.toString;
      _this._currentScope = t1;
      _this._currentFunctionReturnType = previousReturnType;
    },
    visitSwitchStmt$1(stmt) {
      var caseValues, t2, t3, t4, t5, hasDefault, _i, caseStmt, t6, literal, t7, _i0, _this = this,
        t1 = type$.void;
      stmt.expression.accept$1$1(0, _this, t1);
      ++_this._switchNestingLevel;
      caseValues = A.LinkedHashSet_LinkedHashSet$_empty(type$.nullable_Object);
      for (t2 = stmt.cases, t3 = t2.length, t4 = _this._errorReporter, t5 = t4.output, hasDefault = false, _i = 0; _i < t2.length; t2.length === t3 || (0, A.throwConcurrentModificationError)(t2), ++_i) {
        caseStmt = t2[_i];
        t6 = caseStmt.value;
        if (t6 == null) {
          if (hasDefault) {
            t4.super$ErrorReporter$error(0, caseStmt.keyword.line, "Apenas um caso 'contrario' \xe9 permitido no switch.");
            t5._contents += "ERRO: Apenas um caso 'contrario' \xe9 permitido no switch.\n";
          }
          hasDefault = true;
        } else {
          t6.accept$1$1(0, _this, t1);
          if (!(t6 instanceof A.LiteralExpr)) {
            t4.super$ErrorReporter$error(0, caseStmt.keyword.line, "Valores de caso devem ser constantes literais.");
            t5._contents += "ERRO: Valores de caso devem ser constantes literais.\n";
          } else {
            literal = t6.value;
            if (caseValues.contains$1(0, literal)) {
              t4.super$ErrorReporter$error(0, caseStmt.keyword.line, "Caso duplicado: valor j\xe1 foi usado em outro caso.");
              t5._contents += "ERRO: Caso duplicado: valor j\xe1 foi usado em outro caso.\n";
            }
            caseValues.add$1(0, literal);
          }
        }
        for (t6 = caseStmt.statements, t7 = t6.length, _i0 = 0; _i0 < t6.length; t6.length === t7 || (0, A.throwConcurrentModificationError)(t6), ++_i0)
          t6[_i0].accept$1$1(0, _this, t1);
      }
      --_this._switchNestingLevel;
    },
    visitImportStmt$1(stmt) {
      var t2, t3, usedName, t4, t5, t6, _this = this, _null = null,
        t1 = stmt.library,
        libraryName = t1.lexeme,
        validLibraries = A._setArrayType(["math", "string", "io", "data"], type$.JSArray_String);
      if (!B.JSArray_methods.contains$1(validLibraries, libraryName)) {
        t2 = _this._errorReporter;
        t3 = "Biblioteca '" + libraryName + "' n\xe3o reconhecida. Bibliotecas dispon\xedveis: " + B.JSArray_methods.join$1(validLibraries, ", ");
        t2.super$ErrorReporter$error(0, t1.line, t3);
        t2.output._contents += "ERRO: " + t3 + "\n";
        return;
      }
      t2 = stmt.alias;
      t3 = t2 == null;
      usedName = t3 ? _null : t2.lexeme;
      if (usedName == null)
        usedName = libraryName;
      t4 = _this._currentScope;
      t5 = t3 ? _null : t2.line;
      if (t5 == null)
        t5 = t1.line;
      t6 = t3 ? _null : t2.column;
      if (t4.$get$1(new A.Token(B.TokenType_29, usedName, _null, t5, t6 == null ? t1.column : t6)) != null) {
        t4 = _this._errorReporter;
        t2 = t3 ? _null : t2.line;
        t1 = t2 == null ? t1.line : t2;
        t2 = "O nome '" + usedName + "' conflita com uma vari\xe1vel j\xe1 declarada.";
        t4.super$ErrorReporter$error(0, t1, t2);
        t4.output._contents += "ERRO: " + t2 + "\n";
        return;
      }
      t4 = _this._importedLibraries;
      if (t4.containsKey$1(usedName)) {
        t5 = _this._errorReporter;
        t2 = t3 ? _null : t2.line;
        t1 = t2 == null ? t1.line : t2;
        t4 = "O nome '" + usedName + "' j\xe1 est\xe1 sendo usado para a biblioteca '" + A.S(t4.$index(0, usedName)) + "'.";
        t5.super$ErrorReporter$error(0, t1, t4);
        t5.output._contents += "ERRO: " + t4 + "\n";
        return;
      }
      t4.$indexSet(0, usedName, libraryName);
    },
    visitCallExpr$1(expr) {
      var t2, t3, _i,
        t1 = type$.void;
      expr.callee.accept$1$1(0, this, t1);
      for (t2 = expr.$arguments, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, A.throwConcurrentModificationError)(t2), ++_i)
        t2[_i].accept$1$1(0, this, t1);
    },
    visitMemberAccessExpr$1(expr) {
      var objectName,
        t1 = expr.object;
      t1.accept$1$1(0, this, type$.void);
      if (t1 instanceof A.VariableExpr) {
        objectName = t1.name.lexeme;
        if (this._importedLibraries.$index(0, objectName) != null)
          return;
        if (B.JSArray_methods.contains$1(A._setArrayType(["math", "string", "io"], type$.JSArray_String), objectName))
          return;
      }
    },
    _inferExpressionType$1(expr) {
      var value, leftType, rightType, t1, symbol;
      if (expr instanceof A.LiteralExpr) {
        value = expr.value;
        if (A._isInt(value))
          return B.TokenType_54;
        if (typeof value == "number")
          return B.TokenType_55;
        if (typeof value == "string")
          return B.TokenType_56;
        if (A._isBool(value))
          return B.TokenType_57;
        return B.TokenType_55;
      } else if (expr instanceof A.BinaryExpr) {
        leftType = this._inferExpressionType$1(expr.left);
        rightType = this._inferExpressionType$1(expr.right);
        t1 = expr.operator.type;
        if (t1 === B.TokenType_7 || t1 === B.TokenType_6 || t1 === B.TokenType_13 || t1 === B.TokenType_12) {
          if (leftType === B.TokenType_55 || rightType === B.TokenType_55)
            return B.TokenType_55;
          return B.TokenType_54;
        }
        if (t1 === B.TokenType_25 || t1 === B.TokenType_26 || t1 === B.TokenType_27 || t1 === B.TokenType_28 || t1 === B.TokenType_17 || t1 === B.TokenType_19)
          return B.TokenType_57;
      } else if (expr instanceof A.VariableExpr) {
        symbol = this._currentScope.$get$1(expr.name);
        if (symbol != null && symbol.type != null) {
          t1 = symbol.type;
          t1.toString;
          return t1;
        }
        return B.TokenType_55;
      }
      return B.TokenType_55;
    },
    _areTypesCompatible$2(actual, expected) {
      if (actual === expected)
        return true;
      if (actual === B.TokenType_54 && expected === B.TokenType_55)
        return true;
      return false;
    },
    _tokenTypeToString$1(type) {
      switch (type) {
        case B.TokenType_54:
          return "inteiro";
        case B.TokenType_55:
          return "real";
        case B.TokenType_56:
          return "texto";
        case B.TokenType_57:
          return "l\xf3gico";
        case B.TokenType_58:
          return "vazio";
        default:
          return type._enumToString$0();
      }
    },
    $isAstVisitor: 1
  };
  A.NativeFunction.prototype = {
    call$1(args) {
      var t1, t2;
      type$.List_nullable_Object._as(args);
      t1 = J.getInterceptor$asx(args);
      t2 = this.arity;
      if (t1.get$length(args) !== t2)
        throw A.wrapException(A.Exception_Exception("Fun\xe7\xe3o " + this.name + " espera " + t2 + " argumentos, mas recebeu " + t1.get$length(args)));
      return this.implementation.call$1(args);
    },
    toString$0(_) {
      return "NativeFunction(" + this.name + "/" + this.arity + ")";
    }
  };
  A.StandardLibrary.prototype = {
    _registerMathLibrary$0() {
      var _this = this,
        _s8_ = "math.sin",
        _s8_0 = "math.cos",
        _s8_1 = "math.tan",
        _s9_ = "math.asin",
        _s9_0 = "math.acos",
        _s9_1 = "math.atan",
        _s8_2 = "math.exp",
        _s8_3 = "math.log",
        _s10_ = "math.log10",
        _s8_4 = "math.pow",
        _s9_2 = "math.sqrt",
        _s8_5 = "math.abs",
        _s9_3 = "math.ceil",
        _s10_0 = "math.floor",
        _s10_1 = "math.round",
        _s8_6 = "math.max",
        _s8_7 = "math.min",
        _s11_ = "math.random",
        _s8_8 = "math.LN2",
        _s9_4 = "math.LN10",
        _s10_2 = "math.LOG2E",
        _s11_0 = "math.LOG10E",
        _s12_ = "math.SQRT1_2",
        _s10_3 = "math.SQRT2",
        t1 = type$.dynamic_Function_List_nullable_Object,
        t2 = _this._functions;
      t2.$indexSet(0, _s8_, new A.NativeFunction(_s8_, 1, t1._as(new A.StandardLibrary__registerMathLibrary_closure(_this))));
      t2.$indexSet(0, _s8_0, new A.NativeFunction(_s8_0, 1, t1._as(new A.StandardLibrary__registerMathLibrary_closure0(_this))));
      t2.$indexSet(0, _s8_1, new A.NativeFunction(_s8_1, 1, t1._as(new A.StandardLibrary__registerMathLibrary_closure1(_this))));
      t2.$indexSet(0, _s9_, new A.NativeFunction(_s9_, 1, t1._as(new A.StandardLibrary__registerMathLibrary_closure2(_this))));
      t2.$indexSet(0, _s9_0, new A.NativeFunction(_s9_0, 1, t1._as(new A.StandardLibrary__registerMathLibrary_closure3(_this))));
      t2.$indexSet(0, _s9_1, new A.NativeFunction(_s9_1, 1, t1._as(new A.StandardLibrary__registerMathLibrary_closure4(_this))));
      t2.$indexSet(0, _s8_2, new A.NativeFunction(_s8_2, 1, t1._as(new A.StandardLibrary__registerMathLibrary_closure5(_this))));
      t2.$indexSet(0, _s8_3, new A.NativeFunction(_s8_3, 1, t1._as(new A.StandardLibrary__registerMathLibrary_closure6(_this))));
      t2.$indexSet(0, _s10_, new A.NativeFunction(_s10_, 1, t1._as(new A.StandardLibrary__registerMathLibrary_closure7(_this))));
      t2.$indexSet(0, _s8_4, new A.NativeFunction(_s8_4, 2, t1._as(new A.StandardLibrary__registerMathLibrary_closure8(_this))));
      t2.$indexSet(0, _s9_2, new A.NativeFunction(_s9_2, 1, t1._as(new A.StandardLibrary__registerMathLibrary_closure9(_this))));
      t2.$indexSet(0, _s8_5, new A.NativeFunction(_s8_5, 1, t1._as(new A.StandardLibrary__registerMathLibrary_closure10())));
      t2.$indexSet(0, _s9_3, new A.NativeFunction(_s9_3, 1, t1._as(new A.StandardLibrary__registerMathLibrary_closure11(_this))));
      t2.$indexSet(0, _s10_0, new A.NativeFunction(_s10_0, 1, t1._as(new A.StandardLibrary__registerMathLibrary_closure12(_this))));
      t2.$indexSet(0, _s10_1, new A.NativeFunction(_s10_1, 1, t1._as(new A.StandardLibrary__registerMathLibrary_closure13(_this))));
      t2.$indexSet(0, _s8_6, new A.NativeFunction(_s8_6, 2, t1._as(new A.StandardLibrary__registerMathLibrary_closure14(_this))));
      t2.$indexSet(0, _s8_7, new A.NativeFunction(_s8_7, 2, t1._as(new A.StandardLibrary__registerMathLibrary_closure15(_this))));
      t2.$indexSet(0, _s11_, new A.NativeFunction(_s11_, 0, t1._as(new A.StandardLibrary__registerMathLibrary_closure16())));
      t2.$indexSet(0, "math.PI", new A.NativeFunction("math.PI", 0, t1._as(new A.StandardLibrary__registerMathLibrary_closure17())));
      t2.$indexSet(0, "math.E", new A.NativeFunction("math.E", 0, t1._as(new A.StandardLibrary__registerMathLibrary_closure18())));
      t2.$indexSet(0, _s8_8, new A.NativeFunction(_s8_8, 0, t1._as(new A.StandardLibrary__registerMathLibrary_closure19())));
      t2.$indexSet(0, _s9_4, new A.NativeFunction(_s9_4, 0, t1._as(new A.StandardLibrary__registerMathLibrary_closure20())));
      t2.$indexSet(0, _s10_2, new A.NativeFunction(_s10_2, 0, t1._as(new A.StandardLibrary__registerMathLibrary_closure21())));
      t2.$indexSet(0, _s11_0, new A.NativeFunction(_s11_0, 0, t1._as(new A.StandardLibrary__registerMathLibrary_closure22())));
      t2.$indexSet(0, _s12_, new A.NativeFunction(_s12_, 0, t1._as(new A.StandardLibrary__registerMathLibrary_closure23())));
      t2.$indexSet(0, _s10_3, new A.NativeFunction(_s10_3, 0, t1._as(new A.StandardLibrary__registerMathLibrary_closure24())));
    },
    _registerStringLibrary$0() {
      var _this = this,
        _s14_ = "string.tamanho",
        _s12_ = "string.vazio",
        _s16_ = "string.maiuscula",
        _s16_0 = "string.minuscula",
        _s15_ = "string.inverter",
        _s13_ = "string.limpar",
        _s13_0 = "string.contem",
        _s16_1 = "string.comecaCom",
        _s17_ = "string.terminaCom",
        _s16_2 = "string.encontrar",
        _s22_ = "string.encontrarUltimo",
        _s17_0 = "string.substituir",
        _s25_ = "string.substituirPrimeiro",
        _s13_1 = "string.fatiar",
        _s18_ = "string.caractereEm",
        _s14_0 = "string.repetir",
        _s17_1 = "string.concatenar",
        _s14_1 = "string.dividir",
        t1 = type$.dynamic_Function_List_nullable_Object,
        t2 = _this._functions;
      t2.$indexSet(0, _s14_, new A.NativeFunction(_s14_, 1, t1._as(new A.StandardLibrary__registerStringLibrary_closure(_this))));
      t2.$indexSet(0, _s12_, new A.NativeFunction(_s12_, 1, t1._as(new A.StandardLibrary__registerStringLibrary_closure0(_this))));
      t2.$indexSet(0, _s16_, new A.NativeFunction(_s16_, 1, t1._as(new A.StandardLibrary__registerStringLibrary_closure1(_this))));
      t2.$indexSet(0, _s16_0, new A.NativeFunction(_s16_0, 1, t1._as(new A.StandardLibrary__registerStringLibrary_closure2(_this))));
      t2.$indexSet(0, _s15_, new A.NativeFunction(_s15_, 1, t1._as(new A.StandardLibrary__registerStringLibrary_closure3(_this))));
      t2.$indexSet(0, _s13_, new A.NativeFunction(_s13_, 1, t1._as(new A.StandardLibrary__registerStringLibrary_closure4(_this))));
      t2.$indexSet(0, _s13_0, new A.NativeFunction(_s13_0, 2, t1._as(new A.StandardLibrary__registerStringLibrary_closure5(_this))));
      t2.$indexSet(0, _s16_1, new A.NativeFunction(_s16_1, 2, t1._as(new A.StandardLibrary__registerStringLibrary_closure6(_this))));
      t2.$indexSet(0, _s17_, new A.NativeFunction(_s17_, 2, t1._as(new A.StandardLibrary__registerStringLibrary_closure7(_this))));
      t2.$indexSet(0, _s16_2, new A.NativeFunction(_s16_2, 2, t1._as(new A.StandardLibrary__registerStringLibrary_closure8(_this))));
      t2.$indexSet(0, _s22_, new A.NativeFunction(_s22_, 2, t1._as(new A.StandardLibrary__registerStringLibrary_closure9(_this))));
      t2.$indexSet(0, _s17_0, new A.NativeFunction(_s17_0, 3, t1._as(new A.StandardLibrary__registerStringLibrary_closure10(_this))));
      t2.$indexSet(0, _s25_, new A.NativeFunction(_s25_, 3, t1._as(new A.StandardLibrary__registerStringLibrary_closure11(_this))));
      t2.$indexSet(0, _s13_1, new A.NativeFunction(_s13_1, 3, t1._as(new A.StandardLibrary__registerStringLibrary_closure12(_this))));
      t2.$indexSet(0, _s18_, new A.NativeFunction(_s18_, 2, t1._as(new A.StandardLibrary__registerStringLibrary_closure13(_this))));
      t2.$indexSet(0, _s14_0, new A.NativeFunction(_s14_0, 2, t1._as(new A.StandardLibrary__registerStringLibrary_closure14(_this))));
      t2.$indexSet(0, _s17_1, new A.NativeFunction(_s17_1, 2, t1._as(new A.StandardLibrary__registerStringLibrary_closure15(_this))));
      t2.$indexSet(0, _s14_1, new A.NativeFunction(_s14_1, 2, t1._as(new A.StandardLibrary__registerStringLibrary_closure16(_this))));
    },
    _registerIOLibrary$0() {
      var _s11_ = "io.imprimir",
        _s11_0 = "io.escrever",
        _s12_ = "io.novaLinha",
        _s11_1 = "io.lerTexto",
        _s12_0 = "io.lerNumero",
        t1 = type$.dynamic_Function_List_nullable_Object,
        t2 = this._functions;
      t2.$indexSet(0, _s11_, new A.NativeFunction(_s11_, 1, t1._as(new A.StandardLibrary__registerIOLibrary_closure())));
      t2.$indexSet(0, _s11_0, new A.NativeFunction(_s11_0, 1, t1._as(new A.StandardLibrary__registerIOLibrary_closure0())));
      t2.$indexSet(0, _s12_, new A.NativeFunction(_s12_, 0, t1._as(new A.StandardLibrary__registerIOLibrary_closure1())));
      t2.$indexSet(0, _s11_1, new A.NativeFunction(_s11_1, 0, t1._as(new A.StandardLibrary__registerIOLibrary_closure2())));
      t2.$indexSet(0, _s12_0, new A.NativeFunction(_s12_0, 0, t1._as(new A.StandardLibrary__registerIOLibrary_closure3())));
    },
    _toDouble$1(value) {
      var parsed;
      if (typeof value == "number")
        return value;
      if (A._isInt(value))
        return value;
      if (typeof value == "string") {
        parsed = A.Primitives_parseDouble(value);
        if (parsed != null)
          return parsed;
      }
      throw A.wrapException(A.Exception_Exception("N\xe3o \xe9 poss\xedvel converter " + A.S(value) + " para n\xfamero real"));
    },
    _toInt$1(value) {
      var parsed;
      if (A._isInt(value))
        return value;
      if (typeof value == "number")
        return B.JSNumber_methods.toInt$0(value);
      if (typeof value == "string") {
        parsed = A.Primitives_parseInt(value, null);
        if (parsed != null)
          return parsed;
      }
      throw A.wrapException(A.Exception_Exception("N\xe3o \xe9 poss\xedvel converter " + A.S(value) + " para n\xfamero inteiro"));
    },
    _toString$1(value) {
      if (typeof value == "string")
        return value;
      return J.toString$0$(value);
    },
    _registerDataLibrary$0() {
      var _this = this,
        _s9_ = "data.hoje",
        _s14_ = "data.horaAtual",
        _s14_0 = "data.diferenca",
        _s15_ = "data.ehBissexto",
        _s13_ = "data.formatar",
        _s14_1 = "data.diaSemana",
        _s12_ = "data.nomeMes",
        _s18_ = "data.nomeDiaSemana",
        _s17_ = "data.ehDataValida",
        _s18_0 = "data.adicionarDias",
        _s14_2 = "data.timestamp",
        _s16_ = "data.deTimestamp",
        t1 = type$.dynamic_Function_List_nullable_Object,
        t2 = _this._functions;
      t2.$indexSet(0, _s9_, new A.NativeFunction(_s9_, 0, t1._as(new A.StandardLibrary__registerDataLibrary_closure())));
      t2.$indexSet(0, _s14_, new A.NativeFunction(_s14_, 0, t1._as(new A.StandardLibrary__registerDataLibrary_closure0())));
      t2.$indexSet(0, _s14_0, new A.NativeFunction(_s14_0, 2, t1._as(new A.StandardLibrary__registerDataLibrary_closure1(_this))));
      t2.$indexSet(0, _s15_, new A.NativeFunction(_s15_, 1, t1._as(new A.StandardLibrary__registerDataLibrary_closure2(_this))));
      t2.$indexSet(0, _s13_, new A.NativeFunction(_s13_, 2, t1._as(new A.StandardLibrary__registerDataLibrary_closure3(_this))));
      t2.$indexSet(0, _s14_1, new A.NativeFunction(_s14_1, 1, t1._as(new A.StandardLibrary__registerDataLibrary_closure4(_this))));
      t2.$indexSet(0, _s12_, new A.NativeFunction(_s12_, 1, t1._as(new A.StandardLibrary__registerDataLibrary_closure5(_this))));
      t2.$indexSet(0, _s18_, new A.NativeFunction(_s18_, 1, t1._as(new A.StandardLibrary__registerDataLibrary_closure6(_this))));
      t2.$indexSet(0, _s17_, new A.NativeFunction(_s17_, 1, t1._as(new A.StandardLibrary__registerDataLibrary_closure7(_this))));
      t2.$indexSet(0, _s18_0, new A.NativeFunction(_s18_0, 2, t1._as(new A.StandardLibrary__registerDataLibrary_closure8(_this))));
      t2.$indexSet(0, _s14_2, new A.NativeFunction(_s14_2, 0, t1._as(new A.StandardLibrary__registerDataLibrary_closure9())));
      t2.$indexSet(0, _s16_, new A.NativeFunction(_s16_, 1, t1._as(new A.StandardLibrary__registerDataLibrary_closure10(_this))));
    },
    _registerTypeLibrary$0() {
      var _s10_ = "info_debug",
        t1 = type$.dynamic_Function_List_nullable_Object,
        t2 = this._functions;
      t2.$indexSet(0, "tipo", new A.NativeFunction("tipo", 1, t1._as(new A.StandardLibrary__registerTypeLibrary_closure())));
      t2.$indexSet(0, "debug", new A.NativeFunction("debug", 1, t1._as(new A.StandardLibrary__registerTypeLibrary_closure0())));
      t2.$indexSet(0, _s10_, new A.NativeFunction(_s10_, 0, t1._as(new A.StandardLibrary__registerTypeLibrary_closure1(this))));
    }
  };
  A.StandardLibrary__registerMathLibrary_closure.prototype = {
    call$1(args) {
      return Math.sin(this.$this._toDouble$1(J.$index$asx(type$.List_nullable_Object._as(args), 0)));
    },
    $signature: 0
  };
  A.StandardLibrary__registerMathLibrary_closure0.prototype = {
    call$1(args) {
      return Math.cos(this.$this._toDouble$1(J.$index$asx(type$.List_nullable_Object._as(args), 0)));
    },
    $signature: 0
  };
  A.StandardLibrary__registerMathLibrary_closure1.prototype = {
    call$1(args) {
      return Math.tan(this.$this._toDouble$1(J.$index$asx(type$.List_nullable_Object._as(args), 0)));
    },
    $signature: 0
  };
  A.StandardLibrary__registerMathLibrary_closure2.prototype = {
    call$1(args) {
      return Math.asin(this.$this._toDouble$1(J.$index$asx(type$.List_nullable_Object._as(args), 0)));
    },
    $signature: 0
  };
  A.StandardLibrary__registerMathLibrary_closure3.prototype = {
    call$1(args) {
      return Math.acos(this.$this._toDouble$1(J.$index$asx(type$.List_nullable_Object._as(args), 0)));
    },
    $signature: 0
  };
  A.StandardLibrary__registerMathLibrary_closure4.prototype = {
    call$1(args) {
      return Math.atan(this.$this._toDouble$1(J.$index$asx(type$.List_nullable_Object._as(args), 0)));
    },
    $signature: 0
  };
  A.StandardLibrary__registerMathLibrary_closure5.prototype = {
    call$1(args) {
      return Math.exp(this.$this._toDouble$1(J.$index$asx(type$.List_nullable_Object._as(args), 0)));
    },
    $signature: 0
  };
  A.StandardLibrary__registerMathLibrary_closure6.prototype = {
    call$1(args) {
      return Math.log(this.$this._toDouble$1(J.$index$asx(type$.List_nullable_Object._as(args), 0)));
    },
    $signature: 0
  };
  A.StandardLibrary__registerMathLibrary_closure7.prototype = {
    call$1(args) {
      return Math.log(this.$this._toDouble$1(J.$index$asx(type$.List_nullable_Object._as(args), 0))) / 2.302585092994046;
    },
    $signature: 0
  };
  A.StandardLibrary__registerMathLibrary_closure8.prototype = {
    call$1(args) {
      var t1, t2;
      type$.List_nullable_Object._as(args);
      t1 = this.$this;
      t2 = J.getInterceptor$asx(args);
      return Math.pow(t1._toDouble$1(t2.$index(args, 0)), t1._toDouble$1(t2.$index(args, 1)));
    },
    $signature: 17
  };
  A.StandardLibrary__registerMathLibrary_closure9.prototype = {
    call$1(args) {
      return Math.sqrt(this.$this._toDouble$1(J.$index$asx(type$.List_nullable_Object._as(args), 0)));
    },
    $signature: 0
  };
  A.StandardLibrary__registerMathLibrary_closure10.prototype = {
    call$1(args) {
      var value = J.$index$asx(type$.List_nullable_Object._as(args), 0);
      if (A._isInt(value))
        return Math.abs(value);
      if (typeof value == "number")
        return Math.abs(value);
      throw A.wrapException(A.Exception_Exception("math.abs espera um n\xfamero"));
    },
    $signature: 17
  };
  A.StandardLibrary__registerMathLibrary_closure11.prototype = {
    call$1(args) {
      return B.JSNumber_methods.ceil$0(this.$this._toDouble$1(J.$index$asx(type$.List_nullable_Object._as(args), 0)));
    },
    $signature: 3
  };
  A.StandardLibrary__registerMathLibrary_closure12.prototype = {
    call$1(args) {
      return B.JSNumber_methods.floor$0(this.$this._toDouble$1(J.$index$asx(type$.List_nullable_Object._as(args), 0)));
    },
    $signature: 3
  };
  A.StandardLibrary__registerMathLibrary_closure13.prototype = {
    call$1(args) {
      return B.JSNumber_methods.round$0(this.$this._toDouble$1(J.$index$asx(type$.List_nullable_Object._as(args), 0)));
    },
    $signature: 3
  };
  A.StandardLibrary__registerMathLibrary_closure14.prototype = {
    call$1(args) {
      var t1, t2;
      type$.List_nullable_Object._as(args);
      t1 = this.$this;
      t2 = J.getInterceptor$asx(args);
      return Math.max(t1._toDouble$1(t2.$index(args, 0)), t1._toDouble$1(t2.$index(args, 1)));
    },
    $signature: 0
  };
  A.StandardLibrary__registerMathLibrary_closure15.prototype = {
    call$1(args) {
      var t1, t2;
      type$.List_nullable_Object._as(args);
      t1 = this.$this;
      t2 = J.getInterceptor$asx(args);
      return Math.min(t1._toDouble$1(t2.$index(args, 0)), t1._toDouble$1(t2.$index(args, 1)));
    },
    $signature: 0
  };
  A.StandardLibrary__registerMathLibrary_closure16.prototype = {
    call$1(args) {
      type$.List_nullable_Object._as(args);
      return B.C__JSRandom.nextDouble$0();
    },
    $signature: 0
  };
  A.StandardLibrary__registerMathLibrary_closure17.prototype = {
    call$1(args) {
      type$.List_nullable_Object._as(args);
      return 3.141592653589793;
    },
    $signature: 0
  };
  A.StandardLibrary__registerMathLibrary_closure18.prototype = {
    call$1(args) {
      type$.List_nullable_Object._as(args);
      return 2.718281828459045;
    },
    $signature: 0
  };
  A.StandardLibrary__registerMathLibrary_closure19.prototype = {
    call$1(args) {
      type$.List_nullable_Object._as(args);
      return 0.6931471805599453;
    },
    $signature: 0
  };
  A.StandardLibrary__registerMathLibrary_closure20.prototype = {
    call$1(args) {
      type$.List_nullable_Object._as(args);
      return 2.302585092994046;
    },
    $signature: 0
  };
  A.StandardLibrary__registerMathLibrary_closure21.prototype = {
    call$1(args) {
      type$.List_nullable_Object._as(args);
      return 1.4426950408889634;
    },
    $signature: 0
  };
  A.StandardLibrary__registerMathLibrary_closure22.prototype = {
    call$1(args) {
      type$.List_nullable_Object._as(args);
      return 0.4342944819032518;
    },
    $signature: 0
  };
  A.StandardLibrary__registerMathLibrary_closure23.prototype = {
    call$1(args) {
      type$.List_nullable_Object._as(args);
      return 0.7071067811865476;
    },
    $signature: 0
  };
  A.StandardLibrary__registerMathLibrary_closure24.prototype = {
    call$1(args) {
      type$.List_nullable_Object._as(args);
      return 1.4142135623730951;
    },
    $signature: 0
  };
  A.StandardLibrary__registerStringLibrary_closure.prototype = {
    call$1(args) {
      return this.$this._toString$1(J.$index$asx(type$.List_nullable_Object._as(args), 0)).length;
    },
    $signature: 3
  };
  A.StandardLibrary__registerStringLibrary_closure0.prototype = {
    call$1(args) {
      return this.$this._toString$1(J.$index$asx(type$.List_nullable_Object._as(args), 0)).length === 0;
    },
    $signature: 5
  };
  A.StandardLibrary__registerStringLibrary_closure1.prototype = {
    call$1(args) {
      return this.$this._toString$1(J.$index$asx(type$.List_nullable_Object._as(args), 0)).toUpperCase();
    },
    $signature: 1
  };
  A.StandardLibrary__registerStringLibrary_closure2.prototype = {
    call$1(args) {
      return this.$this._toString$1(J.$index$asx(type$.List_nullable_Object._as(args), 0)).toLowerCase();
    },
    $signature: 1
  };
  A.StandardLibrary__registerStringLibrary_closure3.prototype = {
    call$1(args) {
      return new A.ReversedListIterable(A._setArrayType(this.$this._toString$1(J.$index$asx(type$.List_nullable_Object._as(args), 0)).split(""), type$.JSArray_String), type$.ReversedListIterable_String).join$1(0, "");
    },
    $signature: 1
  };
  A.StandardLibrary__registerStringLibrary_closure4.prototype = {
    call$1(args) {
      return B.JSString_methods.trim$0(this.$this._toString$1(J.$index$asx(type$.List_nullable_Object._as(args), 0)));
    },
    $signature: 1
  };
  A.StandardLibrary__registerStringLibrary_closure5.prototype = {
    call$1(args) {
      var t1, t2;
      type$.List_nullable_Object._as(args);
      t1 = this.$this;
      t2 = J.getInterceptor$asx(args);
      return B.JSString_methods.contains$1(t1._toString$1(t2.$index(args, 0)), t1._toString$1(t2.$index(args, 1)));
    },
    $signature: 5
  };
  A.StandardLibrary__registerStringLibrary_closure6.prototype = {
    call$1(args) {
      var t1, t2;
      type$.List_nullable_Object._as(args);
      t1 = this.$this;
      t2 = J.getInterceptor$asx(args);
      return B.JSString_methods.startsWith$1(t1._toString$1(t2.$index(args, 0)), t1._toString$1(t2.$index(args, 1)));
    },
    $signature: 5
  };
  A.StandardLibrary__registerStringLibrary_closure7.prototype = {
    call$1(args) {
      var t1, t2;
      type$.List_nullable_Object._as(args);
      t1 = this.$this;
      t2 = J.getInterceptor$asx(args);
      return B.JSString_methods.endsWith$1(t1._toString$1(t2.$index(args, 0)), t1._toString$1(t2.$index(args, 1)));
    },
    $signature: 5
  };
  A.StandardLibrary__registerStringLibrary_closure8.prototype = {
    call$1(args) {
      var t1, t2;
      type$.List_nullable_Object._as(args);
      t1 = this.$this;
      t2 = J.getInterceptor$asx(args);
      return B.JSString_methods.indexOf$1(t1._toString$1(t2.$index(args, 0)), t1._toString$1(t2.$index(args, 1)));
    },
    $signature: 3
  };
  A.StandardLibrary__registerStringLibrary_closure9.prototype = {
    call$1(args) {
      var t1, t2;
      type$.List_nullable_Object._as(args);
      t1 = this.$this;
      t2 = J.getInterceptor$asx(args);
      return B.JSString_methods.lastIndexOf$1(t1._toString$1(t2.$index(args, 0)), t1._toString$1(t2.$index(args, 1)));
    },
    $signature: 3
  };
  A.StandardLibrary__registerStringLibrary_closure10.prototype = {
    call$1(args) {
      var t1, t2, t3, t4;
      type$.List_nullable_Object._as(args);
      t1 = this.$this;
      t2 = J.getInterceptor$asx(args);
      t3 = t1._toString$1(t2.$index(args, 0));
      t4 = t1._toString$1(t2.$index(args, 1));
      t2 = t1._toString$1(t2.$index(args, 2));
      return A.stringReplaceAllUnchecked(t3, t4, t2);
    },
    $signature: 1
  };
  A.StandardLibrary__registerStringLibrary_closure11.prototype = {
    call$1(args) {
      var t1, t2, t3, t4;
      type$.List_nullable_Object._as(args);
      t1 = this.$this;
      t2 = J.getInterceptor$asx(args);
      t3 = t1._toString$1(t2.$index(args, 0));
      t4 = t1._toString$1(t2.$index(args, 1));
      t2 = t1._toString$1(t2.$index(args, 2));
      return A.stringReplaceFirstUnchecked(t3, t4, t2, 0);
    },
    $signature: 1
  };
  A.StandardLibrary__registerStringLibrary_closure12.prototype = {
    call$1(args) {
      var t1, t2, str, start, end;
      type$.List_nullable_Object._as(args);
      t1 = this.$this;
      t2 = J.getInterceptor$asx(args);
      str = t1._toString$1(t2.$index(args, 0));
      start = t1._toInt$1(t2.$index(args, 1));
      end = t1._toInt$1(t2.$index(args, 2));
      t1 = true;
      if (start >= 0)
        if (end >= 0) {
          t1 = str.length;
          t1 = start > t1 || end > t1;
        }
      if (t1)
        throw A.wrapException(A.Exception_Exception("\xcdndices de fatia fora dos limites da string"));
      if (start > end)
        throw A.wrapException(A.Exception_Exception("\xcdndice inicial deve ser menor ou igual ao final"));
      return B.JSString_methods.substring$2(str, start, end);
    },
    $signature: 1
  };
  A.StandardLibrary__registerStringLibrary_closure13.prototype = {
    call$1(args) {
      var t1, t2, str, index;
      type$.List_nullable_Object._as(args);
      t1 = this.$this;
      t2 = J.getInterceptor$asx(args);
      str = t1._toString$1(t2.$index(args, 0));
      index = t1._toInt$1(t2.$index(args, 1));
      if (index < 0 || index >= str.length)
        throw A.wrapException(A.Exception_Exception("\xcdndice " + index + " fora dos limites da string (0-" + (str.length - 1) + ")"));
      if (!(index >= 0 && index < str.length))
        return A.ioore(str, index);
      return str[index];
    },
    $signature: 1
  };
  A.StandardLibrary__registerStringLibrary_closure14.prototype = {
    call$1(args) {
      var t1, t2;
      type$.List_nullable_Object._as(args);
      t1 = this.$this;
      t2 = J.getInterceptor$asx(args);
      return B.JSString_methods.$mul(t1._toString$1(t2.$index(args, 0)), t1._toInt$1(t2.$index(args, 1)));
    },
    $signature: 1
  };
  A.StandardLibrary__registerStringLibrary_closure15.prototype = {
    call$1(args) {
      var t1, t2;
      type$.List_nullable_Object._as(args);
      t1 = this.$this;
      t2 = J.getInterceptor$asx(args);
      return t1._toString$1(t2.$index(args, 0)) + t1._toString$1(t2.$index(args, 1));
    },
    $signature: 1
  };
  A.StandardLibrary__registerStringLibrary_closure16.prototype = {
    call$1(args) {
      var t1, t2;
      type$.List_nullable_Object._as(args);
      t1 = this.$this;
      t2 = J.getInterceptor$asx(args);
      return t1._toString$1(t2.$index(args, 0)).split(t1._toString$1(t2.$index(args, 1))).length;
    },
    $signature: 3
  };
  A.StandardLibrary__registerIOLibrary_closure.prototype = {
    call$1(args) {
      A.print(J.$index$asx(type$.List_nullable_Object._as(args), 0));
      return null;
    },
    $signature: 6
  };
  A.StandardLibrary__registerIOLibrary_closure0.prototype = {
    call$1(args) {
      type$.List_nullable_Object._as(args);
      A.stdout().write$1(J.$index$asx(args, 0));
    },
    $signature: 6
  };
  A.StandardLibrary__registerIOLibrary_closure1.prototype = {
    call$1(args) {
      type$.List_nullable_Object._as(args);
      A.stdout().writeln$0();
    },
    $signature: 6
  };
  A.StandardLibrary__registerIOLibrary_closure2.prototype = {
    call$1(args) {
      type$.List_nullable_Object._as(args);
      return "entrada_do_usuario";
    },
    $signature: 1
  };
  A.StandardLibrary__registerIOLibrary_closure3.prototype = {
    call$1(args) {
      type$.List_nullable_Object._as(args);
      return 42;
    },
    $signature: 3
  };
  A.StandardLibrary__registerDataLibrary_closure.prototype = {
    call$1(args) {
      var t1;
      type$.List_nullable_Object._as(args);
      t1 = new A.DateTime(Date.now(), 0, false).toString$0(0).split(" ");
      if (0 >= t1.length)
        return A.ioore(t1, 0);
      return t1[0];
    },
    $signature: 1
  };
  A.StandardLibrary__registerDataLibrary_closure0.prototype = {
    call$1(args) {
      var now;
      type$.List_nullable_Object._as(args);
      now = new A.DateTime(Date.now(), 0, false);
      return B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(A.Primitives_getHours(now)), 2, "0") + ":" + B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(A.Primitives_getMinutes(now)), 2, "0") + ":" + B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(A.Primitives_getSeconds(now)), 2, "0");
    },
    $signature: 1
  };
  A.StandardLibrary__registerDataLibrary_closure1.prototype = {
    call$1(args) {
      var data1Str, data2Str, data1, data2, t1, t2, t3, exception;
      type$.List_nullable_Object._as(args);
      t1 = this.$this;
      t2 = J.getInterceptor$asx(args);
      data1Str = t1._toString$1(t2.$index(args, 0));
      data2Str = t1._toString$1(t2.$index(args, 1));
      try {
        data1 = A.DateTime_parse(data1Str);
        data2 = A.DateTime_parse(data2Str);
        t1 = data2;
        t2 = type$.DateTime._as(data1);
        t3 = t1._value;
        t2 = B.JSInt_methods._tdivFast$1(A.Duration$(0, t1._microsecond - t2._microsecond, t3 - t2._value)._duration, 864e8);
        return t2;
      } catch (exception) {
        t1 = A.Exception_Exception("Formato de data inv\xe1lido. Use YYYY-MM-DD");
        throw A.wrapException(t1);
      }
    },
    $signature: 3
  };
  A.StandardLibrary__registerDataLibrary_closure2.prototype = {
    call$1(args) {
      var ano = this.$this._toInt$1(J.$index$asx(type$.List_nullable_Object._as(args), 0));
      return B.JSInt_methods.$mod(ano, 4) === 0 && B.JSInt_methods.$mod(ano, 100) !== 0 || B.JSInt_methods.$mod(ano, 400) === 0;
    },
    $signature: 5
  };
  A.StandardLibrary__registerDataLibrary_closure3.prototype = {
    call$1(args) {
      var dataStr, formato, data, t1, t2, exception;
      type$.List_nullable_Object._as(args);
      t1 = this.$this;
      t2 = J.getInterceptor$asx(args);
      dataStr = t1._toString$1(t2.$index(args, 0));
      formato = t1._toString$1(t2.$index(args, 1));
      try {
        data = A.DateTime_parse(dataStr);
        if (J.$eq$(formato, "dd/MM/yyyy")) {
          t1 = B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(A.Primitives_getDay(data)), 2, "0");
          t2 = B.JSString_methods.padLeft$2(B.JSInt_methods.toString$0(A.Primitives_getMonth(data)), 2, "0");
          return t1 + "/" + t2 + "/" + A.Primitives_getYear(data);
        }
        t1 = J.toString$0$(data).split(" ");
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t1 = t1[0];
        return t1;
      } catch (exception) {
        t1 = A.Exception_Exception("Formato de data inv\xe1lido. Use YYYY-MM-DD");
        throw A.wrapException(t1);
      }
    },
    $signature: 1
  };
  A.StandardLibrary__registerDataLibrary_closure4.prototype = {
    call$1(args) {
      var data, exception, t1,
        dataStr = this.$this._toString$1(J.$index$asx(type$.List_nullable_Object._as(args), 0));
      try {
        data = A.DateTime_parse(dataStr);
        return A.Primitives_getWeekday(data);
      } catch (exception) {
        t1 = A.Exception_Exception("Formato de data inv\xe1lido. Use YYYY-MM-DD");
        throw A.wrapException(t1);
      }
    },
    $signature: 3
  };
  A.StandardLibrary__registerDataLibrary_closure5.prototype = {
    call$1(args) {
      var mes = this.$this._toInt$1(J.$index$asx(type$.List_nullable_Object._as(args), 0));
      if (mes < 1 || mes > 12)
        throw A.wrapException(A.Exception_Exception("M\xeas deve estar entre 1 e 12"));
      if (!(mes >= 0 && mes < 13))
        return A.ioore(B.List_zO0, mes);
      return B.List_zO0[mes];
    },
    $signature: 1
  };
  A.StandardLibrary__registerDataLibrary_closure6.prototype = {
    call$1(args) {
      var diaSemana = this.$this._toInt$1(J.$index$asx(type$.List_nullable_Object._as(args), 0));
      if (diaSemana < 1 || diaSemana > 7)
        throw A.wrapException(A.Exception_Exception("Dia da semana deve estar entre 1 (Segunda) e 7 (Domingo)"));
      if (!(diaSemana >= 0 && diaSemana < 8))
        return A.ioore(B.List_PHW, diaSemana);
      return B.List_PHW[diaSemana];
    },
    $signature: 1
  };
  A.StandardLibrary__registerDataLibrary_closure7.prototype = {
    call$1(args) {
      var exception,
        dataStr = this.$this._toString$1(J.$index$asx(type$.List_nullable_Object._as(args), 0));
      try {
        A.DateTime_parse(dataStr);
        return true;
      } catch (exception) {
        return false;
      }
    },
    $signature: 5
  };
  A.StandardLibrary__registerDataLibrary_closure8.prototype = {
    call$1(args) {
      var dataStr, dias, data, novaData, t1, t2, durationLo, durationHi, sumLo, microsecond, carry, exception, _1000 = 1000;
      type$.List_nullable_Object._as(args);
      t1 = this.$this;
      t2 = J.getInterceptor$asx(args);
      dataStr = t1._toString$1(t2.$index(args, 0));
      dias = t1._toInt$1(t2.$index(args, 1));
      try {
        data = A.DateTime_parse(dataStr);
        t1 = data;
        t2 = A.Duration$(dias, 0, 0)._duration;
        durationLo = B.JSInt_methods.$mod(t2, _1000);
        durationHi = B.JSInt_methods._tdivFast$1(t2 - durationLo, _1000);
        sumLo = t1._microsecond + durationLo;
        microsecond = B.JSInt_methods.$mod(sumLo, _1000);
        carry = B.JSInt_methods._tdivFast$1(sumLo - microsecond, _1000);
        t2 = t1._value;
        t1 = t1.isUtc;
        novaData = new A.DateTime(A.DateTime__validate(t2 + carry + durationHi, microsecond, t1), microsecond, t1);
        t1 = J.toString$0$(novaData).split(" ");
        if (0 >= t1.length)
          return A.ioore(t1, 0);
        t1 = t1[0];
        return t1;
      } catch (exception) {
        t1 = A.Exception_Exception("Formato de data inv\xe1lido. Use YYYY-MM-DD");
        throw A.wrapException(t1);
      }
    },
    $signature: 1
  };
  A.StandardLibrary__registerDataLibrary_closure9.prototype = {
    call$1(args) {
      type$.List_nullable_Object._as(args);
      return B.JSInt_methods._tdivFast$1(Date.now(), 1000);
    },
    $signature: 3
  };
  A.StandardLibrary__registerDataLibrary_closure10.prototype = {
    call$1(args) {
      var t1 = this.$this._toInt$1(J.$index$asx(type$.List_nullable_Object._as(args), 0)) * 1000;
      if (t1 < -864e13 || t1 > 864e13)
        A.throwExpression(A.RangeError$range(t1, -864e13, 864e13, "millisecondsSinceEpoch", null));
      A.checkNotNullable(false, "isUtc", type$.bool);
      t1 = new A.DateTime(t1, 0, false).toString$0(0).split(" ");
      if (0 >= t1.length)
        return A.ioore(t1, 0);
      return t1[0];
    },
    $signature: 1
  };
  A.StandardLibrary__registerTypeLibrary_closure.prototype = {
    call$1(args) {
      var value = J.$index$asx(type$.List_nullable_Object._as(args), 0);
      if (value == null)
        return "nulo";
      if (A._isInt(value))
        return "inteiro";
      if (typeof value == "number")
        return "real";
      if (typeof value == "string")
        return "texto";
      if (A._isBool(value))
        return "logico";
      return "desconhecido";
    },
    $signature: 1
  };
  A.StandardLibrary__registerTypeLibrary_closure0.prototype = {
    call$1(args) {
      var tipo, t1,
        value = J.$index$asx(type$.List_nullable_Object._as(args), 0);
      if (value == null)
        tipo = "nulo";
      else if (A._isInt(value))
        tipo = "inteiro";
      else {
        if (typeof value == "number")
          t1 = "real";
        else if (typeof value == "string")
          t1 = "texto";
        else
          t1 = A._isBool(value) ? "logico" : "desconhecido";
        tipo = t1;
      }
      A.print("\ud83d\udd0d DEBUG: valor=" + A.S(value) + ", tipo=" + tipo);
      return value;
    },
    $signature: 31
  };
  A.StandardLibrary__registerTypeLibrary_closure1.prototype = {
    call$1(args) {
      type$.List_nullable_Object._as(args);
      A.print("\ud83d\udd0d MiniDart Debug Info:");
      A.print("  \u2022 Compilador: v1.17.1");
      A.print("  \u2022 Sistema de tipos: din\xe2mico com infer\xeancia");
      A.print("  \u2022 Fun\xe7\xf5es nativas dispon\xedveis: " + this.$this._functions.__js_helper$_length);
      return null;
    },
    $signature: 6
  };
  A.Symbol.prototype = {};
  A.SymbolTable.prototype = {
    define$1($name) {
      var t1 = this._symbols,
        t2 = $name.lexeme;
      t1.containsKey$1(t2);
      t1.$indexSet(0, t2, new A.Symbol(null));
    },
    assign$1(_, $name) {
      var t1 = this._symbols,
        t2 = $name.lexeme;
      if (t1.containsKey$1(t2))
        return t1.$index(0, t2).isInitialized = true;
      t1 = this.enclosing;
      if (t1 != null)
        return t1.assign$1(0, $name);
      return false;
    },
    $get$1($name) {
      var t1 = this._symbols,
        t2 = $name.lexeme;
      if (t1.containsKey$1(t2))
        return t1.$index(0, t2);
      t1 = this.enclosing;
      if (t1 != null)
        return t1.$get$1($name);
      return null;
    }
  };
  A.TokenType.prototype = {
    _enumToString$0() {
      return "TokenType." + this._name;
    }
  };
  A.Token.prototype = {
    toString$0(_) {
      return "Token(tipo: " + A.TokenTypeExtension_get_nome(this.type) + ", lexema: '" + this.lexeme + "', literal: " + A.S(this.literal) + ")";
    }
  };
  (function aliases() {
    var _ = J.Interceptor.prototype;
    _.super$Interceptor$toString = _.toString$0;
    _ = J.LegacyJavaScriptObject.prototype;
    _.super$LegacyJavaScriptObject$toString = _.toString$0;
    _ = A.Iterable.prototype;
    _.super$Iterable$where = _.where$1;
    _ = A.Element.prototype;
    _.super$Element$createFragment = _.createFragment$3$treeSanitizer$validator;
    _ = A._SimpleNodeValidator.prototype;
    _.super$_SimpleNodeValidator$allowsAttribute = _.allowsAttribute$3;
    _ = A.ErrorReporter.prototype;
    _.super$ErrorReporter$report = _.report$3;
    _.super$ErrorReporter$error = _.error$2;
  })();
  (function installTearOffs() {
    var _static_1 = hunkHelpers._static_1,
      _static_0 = hunkHelpers._static_0,
      _static = hunkHelpers.installStaticTearOff,
      _instance_0_u = hunkHelpers._instance_0u;
    _static_1(A, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 8);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 8);
    _static_1(A, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 8);
    _static_0(A, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 2);
    _static(A, "html__Html5NodeValidator__standardAttributeValidator$closure", 4, null, ["call$4"], ["_Html5NodeValidator__standardAttributeValidator"], 18, 0);
    _static(A, "html__Html5NodeValidator__uriAttributeValidator$closure", 4, null, ["call$4"], ["_Html5NodeValidator__uriAttributeValidator"], 18, 0);
    var _;
    _instance_0_u(_ = A.Parser.prototype, "get$_and", "_and$0", 4);
    _instance_0_u(_, "get$_equality", "_equality$0", 4);
    _instance_0_u(_, "get$_comparison", "_comparison$0", 4);
    _instance_0_u(_, "get$_term", "_term$0", 4);
    _instance_0_u(_, "get$_factor", "_factor$0", 4);
    _instance_0_u(_, "get$_unary", "_unary$0", 4);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(A.Object, null);
    _inheritMany(A.Object, [A.JS_CONST, J.Interceptor, J.ArrayIterator, A.Error, A.SentinelValue, A.Iterable, A.ListIterator, A.MappedIterator, A.WhereIterator, A.TypeErrorDecoder, A.NullThrownFromJavaScriptException, A.ExceptionAndStackTrace, A._StackTrace, A.Closure, A.MapBase, A.LinkedHashMapCell, A.LinkedHashMapKeyIterator, A.JSSyntaxRegExp, A._MatchImplementation, A._AllMatchesIterator, A.StringMatch, A._StringAllMatchesIterator, A.Rti, A._FunctionParameters, A._Type, A._TimerImpl, A._AsyncAwaitCompleter, A.AsyncError, A._FutureListener, A._Future, A._AsyncCallbackEntry, A.Stream, A._StreamIterator, A._Zone, A.SetBase, A._LinkedHashSetCell, A._LinkedHashSetIterator, A.ListBase, A.DateTime, A.Duration, A._Enum, A.OutOfMemoryError, A.StackOverflowError, A._Exception, A.FormatException, A.Null, A._StringStackTrace, A.StringBuffer, A.CssStyleDeclarationBase, A.EventStreamProvider, A._EventStreamSubscription, A._Html5NodeValidator, A.ImmutableListMixin, A.NodeValidatorBuilder, A._SimpleNodeValidator, A._SvgNodeValidator, A.FixedSizeListIterator, A._SameOriginUriPolicy, A._ValidatingTreeSanitizer, A._JSRandom, A.Stmt, A.TypeInfo, A.Parameter, A.CaseStmt, A.Expr, A.ErrorReporter, A.Lexer, A.LiPoPlayground, A.Parser, A.SemanticAnalyzer, A.NativeFunction, A.StandardLibrary, A.Symbol, A.SymbolTable, A.Token]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JavaScriptBigInt, J.JavaScriptSymbol, J.JSNumber, J.JSString]);
    _inheritMany(J.JavaScriptObject, [J.LegacyJavaScriptObject, J.JSArray, A.EventTarget, A._CssStyleDeclaration_JavaScriptObject_CssStyleDeclarationBase, A.DomException, A.DomImplementation, A.Event, A._HtmlCollection_JavaScriptObject_ListMixin, A.Location, A._NodeList_JavaScriptObject_ListMixin, A.__NamedNodeMap_JavaScriptObject_ListMixin]);
    _inheritMany(J.LegacyJavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSNumNotInt]);
    _inheritMany(A.Error, [A.LateError, A.TypeError, A.JsNoSuchMethodError, A.UnknownJsTypeError, A.RuntimeError, A._Error, A.AssertionError, A.ArgumentError, A.UnsupportedError, A.UnimplementedError, A.StateError, A.ConcurrentModificationError, A.ParseError]);
    _inheritMany(A.Iterable, [A.EfficientLengthIterable, A.MappedIterable, A.WhereIterable]);
    _inheritMany(A.EfficientLengthIterable, [A.ListIterable, A.LinkedHashMapKeysIterable]);
    _inheritMany(A.ListIterable, [A.MappedListIterable, A.ReversedListIterable]);
    _inherit(A.NullError, A.TypeError);
    _inheritMany(A.Closure, [A.Closure0Args, A.Closure2Args, A.TearOffClosure, A.initHooks_closure, A.initHooks_closure1, A._AsyncRun__initializeScheduleImmediate_internalCallback, A._AsyncRun__initializeScheduleImmediate_closure, A._awaitOnObject_closure, A._Future__propagateToListeners_handleWhenCompleteCallback_closure, A.Stream_length_closure, A._RootZone_bindUnaryCallbackGuarded_closure, A.DateTime_parse_parseIntOrZero, A.DateTime_parse_parseMilliAndMicroseconds, A.Element_Element$html_closure, A._EventStreamSubscription_closure, A.NodeValidatorBuilder_allowsElement_closure, A.NodeValidatorBuilder_allowsAttribute_closure, A._SimpleNodeValidator_closure, A._SimpleNodeValidator_closure0, A._TemplatingNodeValidator_closure, A.FilteredElementList__iterable_closure, A.FilteredElementList__iterable_closure0, A.LiPoPlayground__setupEventListeners_closure, A.LiPoPlayground__setupEventListeners_closure0, A.LiPoPlayground__setupEventListeners_closure1, A.LiPoPlayground__setupEventListeners_closure2, A.LiPoPlayground__setupEventListeners_closure3, A.LiPoPlayground__simulateExecution_closure, A.StandardLibrary__registerMathLibrary_closure, A.StandardLibrary__registerMathLibrary_closure0, A.StandardLibrary__registerMathLibrary_closure1, A.StandardLibrary__registerMathLibrary_closure2, A.StandardLibrary__registerMathLibrary_closure3, A.StandardLibrary__registerMathLibrary_closure4, A.StandardLibrary__registerMathLibrary_closure5, A.StandardLibrary__registerMathLibrary_closure6, A.StandardLibrary__registerMathLibrary_closure7, A.StandardLibrary__registerMathLibrary_closure8, A.StandardLibrary__registerMathLibrary_closure9, A.StandardLibrary__registerMathLibrary_closure10, A.StandardLibrary__registerMathLibrary_closure11, A.StandardLibrary__registerMathLibrary_closure12, A.StandardLibrary__registerMathLibrary_closure13, A.StandardLibrary__registerMathLibrary_closure14, A.StandardLibrary__registerMathLibrary_closure15, A.StandardLibrary__registerMathLibrary_closure16, A.StandardLibrary__registerMathLibrary_closure17, A.StandardLibrary__registerMathLibrary_closure18, A.StandardLibrary__registerMathLibrary_closure19, A.StandardLibrary__registerMathLibrary_closure20, A.StandardLibrary__registerMathLibrary_closure21, A.StandardLibrary__registerMathLibrary_closure22, A.StandardLibrary__registerMathLibrary_closure23, A.StandardLibrary__registerMathLibrary_closure24, A.StandardLibrary__registerStringLibrary_closure, A.StandardLibrary__registerStringLibrary_closure0, A.StandardLibrary__registerStringLibrary_closure1, A.StandardLibrary__registerStringLibrary_closure2, A.StandardLibrary__registerStringLibrary_closure3, A.StandardLibrary__registerStringLibrary_closure4, A.StandardLibrary__registerStringLibrary_closure5, A.StandardLibrary__registerStringLibrary_closure6, A.StandardLibrary__registerStringLibrary_closure7, A.StandardLibrary__registerStringLibrary_closure8, A.StandardLibrary__registerStringLibrary_closure9, A.StandardLibrary__registerStringLibrary_closure10, A.StandardLibrary__registerStringLibrary_closure11, A.StandardLibrary__registerStringLibrary_closure12, A.StandardLibrary__registerStringLibrary_closure13, A.StandardLibrary__registerStringLibrary_closure14, A.StandardLibrary__registerStringLibrary_closure15, A.StandardLibrary__registerStringLibrary_closure16, A.StandardLibrary__registerIOLibrary_closure, A.StandardLibrary__registerIOLibrary_closure0, A.StandardLibrary__registerIOLibrary_closure1, A.StandardLibrary__registerIOLibrary_closure2, A.StandardLibrary__registerIOLibrary_closure3, A.StandardLibrary__registerDataLibrary_closure, A.StandardLibrary__registerDataLibrary_closure0, A.StandardLibrary__registerDataLibrary_closure1, A.StandardLibrary__registerDataLibrary_closure2, A.StandardLibrary__registerDataLibrary_closure3, A.StandardLibrary__registerDataLibrary_closure4, A.StandardLibrary__registerDataLibrary_closure5, A.StandardLibrary__registerDataLibrary_closure6, A.StandardLibrary__registerDataLibrary_closure7, A.StandardLibrary__registerDataLibrary_closure8, A.StandardLibrary__registerDataLibrary_closure9, A.StandardLibrary__registerDataLibrary_closure10, A.StandardLibrary__registerTypeLibrary_closure, A.StandardLibrary__registerTypeLibrary_closure0, A.StandardLibrary__registerTypeLibrary_closure1]);
    _inheritMany(A.TearOffClosure, [A.StaticClosure, A.BoundClosure]);
    _inheritMany(A.MapBase, [A.JsLinkedHashMap, A._AttributeMap]);
    _inheritMany(A.Closure2Args, [A.initHooks_closure0, A._awaitOnObject_closure0, A._wrapJsFunctionForAsync_closure, A._Future__propagateToListeners_handleWhenCompleteCallback_closure0, A.MapBase_mapToString_closure, A._ValidatingTreeSanitizer_sanitizeTree_walk]);
    _inherit(A._TypeError, A._Error);
    _inheritMany(A.Closure0Args, [A._AsyncRun__scheduleImmediateJsOverride_internalCallback, A._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, A._TimerImpl_internalCallback, A.Future_Future$delayed_closure, A._Future__addListener_closure, A._Future__prependListeners_closure, A._Future__chainCoreFuture_closure, A._Future__asyncCompleteWithValue_closure, A._Future__asyncCompleteErrorObject_closure, A._Future__propagateToListeners_handleWhenCompleteCallback, A._Future__propagateToListeners_handleValueCallback, A._Future__propagateToListeners_handleError, A.Stream_length_closure0, A._rootHandleError_closure, A._RootZone_bindCallbackGuarded_closure]);
    _inherit(A._RootZone, A._Zone);
    _inherit(A._SetBase, A.SetBase);
    _inherit(A._LinkedHashSet, A._SetBase);
    _inheritMany(A.ArgumentError, [A.RangeError, A.IndexError]);
    _inherit(A.Node, A.EventTarget);
    _inheritMany(A.Node, [A.Element, A.CharacterData, A.Document, A._Attr]);
    _inheritMany(A.Element, [A.HtmlElement, A.SvgElement]);
    _inheritMany(A.HtmlElement, [A.AnchorElement, A.AreaElement, A.BaseElement, A.BodyElement, A.ButtonElement, A.DivElement, A.FormElement, A.SelectElement, A.SpanElement, A.TableElement, A.TableRowElement, A.TableSectionElement, A.TemplateElement, A.TextAreaElement]);
    _inherit(A.CssStyleDeclaration, A._CssStyleDeclaration_JavaScriptObject_CssStyleDeclarationBase);
    _inheritMany(A.ListBase, [A._ChildrenElementList, A._ChildNodeListLazy, A.FilteredElementList]);
    _inherit(A._HtmlCollection_JavaScriptObject_ListMixin_ImmutableListMixin, A._HtmlCollection_JavaScriptObject_ListMixin);
    _inherit(A.HtmlCollection, A._HtmlCollection_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A.HtmlDocument, A.Document);
    _inherit(A.UIEvent, A.Event);
    _inheritMany(A.UIEvent, [A.KeyboardEvent, A.MouseEvent]);
    _inherit(A._NodeList_JavaScriptObject_ListMixin_ImmutableListMixin, A._NodeList_JavaScriptObject_ListMixin);
    _inherit(A.NodeList, A._NodeList_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A.__NamedNodeMap_JavaScriptObject_ListMixin_ImmutableListMixin, A.__NamedNodeMap_JavaScriptObject_ListMixin);
    _inherit(A._NamedNodeMap, A.__NamedNodeMap_JavaScriptObject_ListMixin_ImmutableListMixin);
    _inherit(A._ElementAttributeMap, A._AttributeMap);
    _inherit(A._EventStream, A.Stream);
    _inherit(A._ElementEventStreamImpl, A._EventStream);
    _inherit(A._TemplatingNodeValidator, A._SimpleNodeValidator);
    _inherit(A.ScriptElement0, A.SvgElement);
    _inheritMany(A.Stmt, [A.BlockStmt, A.ExpressionStmt, A.IfStmt, A.PrintStmt, A.VarDeclStmt, A.TypedVarDeclStmt, A.ConstDeclStmt, A.WhileStmt, A.DoWhileStmt, A.ForStmt, A.ForStepStmt, A.ForCStmt, A.FunctionStmt, A.ReturnStmt, A.BreakStmt, A.ContinueStmt, A.ImportStmt, A.SwitchStmt]);
    _inheritMany(A.Expr, [A.AssignExpr, A.CompoundAssignExpr, A.IncrementExpr, A.DecrementExpr, A.BinaryExpr, A.GroupingExpr, A.TernaryExpr, A.LiteralExpr, A.UnaryExpr, A.VariableExpr, A.CallExpr, A.MemberAccessExpr]);
    _inherit(A.WebErrorReporter, A.ErrorReporter);
    _inherit(A.TokenType, A._Enum);
    _mixin(A._CssStyleDeclaration_JavaScriptObject_CssStyleDeclarationBase, A.CssStyleDeclarationBase);
    _mixin(A._HtmlCollection_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A._HtmlCollection_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A._NodeList_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A._NodeList_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
    _mixin(A.__NamedNodeMap_JavaScriptObject_ListMixin, A.ListBase);
    _mixin(A.__NamedNodeMap_JavaScriptObject_ListMixin_ImmutableListMixin, A.ImmutableListMixin);
  })();
  var init = {
    G: typeof self != "undefined" ? self : globalThis,
    typeUniverse: {eC: new Map(), tR: {}, eT: {}, tPV: {}, sEA: []},
    mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List", Object: "Object", Map: "Map"},
    mangledNames: {},
    types: ["double(List<Object?>)", "String(List<Object?>)", "~()", "int(List<Object?>)", "Expr()", "bool(List<Object?>)", "Null(List<Object?>)", "~(MouseEvent)", "~(~())", "Null(@)", "Null()", "int(String?)", "bool(Node)", "~(Event)", "bool(NodeValidator)", "bool(String)", "String(String)", "num(List<Object?>)", "bool(Element,String,String,_Html5NodeValidator)", "@(@)", "@(@,String)", "@(String)", "Null(~())", "~(@)", "Null(@,StackTrace)", "~(int,@)", "Null(Object,StackTrace)", "~(Object?,Object?)", "~(Node,Node?)", "Element(Node)", "~(KeyboardEvent)", "Object?(List<Object?>)"],
    interceptorsByTag: null,
    leafTags: null,
    arrayRti: Symbol("$ti")
  };
  A._Universe_addRules(init.typeUniverse, JSON.parse('{"PlainJavaScriptObject":"LegacyJavaScriptObject","UnknownJavaScriptObject":"LegacyJavaScriptObject","JavaScriptFunction":"LegacyJavaScriptObject","AbortPaymentEvent":"Event","ExtendableEvent":"Event","AElement":"SvgElement","GraphicsElement":"SvgElement","AudioElement":"HtmlElement","MediaElement":"HtmlElement","ShadowRoot":"Node","DocumentFragment":"Node","XmlDocument":"Document","Window":"EventTarget","PointerEvent":"MouseEvent","CompositionEvent":"UIEvent","CDataSection":"CharacterData","Text":"CharacterData","MathMLElement":"Element","HtmlFormControlsCollection":"HtmlCollection","JSBool":{"bool":[],"TrustedGetRuntimeType":[]},"JSNull":{"TrustedGetRuntimeType":[]},"JSArray":{"List":["1"],"Iterable":["1"]},"JSUnmodifiableArray":{"JSArray":["1"],"List":["1"],"Iterable":["1"]},"ArrayIterator":{"Iterator":["1"]},"JSNumber":{"num":[]},"JSInt":{"int":[],"num":[],"TrustedGetRuntimeType":[]},"JSNumNotInt":{"num":[],"TrustedGetRuntimeType":[]},"JSString":{"String":[],"Pattern":[],"TrustedGetRuntimeType":[]},"LateError":{"Error":[]},"EfficientLengthIterable":{"Iterable":["1"]},"ListIterable":{"Iterable":["1"]},"ListIterator":{"Iterator":["1"]},"MappedIterable":{"Iterable":["2"],"Iterable.E":"2"},"MappedIterator":{"Iterator":["2"]},"MappedListIterable":{"ListIterable":["2"],"Iterable":["2"],"ListIterable.E":"2","Iterable.E":"2"},"WhereIterable":{"Iterable":["1"],"Iterable.E":"1"},"WhereIterator":{"Iterator":["1"]},"ReversedListIterable":{"ListIterable":["1"],"Iterable":["1"],"ListIterable.E":"1","Iterable.E":"1"},"NullError":{"TypeError":[],"Error":[]},"JsNoSuchMethodError":{"Error":[]},"UnknownJsTypeError":{"Error":[]},"_StackTrace":{"StackTrace":[]},"Closure":{"Function":[]},"Closure0Args":{"Function":[]},"Closure2Args":{"Function":[]},"TearOffClosure":{"Function":[]},"StaticClosure":{"Function":[]},"BoundClosure":{"Function":[]},"RuntimeError":{"Error":[]},"JsLinkedHashMap":{"MapBase":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapBase.K":"1","MapBase.V":"2"},"LinkedHashMapKeysIterable":{"Iterable":["1"],"Iterable.E":"1"},"LinkedHashMapKeyIterator":{"Iterator":["1"]},"JSSyntaxRegExp":{"RegExp":[],"Pattern":[]},"_MatchImplementation":{"RegExpMatch":[],"Match":[]},"_AllMatchesIterator":{"Iterator":["RegExpMatch"]},"StringMatch":{"Match":[]},"_StringAllMatchesIterator":{"Iterator":["Match"]},"_Error":{"Error":[]},"_TypeError":{"TypeError":[],"Error":[]},"AsyncError":{"Error":[]},"_Future":{"Future":["1"]},"_Zone":{"Zone":[]},"_RootZone":{"_Zone":[],"Zone":[]},"_LinkedHashSet":{"SetBase":["1"],"Set":["1"],"Iterable":["1"]},"_LinkedHashSetIterator":{"Iterator":["1"]},"ListBase":{"List":["1"],"Iterable":["1"]},"MapBase":{"Map":["1","2"]},"SetBase":{"Set":["1"],"Iterable":["1"]},"_SetBase":{"SetBase":["1"],"Set":["1"],"Iterable":["1"]},"double":{"num":[]},"int":{"num":[]},"List":{"Iterable":["1"]},"RegExpMatch":{"Match":[]},"String":{"Pattern":[]},"AssertionError":{"Error":[]},"TypeError":{"Error":[]},"ArgumentError":{"Error":[]},"RangeError":{"Error":[]},"IndexError":{"Error":[]},"UnsupportedError":{"Error":[]},"UnimplementedError":{"Error":[]},"StateError":{"Error":[]},"ConcurrentModificationError":{"Error":[]},"OutOfMemoryError":{"Error":[]},"StackOverflowError":{"Error":[]},"_StringStackTrace":{"StackTrace":[]},"Element":{"Node":[],"EventTarget":[]},"KeyboardEvent":{"Event":[]},"MouseEvent":{"Event":[]},"Node":{"EventTarget":[]},"_Html5NodeValidator":{"NodeValidator":[]},"HtmlElement":{"Element":[],"Node":[],"EventTarget":[]},"AnchorElement":{"Element":[],"Node":[],"EventTarget":[]},"AreaElement":{"Element":[],"Node":[],"EventTarget":[]},"BaseElement":{"Element":[],"Node":[],"EventTarget":[]},"BodyElement":{"Element":[],"Node":[],"EventTarget":[]},"ButtonElement":{"Element":[],"Node":[],"EventTarget":[]},"CharacterData":{"Node":[],"EventTarget":[]},"DivElement":{"Element":[],"Node":[],"EventTarget":[]},"Document":{"Node":[],"EventTarget":[]},"_ChildrenElementList":{"ListBase":["Element"],"List":["Element"],"Iterable":["Element"],"ListBase.E":"Element"},"FormElement":{"Element":[],"Node":[],"EventTarget":[]},"HtmlCollection":{"ListBase":["Node"],"ImmutableListMixin":["Node"],"List":["Node"],"JavaScriptIndexingBehavior":["Node"],"Iterable":["Node"],"ListBase.E":"Node","ImmutableListMixin.E":"Node"},"HtmlDocument":{"Node":[],"EventTarget":[]},"_ChildNodeListLazy":{"ListBase":["Node"],"List":["Node"],"Iterable":["Node"],"ListBase.E":"Node"},"NodeList":{"ListBase":["Node"],"ImmutableListMixin":["Node"],"List":["Node"],"JavaScriptIndexingBehavior":["Node"],"Iterable":["Node"],"ListBase.E":"Node","ImmutableListMixin.E":"Node"},"SelectElement":{"Element":[],"Node":[],"EventTarget":[]},"SpanElement":{"Element":[],"Node":[],"EventTarget":[]},"TableElement":{"Element":[],"Node":[],"EventTarget":[]},"TableRowElement":{"Element":[],"Node":[],"EventTarget":[]},"TableSectionElement":{"Element":[],"Node":[],"EventTarget":[]},"TemplateElement":{"Element":[],"Node":[],"EventTarget":[]},"TextAreaElement":{"Element":[],"Node":[],"EventTarget":[]},"UIEvent":{"Event":[]},"_Attr":{"Node":[],"EventTarget":[]},"_NamedNodeMap":{"ListBase":["Node"],"ImmutableListMixin":["Node"],"List":["Node"],"JavaScriptIndexingBehavior":["Node"],"Iterable":["Node"],"ListBase.E":"Node","ImmutableListMixin.E":"Node"},"_AttributeMap":{"MapBase":["String","String"],"Map":["String","String"]},"_ElementAttributeMap":{"MapBase":["String","String"],"Map":["String","String"],"MapBase.K":"String","MapBase.V":"String"},"_EventStream":{"Stream":["1"]},"_ElementEventStreamImpl":{"_EventStream":["1"],"Stream":["1"]},"_EventStreamSubscription":{"StreamSubscription":["1"]},"NodeValidatorBuilder":{"NodeValidator":[]},"_SimpleNodeValidator":{"NodeValidator":[]},"_TemplatingNodeValidator":{"NodeValidator":[]},"_SvgNodeValidator":{"NodeValidator":[]},"FixedSizeListIterator":{"Iterator":["1"]},"_SameOriginUriPolicy":{"UriPolicy":[]},"_ValidatingTreeSanitizer":{"NodeTreeSanitizer":[]},"FilteredElementList":{"ListBase":["Element"],"List":["Element"],"Iterable":["Element"],"ListBase.E":"Element"},"ScriptElement0":{"SvgElement":[],"Element":[],"Node":[],"EventTarget":[]},"SvgElement":{"Element":[],"Node":[],"EventTarget":[]},"BlockStmt":{"Stmt":[]},"ExpressionStmt":{"Stmt":[]},"IfStmt":{"Stmt":[]},"PrintStmt":{"Stmt":[]},"VarDeclStmt":{"Stmt":[]},"TypedVarDeclStmt":{"Stmt":[]},"ConstDeclStmt":{"Stmt":[]},"WhileStmt":{"Stmt":[]},"DoWhileStmt":{"Stmt":[]},"ForStmt":{"Stmt":[]},"ForStepStmt":{"Stmt":[]},"ForCStmt":{"Stmt":[]},"FunctionStmt":{"Stmt":[]},"ReturnStmt":{"Stmt":[]},"BreakStmt":{"Stmt":[]},"ContinueStmt":{"Stmt":[]},"ImportStmt":{"Stmt":[]},"SwitchStmt":{"Stmt":[]},"AssignExpr":{"Expr":[]},"CompoundAssignExpr":{"Expr":[]},"IncrementExpr":{"Expr":[]},"DecrementExpr":{"Expr":[]},"BinaryExpr":{"Expr":[]},"GroupingExpr":{"Expr":[]},"TernaryExpr":{"Expr":[]},"LiteralExpr":{"Expr":[]},"UnaryExpr":{"Expr":[]},"VariableExpr":{"Expr":[]},"CallExpr":{"Expr":[]},"MemberAccessExpr":{"Expr":[]},"WebErrorReporter":{"ErrorReporter":[]},"ParseError":{"Error":[]},"SemanticAnalyzer":{"AstVisitor":["~"]}}'));
  A._Universe_addErasedTypes(init.typeUniverse, JSON.parse('{"EfficientLengthIterable":1,"_SetBase":1}'));
  var string$ = {
    Error_: "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a value of the returned future's type",
    Operadx2b: "Operador '++' s\xf3 pode ser aplicado a vari\xe1veis.",
    Operadx2d: "Operador '--' s\xf3 pode ser aplicado a vari\xe1veis."
  };
  var type$ = (function rtii() {
    var findType = A.findType;
    return {
      AsyncError: findType("AsyncError"),
      BaseElement: findType("BaseElement"),
      BodyElement: findType("BodyElement"),
      ButtonElement: findType("ButtonElement"),
      DateTime: findType("DateTime"),
      DivElement: findType("DivElement"),
      Element: findType("Element"),
      Error: findType("Error"),
      Event: findType("Event"),
      Expr_Function: findType("Expr()"),
      Function: findType("Function"),
      Iterable_Node: findType("Iterable<Node>"),
      Iterable_dynamic: findType("Iterable<@>"),
      JSArray_CaseStmt: findType("JSArray<CaseStmt>"),
      JSArray_Expr: findType("JSArray<Expr>"),
      JSArray_NodeValidator: findType("JSArray<NodeValidator>"),
      JSArray_Parameter: findType("JSArray<Parameter>"),
      JSArray_Stmt: findType("JSArray<Stmt>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray_Token: findType("JSArray<Token>"),
      JSArray_TokenType: findType("JSArray<TokenType>"),
      JSArray_dynamic: findType("JSArray<@>"),
      JSNull: findType("JSNull"),
      JavaScriptFunction: findType("JavaScriptFunction"),
      JavaScriptIndexingBehavior_dynamic: findType("JavaScriptIndexingBehavior<@>"),
      KeyboardEvent: findType("KeyboardEvent"),
      List_Stmt: findType("List<Stmt>"),
      List_TokenType: findType("List<TokenType>"),
      List_dynamic: findType("List<@>"),
      List_nullable_Object: findType("List<Object?>"),
      Location: findType("Location"),
      Map_dynamic_dynamic: findType("Map<@,@>"),
      MappedListIterable_String_String: findType("MappedListIterable<String,String>"),
      MouseEvent: findType("MouseEvent"),
      NativeFunction: findType("NativeFunction"),
      Node: findType("Node"),
      NodeValidator: findType("NodeValidator"),
      Null: findType("Null"),
      Object: findType("Object"),
      Record: findType("Record"),
      RegExpMatch: findType("RegExpMatch"),
      ReversedListIterable_String: findType("ReversedListIterable<String>"),
      ScriptElement: findType("ScriptElement0"),
      SpanElement: findType("SpanElement"),
      StackTrace: findType("StackTrace"),
      String: findType("String"),
      String_Function_String: findType("String(String)"),
      SvgElement: findType("SvgElement"),
      Symbol: findType("Symbol"),
      TemplateElement: findType("TemplateElement"),
      TrustedGetRuntimeType: findType("TrustedGetRuntimeType"),
      TypeError: findType("TypeError"),
      UnknownJavaScriptObject: findType("UnknownJavaScriptObject"),
      _Attr: findType("_Attr"),
      _ChildNodeListLazy: findType("_ChildNodeListLazy"),
      _ElementEventStreamImpl_Event: findType("_ElementEventStreamImpl<Event>"),
      _ElementEventStreamImpl_KeyboardEvent: findType("_ElementEventStreamImpl<KeyboardEvent>"),
      _ElementEventStreamImpl_MouseEvent: findType("_ElementEventStreamImpl<MouseEvent>"),
      _Future_dynamic: findType("_Future<@>"),
      _Future_int: findType("_Future<int>"),
      _Html5NodeValidator: findType("_Html5NodeValidator"),
      bool: findType("bool"),
      bool_Function_Object: findType("bool(Object)"),
      double: findType("double"),
      dynamic: findType("@"),
      dynamic_Function: findType("@()"),
      dynamic_Function_List_nullable_Object: findType("@(List<Object?>)"),
      dynamic_Function_Object: findType("@(Object)"),
      dynamic_Function_Object_StackTrace: findType("@(Object,StackTrace)"),
      int: findType("int"),
      nullable_Future_Null: findType("Future<Null>?"),
      nullable_Object: findType("Object?"),
      nullable_String: findType("String?"),
      nullable_TextAreaElement: findType("TextAreaElement?"),
      nullable__FutureListener_dynamic_dynamic: findType("_FutureListener<@,@>?"),
      nullable__LinkedHashSetCell: findType("_LinkedHashSetCell?"),
      nullable_bool: findType("bool?"),
      nullable_double: findType("double?"),
      nullable_dynamic_Function_Event: findType("@(Event)?"),
      nullable_int: findType("int?"),
      nullable_num: findType("num?"),
      nullable_void_Function: findType("~()?"),
      num: findType("num"),
      void: findType("~"),
      void_Function: findType("~()"),
      void_Function_String_String: findType("~(String,String)")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    B.AnchorElement_methods = A.AnchorElement.prototype;
    B.BodyElement_methods = A.BodyElement.prototype;
    B.CssStyleDeclaration_methods = A.CssStyleDeclaration.prototype;
    B.DivElement_methods = A.DivElement.prototype;
    B.DomImplementation_methods = A.DomImplementation.prototype;
    B.HtmlDocument_methods = A.HtmlDocument.prototype;
    B.Interceptor_methods = J.Interceptor.prototype;
    B.JSArray_methods = J.JSArray.prototype;
    B.JSInt_methods = J.JSInt.prototype;
    B.JSNumber_methods = J.JSNumber.prototype;
    B.JSString_methods = J.JSString.prototype;
    B.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    B.JavaScriptObject_methods = J.JavaScriptObject.prototype;
    B.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    B.SpanElement_methods = A.SpanElement.prototype;
    B.TableElement_methods = A.TableElement.prototype;
    B.TextAreaElement_methods = A.TextAreaElement.prototype;
    B.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    B.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    B.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof HTMLElement == "function";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    B.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var userAgent = navigator.userAgent;
    if (typeof userAgent != "string") return hooks;
    if (userAgent.indexOf("DumpRenderTree") >= 0) return hooks;
    if (userAgent.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    B.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    B.C_JS_CONST5 = function(hooks) {
  if (typeof navigator != "object") return hooks;
  var userAgent = navigator.userAgent;
  if (typeof userAgent != "string") return hooks;
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    B.C_JS_CONST4 = function(hooks) {
  if (typeof navigator != "object") return hooks;
  var userAgent = navigator.userAgent;
  if (typeof userAgent != "string") return hooks;
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    B.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    B.C_JS_CONST3 = function(hooks) { return hooks; }
;
    B.C_OutOfMemoryError = new A.OutOfMemoryError();
    B.C_SentinelValue = new A.SentinelValue();
    B.C__JSRandom = new A._JSRandom();
    B.C__RootZone = new A._RootZone();
    B.C__StringStackTrace = new A._StringStackTrace();
    B.Duration_0 = new A.Duration(0);
    B.List_PHW = A._setArrayType(makeConstList(["", "Segunda-feira", "Ter\xe7a-feira", "Quarta-feira", "Quinta-feira", "Sexta-feira", "S\xe1bado", "Domingo"]), type$.JSArray_String);
    B.List_empty = A._setArrayType(makeConstList([]), type$.JSArray_String);
    B.List_pgZ = A._setArrayType(makeConstList(["bind", "if", "ref", "repeat", "syntax"]), type$.JSArray_String);
    B.List_ql7 = A._setArrayType(makeConstList(["A::href", "AREA::href", "BLOCKQUOTE::cite", "BODY::background", "COMMAND::icon", "DEL::cite", "FORM::action", "IMG::src", "INPUT::src", "INS::cite", "Q::cite", "VIDEO::poster"]), type$.JSArray_String);
    B.List_tEi = A._setArrayType(makeConstList(["HEAD", "AREA", "BASE", "BASEFONT", "BR", "COL", "COLGROUP", "EMBED", "FRAME", "FRAMESET", "HR", "IMAGE", "IMG", "INPUT", "ISINDEX", "LINK", "META", "PARAM", "SOURCE", "STYLE", "TITLE", "WBR"]), type$.JSArray_String);
    B.List_xWm = A._setArrayType(makeConstList(["*::class", "*::dir", "*::draggable", "*::hidden", "*::id", "*::inert", "*::itemprop", "*::itemref", "*::itemscope", "*::lang", "*::spellcheck", "*::title", "*::translate", "A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "AREA::accesskey", "AREA::alt", "AREA::coords", "AREA::nohref", "AREA::shape", "AREA::tabindex", "AREA::target", "AUDIO::controls", "AUDIO::loop", "AUDIO::mediagroup", "AUDIO::muted", "AUDIO::preload", "BDO::dir", "BODY::alink", "BODY::bgcolor", "BODY::link", "BODY::text", "BODY::vlink", "BR::clear", "BUTTON::accesskey", "BUTTON::disabled", "BUTTON::name", "BUTTON::tabindex", "BUTTON::type", "BUTTON::value", "CANVAS::height", "CANVAS::width", "CAPTION::align", "COL::align", "COL::char", "COL::charoff", "COL::span", "COL::valign", "COL::width", "COLGROUP::align", "COLGROUP::char", "COLGROUP::charoff", "COLGROUP::span", "COLGROUP::valign", "COLGROUP::width", "COMMAND::checked", "COMMAND::command", "COMMAND::disabled", "COMMAND::label", "COMMAND::radiogroup", "COMMAND::type", "DATA::value", "DEL::datetime", "DETAILS::open", "DIR::compact", "DIV::align", "DL::compact", "FIELDSET::disabled", "FONT::color", "FONT::face", "FONT::size", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target", "FRAME::name", "H1::align", "H2::align", "H3::align", "H4::align", "H5::align", "H6::align", "HR::align", "HR::noshade", "HR::size", "HR::width", "HTML::version", "IFRAME::align", "IFRAME::frameborder", "IFRAME::height", "IFRAME::marginheight", "IFRAME::marginwidth", "IFRAME::width", "IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width", "INPUT::accept", "INPUT::accesskey", "INPUT::align", "INPUT::alt", "INPUT::autocomplete", "INPUT::autofocus", "INPUT::checked", "INPUT::disabled", "INPUT::inputmode", "INPUT::ismap", "INPUT::list", "INPUT::max", "INPUT::maxlength", "INPUT::min", "INPUT::multiple", "INPUT::name", "INPUT::placeholder", "INPUT::readonly", "INPUT::required", "INPUT::size", "INPUT::step", "INPUT::tabindex", "INPUT::type", "INPUT::usemap", "INPUT::value", "INS::datetime", "KEYGEN::disabled", "KEYGEN::keytype", "KEYGEN::name", "LABEL::accesskey", "LABEL::for", "LEGEND::accesskey", "LEGEND::align", "LI::type", "LI::value", "LINK::sizes", "MAP::name", "MENU::compact", "MENU::label", "MENU::type", "METER::high", "METER::low", "METER::max", "METER::min", "METER::value", "OBJECT::typemustmatch", "OL::compact", "OL::reversed", "OL::start", "OL::type", "OPTGROUP::disabled", "OPTGROUP::label", "OPTION::disabled", "OPTION::label", "OPTION::selected", "OPTION::value", "OUTPUT::for", "OUTPUT::name", "P::align", "PRE::width", "PROGRESS::max", "PROGRESS::min", "PROGRESS::value", "SELECT::autocomplete", "SELECT::disabled", "SELECT::multiple", "SELECT::name", "SELECT::required", "SELECT::size", "SELECT::tabindex", "SOURCE::type", "TABLE::align", "TABLE::bgcolor", "TABLE::border", "TABLE::cellpadding", "TABLE::cellspacing", "TABLE::frame", "TABLE::rules", "TABLE::summary", "TABLE::width", "TBODY::align", "TBODY::char", "TBODY::charoff", "TBODY::valign", "TD::abbr", "TD::align", "TD::axis", "TD::bgcolor", "TD::char", "TD::charoff", "TD::colspan", "TD::headers", "TD::height", "TD::nowrap", "TD::rowspan", "TD::scope", "TD::valign", "TD::width", "TEXTAREA::accesskey", "TEXTAREA::autocomplete", "TEXTAREA::cols", "TEXTAREA::disabled", "TEXTAREA::inputmode", "TEXTAREA::name", "TEXTAREA::placeholder", "TEXTAREA::readonly", "TEXTAREA::required", "TEXTAREA::rows", "TEXTAREA::tabindex", "TEXTAREA::wrap", "TFOOT::align", "TFOOT::char", "TFOOT::charoff", "TFOOT::valign", "TH::abbr", "TH::align", "TH::axis", "TH::bgcolor", "TH::char", "TH::charoff", "TH::colspan", "TH::headers", "TH::height", "TH::nowrap", "TH::rowspan", "TH::scope", "TH::valign", "TH::width", "THEAD::align", "THEAD::char", "THEAD::charoff", "THEAD::valign", "TR::align", "TR::bgcolor", "TR::char", "TR::charoff", "TR::valign", "TRACK::default", "TRACK::kind", "TRACK::label", "TRACK::srclang", "UL::compact", "UL::type", "VIDEO::controls", "VIDEO::height", "VIDEO::loop", "VIDEO::mediagroup", "VIDEO::muted", "VIDEO::preload", "VIDEO::width"]), type$.JSArray_String);
    B.List_zO0 = A._setArrayType(makeConstList(["", "Janeiro", "Fevereiro", "Mar\xe7o", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"]), type$.JSArray_String);
    B.TokenType_0 = new A.TokenType("leftParen");
    B.TokenType_1 = new A.TokenType("rightParen");
    B.TokenType_10 = new A.TokenType("percent");
    B.TokenType_11 = new A.TokenType("semicolon");
    B.TokenType_12 = new A.TokenType("slash");
    B.TokenType_13 = new A.TokenType("star");
    B.TokenType_14 = new A.TokenType("question");
    B.TokenType_15 = new A.TokenType("colon");
    B.TokenType_16 = new A.TokenType("bang");
    B.TokenType_17 = new A.TokenType("bangEqual");
    B.TokenType_18 = new A.TokenType("equal");
    B.TokenType_19 = new A.TokenType("equalEqual");
    B.TokenType_2 = new A.TokenType("leftBrace");
    B.TokenType_20 = new A.TokenType("plusEqual");
    B.TokenType_21 = new A.TokenType("minusEqual");
    B.TokenType_22 = new A.TokenType("starEqual");
    B.TokenType_23 = new A.TokenType("slashEqual");
    B.TokenType_24 = new A.TokenType("percentEqual");
    B.TokenType_25 = new A.TokenType("greater");
    B.TokenType_26 = new A.TokenType("greaterEqual");
    B.TokenType_27 = new A.TokenType("less");
    B.TokenType_28 = new A.TokenType("lessEqual");
    B.TokenType_29 = new A.TokenType("identifier");
    B.TokenType_3 = new A.TokenType("rightBrace");
    B.TokenType_30 = new A.TokenType("string");
    B.TokenType_31 = new A.TokenType("number");
    B.TokenType_32 = new A.TokenType("and");
    B.TokenType_33 = new A.TokenType("else_");
    B.TokenType_34 = new A.TokenType("false_");
    B.TokenType_35 = new A.TokenType("for_");
    B.TokenType_36 = new A.TokenType("if_");
    B.TokenType_37 = new A.TokenType("nil");
    B.TokenType_38 = new A.TokenType("or");
    B.TokenType_39 = new A.TokenType("print_");
    B.TokenType_4 = new A.TokenType("comma");
    B.TokenType_40 = new A.TokenType("return_");
    B.TokenType_41 = new A.TokenType("true_");
    B.TokenType_42 = new A.TokenType("var_");
    B.TokenType_43 = new A.TokenType("while_");
    B.TokenType_44 = new A.TokenType("break_");
    B.TokenType_45 = new A.TokenType("continue_");
    B.TokenType_46 = new A.TokenType("switch_");
    B.TokenType_47 = new A.TokenType("case_");
    B.TokenType_48 = new A.TokenType("default_");
    B.TokenType_49 = new A.TokenType("to_");
    B.TokenType_5 = new A.TokenType("dot");
    B.TokenType_50 = new A.TokenType("do_");
    B.TokenType_51 = new A.TokenType("increment_");
    B.TokenType_52 = new A.TokenType("decrement_");
    B.TokenType_53 = new A.TokenType("dowhile_");
    B.TokenType_54 = new A.TokenType("inteiro");
    B.TokenType_55 = new A.TokenType("real");
    B.TokenType_56 = new A.TokenType("texto");
    B.TokenType_57 = new A.TokenType("logico");
    B.TokenType_58 = new A.TokenType("vazio");
    B.TokenType_59 = new A.TokenType("constante");
    B.TokenType_6 = new A.TokenType("minus");
    B.TokenType_60 = new A.TokenType("import_");
    B.TokenType_61 = new A.TokenType("as_");
    B.TokenType_62 = new A.TokenType("typeof_");
    B.TokenType_63 = new A.TokenType("eof");
    B.TokenType_7 = new A.TokenType("plus");
    B.TokenType_8 = new A.TokenType("plusPlus");
    B.TokenType_9 = new A.TokenType("minusMinus");
    B.Type_Object_A4p = A.typeLiteral("Object");
  })();
  (function staticFields() {
    $._JS_INTEROP_INTERCEPTOR_TAG = null;
    $.toStringVisiting = A._setArrayType([], A.findType("JSArray<Object>"));
    $.Primitives__identityHashCodeProperty = null;
    $.BoundClosure__receiverFieldNameCache = null;
    $.BoundClosure__interceptorFieldNameCache = null;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = B.C__RootZone;
    $.Element__parseDocument = null;
    $.Element__parseRange = null;
    $.Element__defaultValidator = null;
    $.Element__defaultSanitizer = null;
    $._Html5NodeValidator__attributeValidators = A.LinkedHashMap_LinkedHashMap$_empty(type$.String, type$.Function);
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal;
    _lazyFinal($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", () => A.getIsolateAffinityTag("_$dart_dartClosure"));
    _lazyFinal($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({
      toString: function() {
        return "$receiver$";
      }
    })));
    _lazyFinal($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
      toString: function() {
        return "$receiver$";
      }
    })));
    _lazyFinal($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(null)));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = "$arguments$";
      try {
        null.$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokeCallErrorOn(void 0)));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      var $argumentsExpr$ = "$arguments$";
      try {
        (void 0).$method$($argumentsExpr$);
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(null)));
    _lazyFinal($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      try {
        null.$method$;
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", () => A.TypeErrorDecoder_extractPattern(A.TypeErrorDecoder_provokePropertyErrorOn(void 0)));
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", () => A.TypeErrorDecoder_extractPattern(function() {
      try {
        (void 0).$method$;
      } catch (e) {
        return e.message;
      }
    }()));
    _lazyFinal($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", () => A._AsyncRun__initializeScheduleImmediate());
    _lazyFinal($, "DateTime__parseFormat", "$get$DateTime__parseFormat", () => A.RegExp_RegExp("^([+-]?\\d{4,6})-?(\\d\\d)-?(\\d\\d)(?:[ T](\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:[.,](\\d+))?)?)?( ?[zZ]| ?([-+])(\\d\\d)(?::?(\\d\\d))?)?)?$"));
    _lazyFinal($, "_hashSeed", "$get$_hashSeed", () => A.objectHashCode(B.Type_Object_A4p));
    _lazyFinal($, "CssStyleDeclaration__propertyCache", "$get$CssStyleDeclaration__propertyCache", () => ({}));
    _lazyFinal($, "_Html5NodeValidator__allowedElements", "$get$_Html5NodeValidator__allowedElements", () => A.LinkedHashSet_LinkedHashSet$from(["A", "ABBR", "ACRONYM", "ADDRESS", "AREA", "ARTICLE", "ASIDE", "AUDIO", "B", "BDI", "BDO", "BIG", "BLOCKQUOTE", "BR", "BUTTON", "CANVAS", "CAPTION", "CENTER", "CITE", "CODE", "COL", "COLGROUP", "COMMAND", "DATA", "DATALIST", "DD", "DEL", "DETAILS", "DFN", "DIR", "DIV", "DL", "DT", "EM", "FIELDSET", "FIGCAPTION", "FIGURE", "FONT", "FOOTER", "FORM", "H1", "H2", "H3", "H4", "H5", "H6", "HEADER", "HGROUP", "HR", "I", "IFRAME", "IMG", "INPUT", "INS", "KBD", "LABEL", "LEGEND", "LI", "MAP", "MARK", "MENU", "METER", "NAV", "NOBR", "OL", "OPTGROUP", "OPTION", "OUTPUT", "P", "PRE", "PROGRESS", "Q", "S", "SAMP", "SECTION", "SELECT", "SMALL", "SOURCE", "SPAN", "STRIKE", "STRONG", "SUB", "SUMMARY", "SUP", "TABLE", "TBODY", "TD", "TEXTAREA", "TFOOT", "TH", "THEAD", "TIME", "TR", "TRACK", "TT", "U", "UL", "VAR", "VIDEO", "WBR"], type$.String));
    _lazyFinal($, "Device_isOpera", "$get$Device_isOpera", () => B.JSString_methods.contains$2(A.Device_userAgent(), "Opera", 0));
    _lazyFinal($, "Device_isIE", "$get$Device_isIE", () => !$.$get$Device_isOpera() && B.JSString_methods.contains$2(A.Device_userAgent(), "Trident/", 0));
    _lazyFinal($, "Device_isFirefox", "$get$Device_isFirefox", () => B.JSString_methods.contains$2(A.Device_userAgent(), "Firefox", 0));
    _lazyFinal($, "Device_cssPrefix", "$get$Device_cssPrefix", () => "-" + $.$get$Device_propertyPrefix() + "-");
    _lazyFinal($, "Device_propertyPrefix", "$get$Device_propertyPrefix", () => {
      if ($.$get$Device_isFirefox())
        var t1 = "moz";
      else if ($.$get$Device_isIE())
        t1 = "ms";
      else
        t1 = $.$get$Device_isOpera() ? "o" : "webkit";
      return t1;
    });
    _lazyFinal($, "_ioOverridesToken", "$get$_ioOverridesToken", () => new A.Object());
    _lazyFinal($, "_stdout", "$get$_stdout", () => A._StdIOUtils__getStdioOutputStream(1));
    _lazyFinal($, "Lexer__keywords", "$get$Lexer__keywords", () => A.LinkedHashMap_LinkedHashMap$_literal(["e", B.TokenType_32, "senao", B.TokenType_33, "falso", B.TokenType_34, "para", B.TokenType_35, "se", B.TokenType_36, "nulo", B.TokenType_37, "ou", B.TokenType_38, "imprima", B.TokenType_39, "retorne", B.TokenType_40, "verdadeiro", B.TokenType_41, "var", B.TokenType_42, "enquanto", B.TokenType_43, "parar", B.TokenType_44, "continuar", B.TokenType_45, "escolha", B.TokenType_46, "caso", B.TokenType_47, "contrario", B.TokenType_48, "ate", B.TokenType_49, "faca", B.TokenType_50, "incremente", B.TokenType_51, "decremente", B.TokenType_52, "constante", B.TokenType_59, "importar", B.TokenType_60, "como", B.TokenType_61, "tipode", B.TokenType_62, "inteiro", B.TokenType_54, "real", B.TokenType_55, "texto", B.TokenType_56, "logico", B.TokenType_57, "vazio", B.TokenType_58], type$.String, A.findType("TokenType")));
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({DOMError: J.JavaScriptObject, MediaError: J.JavaScriptObject, Navigator: J.JavaScriptObject, NavigatorConcurrentHardware: J.JavaScriptObject, NavigatorUserMediaError: J.JavaScriptObject, OverconstrainedError: J.JavaScriptObject, PositionError: J.JavaScriptObject, GeolocationPositionError: J.JavaScriptObject, Range: J.JavaScriptObject, HTMLAudioElement: A.HtmlElement, HTMLBRElement: A.HtmlElement, HTMLCanvasElement: A.HtmlElement, HTMLContentElement: A.HtmlElement, HTMLDListElement: A.HtmlElement, HTMLDataElement: A.HtmlElement, HTMLDataListElement: A.HtmlElement, HTMLDetailsElement: A.HtmlElement, HTMLDialogElement: A.HtmlElement, HTMLEmbedElement: A.HtmlElement, HTMLFieldSetElement: A.HtmlElement, HTMLHRElement: A.HtmlElement, HTMLHeadElement: A.HtmlElement, HTMLHeadingElement: A.HtmlElement, HTMLHtmlElement: A.HtmlElement, HTMLIFrameElement: A.HtmlElement, HTMLImageElement: A.HtmlElement, HTMLInputElement: A.HtmlElement, HTMLLIElement: A.HtmlElement, HTMLLabelElement: A.HtmlElement, HTMLLegendElement: A.HtmlElement, HTMLLinkElement: A.HtmlElement, HTMLMapElement: A.HtmlElement, HTMLMediaElement: A.HtmlElement, HTMLMenuElement: A.HtmlElement, HTMLMetaElement: A.HtmlElement, HTMLMeterElement: A.HtmlElement, HTMLModElement: A.HtmlElement, HTMLOListElement: A.HtmlElement, HTMLObjectElement: A.HtmlElement, HTMLOptGroupElement: A.HtmlElement, HTMLOptionElement: A.HtmlElement, HTMLOutputElement: A.HtmlElement, HTMLParagraphElement: A.HtmlElement, HTMLParamElement: A.HtmlElement, HTMLPictureElement: A.HtmlElement, HTMLPreElement: A.HtmlElement, HTMLProgressElement: A.HtmlElement, HTMLQuoteElement: A.HtmlElement, HTMLScriptElement: A.HtmlElement, HTMLShadowElement: A.HtmlElement, HTMLSlotElement: A.HtmlElement, HTMLSourceElement: A.HtmlElement, HTMLStyleElement: A.HtmlElement, HTMLTableCaptionElement: A.HtmlElement, HTMLTableCellElement: A.HtmlElement, HTMLTableDataCellElement: A.HtmlElement, HTMLTableHeaderCellElement: A.HtmlElement, HTMLTableColElement: A.HtmlElement, HTMLTimeElement: A.HtmlElement, HTMLTitleElement: A.HtmlElement, HTMLTrackElement: A.HtmlElement, HTMLUListElement: A.HtmlElement, HTMLUnknownElement: A.HtmlElement, HTMLVideoElement: A.HtmlElement, HTMLDirectoryElement: A.HtmlElement, HTMLFontElement: A.HtmlElement, HTMLFrameElement: A.HtmlElement, HTMLFrameSetElement: A.HtmlElement, HTMLMarqueeElement: A.HtmlElement, HTMLElement: A.HtmlElement, HTMLAnchorElement: A.AnchorElement, HTMLAreaElement: A.AreaElement, HTMLBaseElement: A.BaseElement, HTMLBodyElement: A.BodyElement, HTMLButtonElement: A.ButtonElement, CDATASection: A.CharacterData, CharacterData: A.CharacterData, Comment: A.CharacterData, ProcessingInstruction: A.CharacterData, Text: A.CharacterData, CSSStyleDeclaration: A.CssStyleDeclaration, MSStyleCSSProperties: A.CssStyleDeclaration, CSS2Properties: A.CssStyleDeclaration, HTMLDivElement: A.DivElement, XMLDocument: A.Document, Document: A.Document, DOMException: A.DomException, DOMImplementation: A.DomImplementation, MathMLElement: A.Element, Element: A.Element, AbortPaymentEvent: A.Event, AnimationEvent: A.Event, AnimationPlaybackEvent: A.Event, ApplicationCacheErrorEvent: A.Event, BackgroundFetchClickEvent: A.Event, BackgroundFetchEvent: A.Event, BackgroundFetchFailEvent: A.Event, BackgroundFetchedEvent: A.Event, BeforeInstallPromptEvent: A.Event, BeforeUnloadEvent: A.Event, BlobEvent: A.Event, CanMakePaymentEvent: A.Event, ClipboardEvent: A.Event, CloseEvent: A.Event, CustomEvent: A.Event, DeviceMotionEvent: A.Event, DeviceOrientationEvent: A.Event, ErrorEvent: A.Event, ExtendableEvent: A.Event, ExtendableMessageEvent: A.Event, FetchEvent: A.Event, FontFaceSetLoadEvent: A.Event, ForeignFetchEvent: A.Event, GamepadEvent: A.Event, HashChangeEvent: A.Event, InstallEvent: A.Event, MediaEncryptedEvent: A.Event, MediaKeyMessageEvent: A.Event, MediaQueryListEvent: A.Event, MediaStreamEvent: A.Event, MediaStreamTrackEvent: A.Event, MessageEvent: A.Event, MIDIConnectionEvent: A.Event, MIDIMessageEvent: A.Event, MutationEvent: A.Event, NotificationEvent: A.Event, PageTransitionEvent: A.Event, PaymentRequestEvent: A.Event, PaymentRequestUpdateEvent: A.Event, PopStateEvent: A.Event, PresentationConnectionAvailableEvent: A.Event, PresentationConnectionCloseEvent: A.Event, ProgressEvent: A.Event, PromiseRejectionEvent: A.Event, PushEvent: A.Event, RTCDataChannelEvent: A.Event, RTCDTMFToneChangeEvent: A.Event, RTCPeerConnectionIceEvent: A.Event, RTCTrackEvent: A.Event, SecurityPolicyViolationEvent: A.Event, SensorErrorEvent: A.Event, SpeechRecognitionError: A.Event, SpeechRecognitionEvent: A.Event, SpeechSynthesisEvent: A.Event, StorageEvent: A.Event, SyncEvent: A.Event, TrackEvent: A.Event, TransitionEvent: A.Event, WebKitTransitionEvent: A.Event, VRDeviceEvent: A.Event, VRDisplayEvent: A.Event, VRSessionEvent: A.Event, MojoInterfaceRequestEvent: A.Event, ResourceProgressEvent: A.Event, USBConnectionEvent: A.Event, IDBVersionChangeEvent: A.Event, AudioProcessingEvent: A.Event, OfflineAudioCompletionEvent: A.Event, WebGLContextEvent: A.Event, Event: A.Event, InputEvent: A.Event, SubmitEvent: A.Event, Window: A.EventTarget, DOMWindow: A.EventTarget, EventTarget: A.EventTarget, HTMLFormElement: A.FormElement, HTMLCollection: A.HtmlCollection, HTMLFormControlsCollection: A.HtmlCollection, HTMLOptionsCollection: A.HtmlCollection, HTMLDocument: A.HtmlDocument, KeyboardEvent: A.KeyboardEvent, Location: A.Location, MouseEvent: A.MouseEvent, DragEvent: A.MouseEvent, PointerEvent: A.MouseEvent, WheelEvent: A.MouseEvent, DocumentFragment: A.Node, ShadowRoot: A.Node, DocumentType: A.Node, Node: A.Node, NodeList: A.NodeList, RadioNodeList: A.NodeList, HTMLSelectElement: A.SelectElement, HTMLSpanElement: A.SpanElement, HTMLTableElement: A.TableElement, HTMLTableRowElement: A.TableRowElement, HTMLTableSectionElement: A.TableSectionElement, HTMLTemplateElement: A.TemplateElement, HTMLTextAreaElement: A.TextAreaElement, CompositionEvent: A.UIEvent, FocusEvent: A.UIEvent, TextEvent: A.UIEvent, TouchEvent: A.UIEvent, UIEvent: A.UIEvent, Attr: A._Attr, NamedNodeMap: A._NamedNodeMap, MozNamedAttrMap: A._NamedNodeMap, SVGScriptElement: A.ScriptElement0, SVGAElement: A.SvgElement, SVGAnimateElement: A.SvgElement, SVGAnimateMotionElement: A.SvgElement, SVGAnimateTransformElement: A.SvgElement, SVGAnimationElement: A.SvgElement, SVGCircleElement: A.SvgElement, SVGClipPathElement: A.SvgElement, SVGDefsElement: A.SvgElement, SVGDescElement: A.SvgElement, SVGDiscardElement: A.SvgElement, SVGEllipseElement: A.SvgElement, SVGFEBlendElement: A.SvgElement, SVGFEColorMatrixElement: A.SvgElement, SVGFEComponentTransferElement: A.SvgElement, SVGFECompositeElement: A.SvgElement, SVGFEConvolveMatrixElement: A.SvgElement, SVGFEDiffuseLightingElement: A.SvgElement, SVGFEDisplacementMapElement: A.SvgElement, SVGFEDistantLightElement: A.SvgElement, SVGFEFloodElement: A.SvgElement, SVGFEFuncAElement: A.SvgElement, SVGFEFuncBElement: A.SvgElement, SVGFEFuncGElement: A.SvgElement, SVGFEFuncRElement: A.SvgElement, SVGFEGaussianBlurElement: A.SvgElement, SVGFEImageElement: A.SvgElement, SVGFEMergeElement: A.SvgElement, SVGFEMergeNodeElement: A.SvgElement, SVGFEMorphologyElement: A.SvgElement, SVGFEOffsetElement: A.SvgElement, SVGFEPointLightElement: A.SvgElement, SVGFESpecularLightingElement: A.SvgElement, SVGFESpotLightElement: A.SvgElement, SVGFETileElement: A.SvgElement, SVGFETurbulenceElement: A.SvgElement, SVGFilterElement: A.SvgElement, SVGForeignObjectElement: A.SvgElement, SVGGElement: A.SvgElement, SVGGeometryElement: A.SvgElement, SVGGraphicsElement: A.SvgElement, SVGImageElement: A.SvgElement, SVGLineElement: A.SvgElement, SVGLinearGradientElement: A.SvgElement, SVGMarkerElement: A.SvgElement, SVGMaskElement: A.SvgElement, SVGMetadataElement: A.SvgElement, SVGPathElement: A.SvgElement, SVGPatternElement: A.SvgElement, SVGPolygonElement: A.SvgElement, SVGPolylineElement: A.SvgElement, SVGRadialGradientElement: A.SvgElement, SVGRectElement: A.SvgElement, SVGSetElement: A.SvgElement, SVGStopElement: A.SvgElement, SVGStyleElement: A.SvgElement, SVGSVGElement: A.SvgElement, SVGSwitchElement: A.SvgElement, SVGSymbolElement: A.SvgElement, SVGTSpanElement: A.SvgElement, SVGTextContentElement: A.SvgElement, SVGTextElement: A.SvgElement, SVGTextPathElement: A.SvgElement, SVGTextPositioningElement: A.SvgElement, SVGTitleElement: A.SvgElement, SVGUseElement: A.SvgElement, SVGViewElement: A.SvgElement, SVGGradientElement: A.SvgElement, SVGComponentTransferFunctionElement: A.SvgElement, SVGFEDropShadowElement: A.SvgElement, SVGMPathElement: A.SvgElement, SVGElement: A.SvgElement});
    hunkHelpers.setOrUpdateLeafTags({DOMError: true, MediaError: true, Navigator: true, NavigatorConcurrentHardware: true, NavigatorUserMediaError: true, OverconstrainedError: true, PositionError: true, GeolocationPositionError: true, Range: true, HTMLAudioElement: true, HTMLBRElement: true, HTMLCanvasElement: true, HTMLContentElement: true, HTMLDListElement: true, HTMLDataElement: true, HTMLDataListElement: true, HTMLDetailsElement: true, HTMLDialogElement: true, HTMLEmbedElement: true, HTMLFieldSetElement: true, HTMLHRElement: true, HTMLHeadElement: true, HTMLHeadingElement: true, HTMLHtmlElement: true, HTMLIFrameElement: true, HTMLImageElement: true, HTMLInputElement: true, HTMLLIElement: true, HTMLLabelElement: true, HTMLLegendElement: true, HTMLLinkElement: true, HTMLMapElement: true, HTMLMediaElement: true, HTMLMenuElement: true, HTMLMetaElement: true, HTMLMeterElement: true, HTMLModElement: true, HTMLOListElement: true, HTMLObjectElement: true, HTMLOptGroupElement: true, HTMLOptionElement: true, HTMLOutputElement: true, HTMLParagraphElement: true, HTMLParamElement: true, HTMLPictureElement: true, HTMLPreElement: true, HTMLProgressElement: true, HTMLQuoteElement: true, HTMLScriptElement: true, HTMLShadowElement: true, HTMLSlotElement: true, HTMLSourceElement: true, HTMLStyleElement: true, HTMLTableCaptionElement: true, HTMLTableCellElement: true, HTMLTableDataCellElement: true, HTMLTableHeaderCellElement: true, HTMLTableColElement: true, HTMLTimeElement: true, HTMLTitleElement: true, HTMLTrackElement: true, HTMLUListElement: true, HTMLUnknownElement: true, HTMLVideoElement: true, HTMLDirectoryElement: true, HTMLFontElement: true, HTMLFrameElement: true, HTMLFrameSetElement: true, HTMLMarqueeElement: true, HTMLElement: false, HTMLAnchorElement: true, HTMLAreaElement: true, HTMLBaseElement: true, HTMLBodyElement: true, HTMLButtonElement: true, CDATASection: true, CharacterData: true, Comment: true, ProcessingInstruction: true, Text: true, CSSStyleDeclaration: true, MSStyleCSSProperties: true, CSS2Properties: true, HTMLDivElement: true, XMLDocument: true, Document: false, DOMException: true, DOMImplementation: true, MathMLElement: true, Element: false, AbortPaymentEvent: true, AnimationEvent: true, AnimationPlaybackEvent: true, ApplicationCacheErrorEvent: true, BackgroundFetchClickEvent: true, BackgroundFetchEvent: true, BackgroundFetchFailEvent: true, BackgroundFetchedEvent: true, BeforeInstallPromptEvent: true, BeforeUnloadEvent: true, BlobEvent: true, CanMakePaymentEvent: true, ClipboardEvent: true, CloseEvent: true, CustomEvent: true, DeviceMotionEvent: true, DeviceOrientationEvent: true, ErrorEvent: true, ExtendableEvent: true, ExtendableMessageEvent: true, FetchEvent: true, FontFaceSetLoadEvent: true, ForeignFetchEvent: true, GamepadEvent: true, HashChangeEvent: true, InstallEvent: true, MediaEncryptedEvent: true, MediaKeyMessageEvent: true, MediaQueryListEvent: true, MediaStreamEvent: true, MediaStreamTrackEvent: true, MessageEvent: true, MIDIConnectionEvent: true, MIDIMessageEvent: true, MutationEvent: true, NotificationEvent: true, PageTransitionEvent: true, PaymentRequestEvent: true, PaymentRequestUpdateEvent: true, PopStateEvent: true, PresentationConnectionAvailableEvent: true, PresentationConnectionCloseEvent: true, ProgressEvent: true, PromiseRejectionEvent: true, PushEvent: true, RTCDataChannelEvent: true, RTCDTMFToneChangeEvent: true, RTCPeerConnectionIceEvent: true, RTCTrackEvent: true, SecurityPolicyViolationEvent: true, SensorErrorEvent: true, SpeechRecognitionError: true, SpeechRecognitionEvent: true, SpeechSynthesisEvent: true, StorageEvent: true, SyncEvent: true, TrackEvent: true, TransitionEvent: true, WebKitTransitionEvent: true, VRDeviceEvent: true, VRDisplayEvent: true, VRSessionEvent: true, MojoInterfaceRequestEvent: true, ResourceProgressEvent: true, USBConnectionEvent: true, IDBVersionChangeEvent: true, AudioProcessingEvent: true, OfflineAudioCompletionEvent: true, WebGLContextEvent: true, Event: false, InputEvent: false, SubmitEvent: false, Window: true, DOMWindow: true, EventTarget: false, HTMLFormElement: true, HTMLCollection: true, HTMLFormControlsCollection: true, HTMLOptionsCollection: true, HTMLDocument: true, KeyboardEvent: true, Location: true, MouseEvent: true, DragEvent: true, PointerEvent: true, WheelEvent: true, DocumentFragment: true, ShadowRoot: true, DocumentType: true, Node: false, NodeList: true, RadioNodeList: true, HTMLSelectElement: true, HTMLSpanElement: true, HTMLTableElement: true, HTMLTableRowElement: true, HTMLTableSectionElement: true, HTMLTemplateElement: true, HTMLTextAreaElement: true, CompositionEvent: true, FocusEvent: true, TextEvent: true, TouchEvent: true, UIEvent: false, Attr: true, NamedNodeMap: true, MozNamedAttrMap: true, SVGScriptElement: true, SVGAElement: true, SVGAnimateElement: true, SVGAnimateMotionElement: true, SVGAnimateTransformElement: true, SVGAnimationElement: true, SVGCircleElement: true, SVGClipPathElement: true, SVGDefsElement: true, SVGDescElement: true, SVGDiscardElement: true, SVGEllipseElement: true, SVGFEBlendElement: true, SVGFEColorMatrixElement: true, SVGFEComponentTransferElement: true, SVGFECompositeElement: true, SVGFEConvolveMatrixElement: true, SVGFEDiffuseLightingElement: true, SVGFEDisplacementMapElement: true, SVGFEDistantLightElement: true, SVGFEFloodElement: true, SVGFEFuncAElement: true, SVGFEFuncBElement: true, SVGFEFuncGElement: true, SVGFEFuncRElement: true, SVGFEGaussianBlurElement: true, SVGFEImageElement: true, SVGFEMergeElement: true, SVGFEMergeNodeElement: true, SVGFEMorphologyElement: true, SVGFEOffsetElement: true, SVGFEPointLightElement: true, SVGFESpecularLightingElement: true, SVGFESpotLightElement: true, SVGFETileElement: true, SVGFETurbulenceElement: true, SVGFilterElement: true, SVGForeignObjectElement: true, SVGGElement: true, SVGGeometryElement: true, SVGGraphicsElement: true, SVGImageElement: true, SVGLineElement: true, SVGLinearGradientElement: true, SVGMarkerElement: true, SVGMaskElement: true, SVGMetadataElement: true, SVGPathElement: true, SVGPatternElement: true, SVGPolygonElement: true, SVGPolylineElement: true, SVGRadialGradientElement: true, SVGRectElement: true, SVGSetElement: true, SVGStopElement: true, SVGStyleElement: true, SVGSVGElement: true, SVGSwitchElement: true, SVGSymbolElement: true, SVGTSpanElement: true, SVGTextContentElement: true, SVGTextElement: true, SVGTextPathElement: true, SVGTextPositioningElement: true, SVGTitleElement: true, SVGUseElement: true, SVGViewElement: true, SVGGradientElement: true, SVGComponentTransferFunctionElement: true, SVGFEDropShadowElement: true, SVGMPathElement: true, SVGElement: false});
  })();
  Function.prototype.call$0 = function() {
    return this();
  };
  Function.prototype.call$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$1$1 = function(a) {
    return this(a);
  };
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != "undefined") {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i) {
        scripts[i].removeEventListener("load", onLoad, false);
      }
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].addEventListener("load", onLoad, false);
    }
  })(function(currentScript) {
    init.currentScript = currentScript;
    var callMain = A.main;
    if (typeof dartMainRunner === "function") {
      dartMainRunner(callMain, []);
    } else {
      callMain([]);
    }
  });
})();

//# sourceMappingURL=main.dart.js.map
